#!/usr/bin/env node
import { createRequire as topLevelCreateRequire } from 'module';
global.require = topLevelCreateRequire(import.meta.url);
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw new Error('Dynamic require of "' + x + '" is not supported');
});
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require2() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/context/context.ts
var context_exports = {};
__export(context_exports, {
  Context: () => Context,
  memo: () => memo
});
function create(cb, name) {
  const id = typeof cb === "string" ? cb : name || Symbol(cb?.toString());
  return {
    use() {
      let result = state.contexts.get(id);
      if (!result) {
        if (!cb || typeof cb === "string")
          throw new Error(`"${String(id)}" context was not provided.`);
        state.tracking.push(id);
        const value = cb();
        state.tracking.pop();
        result = {
          value,
          dependants: /* @__PURE__ */ new Set()
        };
        state.contexts.set(id, result);
      }
      const last2 = state.tracking[state.tracking.length - 1];
      if (last2)
        result.dependants.add(last2);
      return result.value;
    },
    provide(value) {
      const requestID = global[Symbol.for("aws.lambda.runtime.requestId")];
      if (state.requestID !== requestID) {
        state.requestID = requestID;
        reset();
      }
      resetDependencies(id);
      state.contexts.set(id, {
        value,
        dependants: /* @__PURE__ */ new Set()
      });
    }
  };
}
function reset() {
  state.contexts.clear();
}
function resetDependencies(id) {
  const info = state.contexts.get(id);
  if (!info)
    return;
  for (const dependantID of info.dependants) {
    resetDependencies(dependantID);
    state.contexts.delete(dependantID);
  }
}
function memo(cb, name) {
  const ctx = create(cb, name);
  return ctx.use;
}
var Context, state;
var init_context = __esm({
  "src/context/context.ts"() {
    "use strict";
    Context = {
      create,
      reset,
      memo
    };
    state = {
      requestID: "",
      contexts: /* @__PURE__ */ new Map(),
      tracking: []
    };
  }
});

// src/logger.ts
var logger_exports = {};
__export(logger_exports, {
  Logger: () => Logger
});
import fs from "fs/promises";
import path from "path";
var previous, useFile, Logger;
var init_logger = __esm({
  "src/logger.ts"() {
    "use strict";
    init_context();
    previous = new Date();
    useFile = Context.memo(async () => {
      const { useProject: useProject2 } = await Promise.resolve().then(() => (init_project(), project_exports));
      const project = useProject2();
      const filePath = path.join(project.paths.out, "debug.log");
      const file = await fs.open(filePath, "w");
      return file;
    });
    Logger = {
      debug(...parts) {
        const now = new Date();
        const diff3 = now.getTime() - previous.getTime();
        previous = now;
        const line = [
          new Date().toISOString(),
          `+${diff3}ms`.padStart(8),
          "[debug]",
          ...parts.map((x) => {
            if (typeof x === "string")
              return x;
            return JSON.stringify(x);
          })
        ];
        if (process.env.SST_VERBOSE)
          console.log(...line);
        useFile().then((file) => {
          file.write(line.join(" ") + "\n");
        });
      }
    };
  }
});

// src/error.ts
var VisibleError;
var init_error = __esm({
  "src/error.ts"() {
    "use strict";
    VisibleError = class extends Error {
      constructor(...message) {
        super(message.join("\n"));
      }
    };
  }
});

// src/util/module.ts
import url from "url";
async function dynamicImport(input) {
  const { href } = url.pathToFileURL(input);
  return import(href);
}
var init_module = __esm({
  "src/util/module.ts"() {
    "use strict";
  }
});

// src/util/fs.ts
var fs_exports = {};
__export(fs_exports, {
  existsAsync: () => existsAsync,
  findAbove: () => findAbove,
  findBelow: () => findBelow,
  isChild: () => isChild
});
import fs2 from "fs/promises";
import path2 from "path";
async function findAbove(dir, target) {
  if (dir === "/")
    return void 0;
  if (await existsAsync(path2.join(dir, target)))
    return dir;
  return findAbove(path2.resolve(path2.join(dir, "..")), target);
}
async function findBelow(dir, target) {
  async function loop(dir2) {
    const current = path2.join(dir2, target);
    if (await existsAsync(current))
      return dir2;
    const files = await fs2.readdir(dir2);
    for (const file of files) {
      if (file === "node_modules")
        continue;
      if (file === ".sst")
        continue;
      const full = path2.join(dir2, file);
      const stat = await fs2.stat(full);
      if (stat.isDirectory()) {
        const result = await loop(full);
        if (result)
          return result;
      }
    }
    return;
  }
  const value = await loop(dir);
  if (!value)
    throw new VisibleError(`Could not find a ${target} file`);
  return value;
}
function isChild(parent, child) {
  const relative = path2.relative(parent, child);
  return Boolean(
    relative && !relative.startsWith("..") && !path2.isAbsolute(relative)
  );
}
async function existsAsync(input) {
  return fs2.access(input).then(() => true).catch(() => false);
}
var init_fs = __esm({
  "src/util/fs.ts"() {
    "use strict";
    init_error();
  }
});

// src/stacks/build.ts
import esbuild from "esbuild";
import fs3 from "fs/promises";
import path3 from "path";
async function load(input) {
  const parsed = path3.parse(input);
  const root = await findAbove(input, "package.json");
  if (!root)
    throw new VisibleError("Could not find a package.json file");
  const outfile = path3.join(parsed.dir, `.${parsed.name}.${Date.now()}.mjs`);
  const pkg = JSON.parse(
    await fs3.readFile(path3.join(root, "package.json")).then((x) => x.toString())
  );
  try {
    const result = await esbuild.build({
      keepNames: true,
      bundle: true,
      sourcemap: "inline",
      platform: "node",
      target: "esnext",
      metafile: true,
      format: "esm",
      logLevel: "silent",
      external: [
        "aws-cdk-lib",
        "sst",
        ...Object.keys({
          ...pkg.devDependencies,
          ...pkg.dependencies,
          ...pkg.peerDependencies
        })
      ],
      absWorkingDir: root,
      outfile,
      banner: {
        js: [
          `import { createRequire as topLevelCreateRequire } from 'module';`,
          `const require = topLevelCreateRequire(import.meta.url);`
        ].join("")
      },
      entryPoints: [input]
    });
    const mod = await dynamicImport(outfile);
    await fs3.rm(outfile, {
      force: true
    });
    if (!mod.default?.config)
      throw new VisibleError(
        `The config file is improperly formatted.`,
        `Example:`,
        `export default {`,
        `  config() {`,
        `    return {`,
        `      name: "my-app",`,
        `      region: "us-east-1"`,
        `    }`,
        `  },`,
        `  stacks(app) {`,
        `  }`,
        `}`
      );
    return [result.metafile, mod.default];
  } catch (e) {
    await fs3.rm(outfile, {
      force: true
    });
    throw e;
  }
}
var init_build = __esm({
  "src/stacks/build.ts"() {
    "use strict";
    init_module();
    init_fs();
    init_error();
  }
});

// src/project.ts
var project_exports = {};
__export(project_exports, {
  ProjectContext: () => ProjectContext,
  exportedForTesting: () => exportedForTesting,
  initProject: () => initProject,
  useProject: () => useProject
});
import fs4 from "fs/promises";
import fsSync from "fs";
import path4 from "path";
import url2 from "url";
import os from "os";
import { blue } from "colorette";
import dotenv from "dotenv";
function useProject() {
  return ProjectContext.use();
}
async function initProject(globals) {
  const root = globals.root || await findRoot();
  const out = path4.join(root, ".sst");
  await fs4.mkdir(out, {
    recursive: true
  });
  let file;
  const [metafile, sstConfig] = await async function() {
    for (const ext of CONFIG_EXTENSIONS) {
      file = path4.join(root, "sst" + ext);
      if (!fsSync.existsSync(file))
        continue;
      const [metafile2, config2] = await load(file);
      return [metafile2, config2];
    }
    throw new VisibleError(
      "Could not found a configuration file",
      "Make sure one of the following exists",
      ...CONFIG_EXTENSIONS.map((x) => `  - sst${x}`)
    );
  }();
  const config = await Promise.resolve(sstConfig.config(globals));
  const stage = globals.stage || config.stage || await usePersonalStage(out) || await promptPersonalStage(out);
  const [version2, cdkVersion, constructsVersion] = await (async () => {
    try {
      const packageJson = JSON.parse(
        await fs4.readFile(
          url2.fileURLToPath(new URL("./package.json", import.meta.url))
        ).then((x) => x.toString())
      );
      return [
        packageJson.version,
        packageJson.dependencies["aws-cdk-lib"],
        packageJson.dependencies["constructs"]
      ];
    } catch {
      return ["unknown", "unknown"];
    }
  })();
  const project = {
    version: version2,
    cdkVersion,
    constructsVersion,
    config: {
      ...config,
      stage,
      profile: process.env.AWS_ACCESS_KEY_ID && process.env.AWS_SECRET_ACCESS_KEY ? void 0 : globals.profile || config.profile,
      region: globals.region || config.region,
      role: globals.role || config.role,
      ssmPrefix: config.ssmPrefix || `/sst/${config.name}/${stage}/`,
      bootstrap: config.bootstrap,
      cdk: config.cdk
    },
    stacks: sstConfig.stacks,
    metafile,
    paths: {
      config: file,
      root,
      out,
      artifacts: path4.join(out, "artifacts")
    }
  };
  (async function() {
    const files = await fs4.readdir(project.paths.root);
    for (const file2 of files) {
      if (file2.startsWith(".sst.config")) {
        await fs4.unlink(path4.join(project.paths.root, file2));
        Logger.debug(`Removed old config file ${file2}`);
      }
    }
  })();
  ProjectContext.provide(project);
  dotenv.config({
    path: path4.join(project.paths.root, `.env.${project.config.stage}`),
    override: true
  });
  dotenv.config({
    path: path4.join(project.paths.root, `.env.${project.config.stage}.local`),
    override: true
  });
  Logger.debug("Config loaded", project);
}
async function usePersonalStage(out) {
  try {
    const result = await fs4.readFile(path4.join(out, "stage"));
    return result.toString("utf8").trim();
  } catch {
    return;
  }
}
async function promptPersonalStage(out, isRetry) {
  const readline = await import("readline");
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });
  const stage = await new Promise((resolve) => {
    const suggested = sanitizeStageName(os.userInfo().username) || "local";
    const instruction = !isRetry ? `Please enter a name you\u2019d like to use for your personal stage.` : `Please enter a name that starts with a letter, followed by letters, numbers, or hyphens.`;
    rl.question(
      `${instruction} Or hit enter to use ${blue(suggested)}: `,
      async (input) => {
        rl.close();
        const result = input === "" ? suggested : input;
        resolve(result);
      }
    );
  });
  if (isValidStageName(stage)) {
    await fs4.writeFile(path4.join(out, "stage"), stage);
    return stage;
  }
  return await promptPersonalStage(out, true);
}
async function findRoot() {
  async function find2(dir) {
    if (dir === "/")
      throw new VisibleError(
        "Could not found a configuration file",
        "Make sure one of the following exists",
        ...CONFIG_EXTENSIONS.map((ext) => `  - sst${ext}`)
      );
    for (const ext of CONFIG_EXTENSIONS) {
      const configPath = path4.join(dir, `sst${ext}`);
      if (fsSync.existsSync(configPath)) {
        return dir;
      }
    }
    return await find2(path4.join(dir, ".."));
  }
  const result = await find2(process.cwd());
  return result;
}
function sanitizeStageName(stage) {
  return stage.replace(/[^A-Za-z0-9-]/g, "-").replace(/--+/g, "-").replace(/^[^A-Za-z]/, "").replace(/-$/, "") || "local";
}
function isValidStageName(stage) {
  return Boolean(stage.match(/^[A-Za-z][A-Za-z0-9-]*$/));
}
var ProjectContext, CONFIG_EXTENSIONS, exportedForTesting;
var init_project = __esm({
  "src/project.ts"() {
    "use strict";
    init_logger();
    init_context();
    init_error();
    init_build();
    ProjectContext = Context.create("Project");
    CONFIG_EXTENSIONS = [
      ".config.ts",
      ".config.mts",
      ".config.cts",
      ".config.cjs",
      ".config.mjs",
      ".config.js"
    ];
    exportedForTesting = {
      sanitizeStageName,
      isValidStageName
    };
  }
});

// src/cli/telemetry/post-payload.ts
import https from "https";
function postPayload(endpoint, body) {
  return new Promise((resolve, reject) => {
    try {
      const req = https.request(
        endpoint,
        {
          method: "POST",
          headers: { "content-type": "application/json" },
          timeout: 5e3
        },
        (resp) => {
          if (resp.statusCode !== 200) {
            reject(new Error(`Unexpected status code: ${resp.statusCode}`));
            return;
          }
          resolve();
        }
      );
      req.write(JSON.stringify(body));
      req.end();
    } catch (ex) {
      reject(ex);
    }
  });
}
var init_post_payload = __esm({
  "src/cli/telemetry/post-payload.ts"() {
    "use strict";
  }
});

// src/cli/telemetry/project-id.ts
import { execSync } from "child_process";
function getProjectIdByGit() {
  try {
    const originBuffer = execSync(
      `git config --local --get remote.origin.url`,
      {
        timeout: 1e3,
        stdio: `pipe`
      }
    );
    return String(originBuffer).trim();
  } catch (_) {
    return null;
  }
}
function normalizeGitUrl(url10) {
  url10 = url10.trim();
  url10 = url10.endsWith(".git") ? url10.substring(0, url10.length - 4) : url10;
  if (url10.startsWith("git@")) {
    const match = url10.match(/git@([^:]+):(.*)/);
    if (match && match.length > 2) {
      return `${match[1]}/${match[2]}`;
    }
  } else if (url10.startsWith("http://") || url10.startsWith("https://")) {
    const match = url10.match(/https?:\/\/([^@]+@)?(.*)/);
    if (match && match.length > 2) {
      return match[2];
    }
  }
  return url10;
}
function getRawProjectId() {
  const gitUrl = getProjectIdByGit();
  if (gitUrl) {
    return normalizeGitUrl(gitUrl);
  }
  const repoUrl = process.env.REPOSITORY_URL;
  if (repoUrl) {
    return normalizeGitUrl(repoUrl);
  }
  return process.cwd();
}
var init_project_id = __esm({
  "src/cli/telemetry/project-id.ts"() {
    "use strict";
  }
});

// src/cli/ci-info.ts
var ci_info_exports = {};
__export(ci_info_exports, {
  getCiInfo: () => getCiInfo
});
import ciInfo from "ci-info";
function getCiInfo() {
  const isSeed = !!process.env.SEED_APP_NAME;
  return {
    isCI: ciInfo.isCI || isSeed,
    name: (isSeed ? "Seed" : ciInfo.name) || null
  };
}
var init_ci_info = __esm({
  "src/cli/ci-info.ts"() {
    "use strict";
  }
});

// src/cli/telemetry/environment.ts
import os2 from "os";
function getEnvironmentData() {
  if (data) {
    return data;
  }
  const cpus = os2.cpus() || [];
  const ciInfo2 = getCiInfo();
  data = {
    systemPlatform: os2.platform(),
    systemRelease: os2.release(),
    systemArchitecture: os2.arch(),
    cpuCount: cpus.length,
    cpuModel: cpus.length ? cpus[0].model : null,
    cpuSpeed: cpus.length ? cpus[0].speed : null,
    memoryInMb: Math.trunc(os2.totalmem() / Math.pow(1024, 2)),
    isCI: ciInfo2.isCI,
    ciName: ciInfo2.name,
    sstVersion: useProject().version
  };
  return data;
}
var data;
var init_environment = __esm({
  "src/cli/telemetry/environment.ts"() {
    "use strict";
    init_ci_info();
    init_project();
  }
});

// src/cli/telemetry/telemetry.ts
var telemetry_exports = {};
__export(telemetry_exports, {
  disable: () => disable,
  enable: () => enable,
  isEnabled: () => isEnabled,
  trackCli: () => trackCli
});
import Conf from "conf";
import { createHash, randomBytes } from "crypto";
import { cyan } from "colorette";
function enable() {
  conf && conf.set(TELEMETRY_KEY_ENABLED, true);
}
function disable() {
  conf && conf.set(TELEMETRY_KEY_ENABLED, false);
}
function isEnabled() {
  if (!conf) {
    return false;
  }
  return conf.get(TELEMETRY_KEY_ENABLED, true) !== false;
}
function trackCli(command) {
  record("CLI_COMMAND", {
    command
  });
}
function initializeConf() {
  try {
    return new Conf({ projectName: "sst" });
  } catch (_) {
    return null;
  }
}
function notify() {
  if (!conf || willNotRecord()) {
    return;
  }
  if (conf.get(TELEMETRY_KEY_NOTIFY_DATE) !== void 0) {
    return;
  }
  conf.set(TELEMETRY_KEY_NOTIFY_DATE, Date.now().toString());
  console.log(
    `${cyan(
      "Attention"
    )}: SST now collects completely anonymous telemetry regarding usage. This is used to guide SST's roadmap.`
  );
  console.log(
    `You can learn more, including how to opt-out of this anonymous program, by heading over to:`
  );
  console.log("https://docs.sst.dev/anonymous-telemetry");
  console.log();
}
function willNotRecord() {
  return !isEnabled() || !!process.env.SST_TELEMETRY_DISABLED;
}
async function record(name, properties) {
  if (willNotRecord()) {
    return Promise.resolve();
  }
  const context = {
    anonymousId,
    projectId,
    sessionId
  };
  try {
    await postPayload(TELEMETRY_API, {
      context,
      environment: getEnvironmentData(),
      events: [
        {
          name,
          properties
        }
      ]
    });
  } catch {
  }
}
function getAnonymousId() {
  const val = conf && conf.get(TELEMETRY_KEY_ID);
  if (val) {
    return val;
  }
  const generated = randomBytes(32).toString("hex");
  conf && conf.set(TELEMETRY_KEY_ID, generated);
  return generated;
}
function hash(payload) {
  return createHash("sha256").update(payload).digest("hex");
}
var TELEMETRY_API, TELEMETRY_KEY_ENABLED, TELEMETRY_KEY_NOTIFY_DATE, TELEMETRY_KEY_ID, conf, sessionId, projectId, anonymousId;
var init_telemetry = __esm({
  "src/cli/telemetry/telemetry.ts"() {
    "use strict";
    init_post_payload();
    init_project_id();
    init_environment();
    TELEMETRY_API = "https://telemetry.sst.dev/events";
    TELEMETRY_KEY_ENABLED = "telemetry.enabled";
    TELEMETRY_KEY_NOTIFY_DATE = "telemetry.notifiedAt";
    TELEMETRY_KEY_ID = `telemetry.anonymousId`;
    conf = initializeConf();
    sessionId = randomBytes(32).toString("hex");
    projectId = hash(getRawProjectId());
    anonymousId = getAnonymousId();
    notify();
  }
});

// src/cli/colors.ts
var colors_exports = {};
__export(colors_exports, {
  Colors: () => Colors
});
import chalk from "chalk";
var last, Colors;
var init_colors = __esm({
  "src/cli/colors.ts"() {
    "use strict";
    last = "gap";
    Colors = {
      line: (message, ...optionalParams) => {
        last = "line";
        console.log(message, ...optionalParams);
      },
      mode(input) {
        last = input;
      },
      gap() {
        if (last === "line") {
          last = "gap";
          console.log();
        }
      },
      hex: chalk.hex,
      primary: chalk.hex("#FF9000"),
      link: chalk.cyan,
      success: chalk.green,
      danger: chalk.red,
      warning: chalk.yellow,
      dim: chalk.dim,
      bold: chalk.bold,
      all: chalk,
      prefix: chalk.bold("| ")
    };
  }
});

// src/cli/spinner.ts
var spinner_exports = {};
__export(spinner_exports, {
  createSpinner: () => createSpinner,
  useSpinners: () => useSpinners
});
import ora from "ora";
function createSpinner(options) {
  const spinners = useSpinners();
  const next = ora(options);
  spinners.push(next);
  Colors.mode("line");
  return next;
}
var useSpinners;
var init_spinner = __esm({
  "src/cli/spinner.ts"() {
    "use strict";
    init_context();
    init_colors();
    useSpinners = Context.memo(() => {
      const spinners = [];
      return spinners;
    });
  }
});

// ../../node_modules/.pnpm/tslib@2.5.0/node_modules/tslib/tslib.es6.js
var tslib_es6_exports = {};
__export(tslib_es6_exports, {
  __assign: () => __assign,
  __asyncDelegator: () => __asyncDelegator,
  __asyncGenerator: () => __asyncGenerator,
  __asyncValues: () => __asyncValues,
  __await: () => __await,
  __awaiter: () => __awaiter,
  __classPrivateFieldGet: () => __classPrivateFieldGet,
  __classPrivateFieldIn: () => __classPrivateFieldIn,
  __classPrivateFieldSet: () => __classPrivateFieldSet,
  __createBinding: () => __createBinding,
  __decorate: () => __decorate,
  __esDecorate: () => __esDecorate,
  __exportStar: () => __exportStar,
  __extends: () => __extends,
  __generator: () => __generator,
  __importDefault: () => __importDefault,
  __importStar: () => __importStar,
  __makeTemplateObject: () => __makeTemplateObject,
  __metadata: () => __metadata,
  __param: () => __param,
  __propKey: () => __propKey,
  __read: () => __read,
  __rest: () => __rest,
  __runInitializers: () => __runInitializers,
  __setFunctionName: () => __setFunctionName,
  __spread: () => __spread,
  __spreadArray: () => __spreadArray,
  __spreadArrays: () => __spreadArrays,
  __values: () => __values
});
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __rest(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) {
    if (f !== void 0 && typeof f !== "function")
      throw new TypeError("Function expected");
    return f;
  }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
    var context = {};
    for (var p in contextIn)
      context[p] = p === "access" ? {} : contextIn[p];
    for (var p in contextIn.access)
      context.access[p] = contextIn.access[p];
    context.addInitializer = function(f) {
      if (done)
        throw new TypeError("Cannot add initializers after decoration has completed");
      extraInitializers.push(accept(f || null));
    };
    var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
    if (kind === "accessor") {
      if (result === void 0)
        continue;
      if (result === null || typeof result !== "object")
        throw new TypeError("Object expected");
      if (_ = accept(result.get))
        descriptor.get = _;
      if (_ = accept(result.set))
        descriptor.set = _;
      if (_ = accept(result.init))
        initializers.push(_);
    } else if (_ = accept(result)) {
      if (kind === "field")
        initializers.push(_);
      else
        descriptor[key] = _;
    }
  }
  if (target)
    Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
}
function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
}
function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
}
function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol")
    name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator2) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator2.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator2["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator2 = generator2.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __exportStar(m, o) {
  for (var p in m)
    if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
      __createBinding(o, m, p);
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error2) {
    e = { error: error2 };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read(arguments[i]));
  return ar;
}
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
    s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator2) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator2.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function verb(n) {
    if (g[n])
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length)
      resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function(e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function() {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function(v) {
      return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k in mod)
      if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
        __createBinding(result, mod, k);
  }
  __setModuleDefault(result, mod);
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet(receiver, state2, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state2 === "function" ? receiver !== state2 || !f : !state2.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state2.get(receiver);
}
function __classPrivateFieldSet(receiver, state2, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state2 === "function" ? receiver !== state2 || !f : !state2.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state2.set(receiver, value), value;
}
function __classPrivateFieldIn(state2, receiver) {
  if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
    throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state2 === "function" ? receiver === state2 : state2.has(receiver);
}
var extendStatics, __assign, __createBinding, __setModuleDefault;
var init_tslib_es6 = __esm({
  "../../node_modules/.pnpm/tslib@2.5.0/node_modules/tslib/tslib.es6.js"() {
    extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          if (Object.prototype.hasOwnProperty.call(b2, p))
            d2[p] = b2[p];
      };
      return extendStatics(d, b);
    };
    __assign = function() {
      __assign = Object.assign || function __assign2(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    __createBinding = Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __setModuleDefault = Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/abort.js
var require_abort = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/abort.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/auth.js
var require_auth = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/auth.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HttpAuthLocation = void 0;
    var HttpAuthLocation;
    (function(HttpAuthLocation2) {
      HttpAuthLocation2["HEADER"] = "header";
      HttpAuthLocation2["QUERY"] = "query";
    })(HttpAuthLocation = exports.HttpAuthLocation || (exports.HttpAuthLocation = {}));
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/checksum.js
var require_checksum = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/checksum.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/client.js
var require_client = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/client.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/command.js
var require_command = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/command.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/credentials.js
var require_credentials = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/credentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/crypto.js
var require_crypto = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/crypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/dns.js
var require_dns = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/dns.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HostAddressType = void 0;
    var HostAddressType;
    (function(HostAddressType2) {
      HostAddressType2["AAAA"] = "AAAA";
      HostAddressType2["A"] = "A";
    })(HostAddressType = exports.HostAddressType || (exports.HostAddressType = {}));
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/endpoint.js
var require_endpoint = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/endpoint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EndpointURLScheme = void 0;
    var EndpointURLScheme;
    (function(EndpointURLScheme2) {
      EndpointURLScheme2["HTTP"] = "http";
      EndpointURLScheme2["HTTPS"] = "https";
    })(EndpointURLScheme = exports.EndpointURLScheme || (exports.EndpointURLScheme = {}));
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/eventStream.js
var require_eventStream = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/eventStream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/http.js
var require_http = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/http.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/identity/AnonymousIdentity.js
var require_AnonymousIdentity = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/identity/AnonymousIdentity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/identity/AwsCredentialIdentity.js
var require_AwsCredentialIdentity = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/identity/AwsCredentialIdentity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/identity/Identity.js
var require_Identity = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/identity/Identity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/identity/LoginIdentity.js
var require_LoginIdentity = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/identity/LoginIdentity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/identity/TokenIdentity.js
var require_TokenIdentity = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/identity/TokenIdentity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/identity/index.js
var require_identity = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/identity/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AnonymousIdentity(), exports);
    tslib_1.__exportStar(require_AwsCredentialIdentity(), exports);
    tslib_1.__exportStar(require_Identity(), exports);
    tslib_1.__exportStar(require_LoginIdentity(), exports);
    tslib_1.__exportStar(require_TokenIdentity(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/logger.js
var require_logger = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/logger.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/middleware.js
var require_middleware = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/middleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/pagination.js
var require_pagination = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/pagination.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/profile.js
var require_profile = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/profile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/request.js
var require_request = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/request.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/response.js
var require_response = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/response.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/retry.js
var require_retry = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/retry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/serde.js
var require_serde = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/serde.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/shapes.js
var require_shapes = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/shapes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/signature.js
var require_signature = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/signature.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/stream.js
var require_stream = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/stream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/token.js
var require_token = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/token.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/transfer.js
var require_transfer = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/transfer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/util.js
var require_util = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/waiter.js
var require_waiter = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/waiter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/index.js
var require_dist_cjs = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_abort(), exports);
    tslib_1.__exportStar(require_auth(), exports);
    tslib_1.__exportStar(require_checksum(), exports);
    tslib_1.__exportStar(require_client(), exports);
    tslib_1.__exportStar(require_command(), exports);
    tslib_1.__exportStar(require_credentials(), exports);
    tslib_1.__exportStar(require_crypto(), exports);
    tslib_1.__exportStar(require_dns(), exports);
    tslib_1.__exportStar(require_endpoint(), exports);
    tslib_1.__exportStar(require_eventStream(), exports);
    tslib_1.__exportStar(require_http(), exports);
    tslib_1.__exportStar(require_identity(), exports);
    tslib_1.__exportStar(require_logger(), exports);
    tslib_1.__exportStar(require_middleware(), exports);
    tslib_1.__exportStar(require_pagination(), exports);
    tslib_1.__exportStar(require_profile(), exports);
    tslib_1.__exportStar(require_request(), exports);
    tslib_1.__exportStar(require_response(), exports);
    tslib_1.__exportStar(require_retry(), exports);
    tslib_1.__exportStar(require_serde(), exports);
    tslib_1.__exportStar(require_shapes(), exports);
    tslib_1.__exportStar(require_signature(), exports);
    tslib_1.__exportStar(require_stream(), exports);
    tslib_1.__exportStar(require_token(), exports);
    tslib_1.__exportStar(require_transfer(), exports);
    tslib_1.__exportStar(require_util(), exports);
    tslib_1.__exportStar(require_waiter(), exports);
  }
});

// src/credentials.ts
var credentials_exports = {};
__export(credentials_exports, {
  useAWSClient: () => useAWSClient,
  useAWSCredentials: () => useAWSCredentials,
  useAWSCredentialsProvider: () => useAWSCredentialsProvider,
  useAWSProvider: () => useAWSProvider,
  useSTSIdentity: () => useSTSIdentity
});
import { fromNodeProviderChain } from "@aws-sdk/credential-providers";
import { GetCallerIdentityCommand, STSClient } from "@aws-sdk/client-sts";
import { SdkProvider } from "sst-aws-cdk/lib/api/aws-auth/sdk-provider.js";
import { StandardRetryStrategy } from "@aws-sdk/middleware-retry";
import stupid from "aws-sdk/lib/maintenance_mode_message.js";
import aws from "aws-sdk";
function useAWSClient(client, force = false) {
  const cache = useClientCache();
  const existing = cache.get(client.name);
  if (existing && !force)
    return existing;
  const [project, credentials] = [useProject(), useAWSCredentialsProvider()];
  const printNoInternet = (() => {
    let lastPrinted = 0;
    return () => {
      const now = Date.now();
      if (now - lastPrinted > 5e3) {
        console.log("Waiting for internet connection...");
        lastPrinted = now;
      }
    };
  })();
  const result = new client({
    region: project.config.region,
    credentials,
    retryStrategy: new StandardRetryStrategy(async () => 1e4, {
      retryDecider: (e) => {
        if (e.code === "ENOTFOUND") {
          printNoInternet();
          return true;
        }
        if ([
          "ThrottlingException",
          "Throttling",
          "TooManyRequestsException",
          "OperationAbortedException",
          "TimeoutError",
          "NetworkingError"
        ].includes(e.name)) {
          Logger.debug("Retry AWS call", e.name, e.message);
          return true;
        }
        return false;
      },
      delayDecider: (_, attempts) => {
        return Math.min(1.5 ** attempts * 100, 5e3);
      },
      retryQuota: {
        hasRetryTokens: () => true,
        releaseRetryTokens: () => {
        },
        retrieveRetryTokens: () => 1
      }
    })
  });
  cache.set(client.name, result);
  Logger.debug("Created AWS client", client.name);
  return result;
}
var import_types, useAWSCredentialsProvider, useAWSCredentials, useSTSIdentity, useClientCache, CredentialProviderChain, useAWSProvider;
var init_credentials = __esm({
  "src/credentials.ts"() {
    "use strict";
    import_types = __toESM(require_dist_cjs(), 1);
    init_context();
    init_logger();
    init_project();
    useAWSCredentialsProvider = Context.memo(() => {
      const project = useProject();
      Logger.debug("Using AWS profile", project.config.profile);
      const provider = fromNodeProviderChain({
        profile: project.config.profile,
        roleArn: project.config.role,
        mfaCodeProvider: async (serialArn) => {
          const readline = await import("readline");
          const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
          });
          return new Promise((resolve) => {
            Logger.debug(`Require MFA token for serial ARN ${serialArn}`);
            const prompt = () => rl.question(`Enter MFA code for ${serialArn}: `, async (input) => {
              if (input.trim() !== "") {
                resolve(input.trim());
                rl.close();
              } else {
                prompt();
              }
            });
            prompt();
          });
        }
      });
      return provider;
    });
    useAWSCredentials = () => {
      const provider = useAWSCredentialsProvider();
      return provider();
    };
    useSTSIdentity = Context.memo(async () => {
      const sts = useAWSClient(STSClient);
      const identity = await sts.send(new GetCallerIdentityCommand({}));
      Logger.debug(
        "Using identity",
        "Account:",
        identity.Account,
        "User:",
        identity.UserId
      );
      return identity;
    });
    useClientCache = Context.memo(() => /* @__PURE__ */ new Map());
    stupid.suppress = true;
    CredentialProviderChain = aws.CredentialProviderChain;
    useAWSProvider = Context.memo(async () => {
      Logger.debug("Loading v2 AWS SDK");
      const project = useProject();
      const creds = await useAWSCredentials();
      const chain = new CredentialProviderChain([
        () => ({
          ...creds,
          get(cb) {
            cb();
          },
          async getPromise() {
          },
          needsRefresh() {
            return false;
          },
          refresh(cb) {
            cb();
          },
          async refreshPromise() {
          },
          expired: false,
          expireTime: creds.expiration,
          accessKeyId: creds.accessKeyId,
          sessionToken: creds.sessionToken,
          secretAccessKey: creds.secretAccessKey
        })
      ]);
      const provider = new SdkProvider(chain, project.config.region, {
        maxRetries: 1e4,
        region: project.config.region
      });
      return provider;
    });
  }
});

// src/stacks/app-metadata.ts
import {
  S3Client,
  GetObjectCommand,
  PutObjectCommand,
  DeleteObjectCommand
} from "@aws-sdk/client-s3";
async function metadata() {
  Logger.debug("Fetching app metadata");
  const [project, credentials, bootstrap2] = await Promise.all([
    useProject(),
    useAWSCredentials(),
    useBootstrap()
  ]);
  const s3 = new S3Client({
    region: project.config.region,
    credentials
  });
  try {
    const result = await s3.send(
      new GetObjectCommand({
        Key: useS3Key(),
        Bucket: bootstrap2.bucket
      })
    );
    const body = await result.Body.transformToString();
    return JSON.parse(body);
  } catch (ex) {
    Logger.debug("Fetching app metadata: not found");
  }
}
async function saveAppMetadata(data2) {
  Logger.debug("Saving app metadata");
  const [project, credentials, bootstrap2] = await Promise.all([
    useProject(),
    useAWSCredentials(),
    useBootstrap()
  ]);
  const s3 = new S3Client({
    region: project.config.region,
    credentials
  });
  try {
    await s3.send(
      new PutObjectCommand({
        Key: useS3Key(),
        Bucket: bootstrap2.bucket,
        Body: JSON.stringify(data2)
      })
    );
  } catch (ex) {
    Logger.debug("Saving app metadata: not found");
  }
}
async function clearAppMetadata() {
  Logger.debug("Clearing app metadata");
  const [project, credentials, bootstrap2] = await Promise.all([
    useProject(),
    useAWSCredentials(),
    useBootstrap()
  ]);
  const s3 = new S3Client({
    region: project.config.region,
    credentials
  });
  await s3.send(
    new DeleteObjectCommand({
      Key: useS3Key(),
      Bucket: bootstrap2.bucket
    })
  );
}
function useS3Key() {
  const project = useProject();
  return `appMetadata/app.${project.config.name}/stage.${project.config.stage}.json`;
}
var MetadataContext, useAppMetadata;
var init_app_metadata = __esm({
  "src/stacks/app-metadata.ts"() {
    "use strict";
    init_bootstrap();
    init_credentials();
    init_context();
    init_logger();
    init_project();
    MetadataContext = Context.create(async () => {
      const data2 = await metadata();
      return data2;
    });
    useAppMetadata = MetadataContext.use;
  }
});

// src/stacks/assembly.ts
async function loadAssembly(from) {
  const { CloudAssembly } = await import("aws-cdk-lib/cx-api");
  return new CloudAssembly(from);
}
var init_assembly = __esm({
  "src/stacks/assembly.ts"() {
    "use strict";
  }
});

// src/bus.ts
var bus_exports = {};
__export(bus_exports, {
  useBus: () => useBus
});
import crypto from "crypto";
var DO_NOT_LOG, useBus;
var init_bus = __esm({
  "src/bus.ts"() {
    "use strict";
    init_context();
    init_logger();
    DO_NOT_LOG = /* @__PURE__ */ new Set(["stacks.metadata"]);
    useBus = Context.memo(() => {
      const subscriptions = {};
      function subscribers(type) {
        let arr = subscriptions[type];
        if (!arr) {
          arr = [];
          subscriptions[type] = arr;
        }
        return arr;
      }
      const sourceID = crypto.randomBytes(16).toString("hex");
      const result = {
        sourceID,
        publish(type, properties) {
          const payload = {
            type,
            properties,
            sourceID
          };
          if (!DO_NOT_LOG.has(type)) {
            Logger.debug(`Publishing event ${JSON.stringify(payload)}`);
          }
          for (const sub of subscribers(type))
            sub.cb(payload);
        },
        unsubscribe(sub) {
          const arr = subscribers(sub.type);
          const index = arr.indexOf(sub);
          if (index < 0)
            return;
          arr.splice(index, 1);
        },
        subscribe(type, cb) {
          const sub = {
            type,
            cb
          };
          subscribers(type).push(sub);
          return sub;
        },
        forward(..._types) {
          return (type, cb) => {
            return this.subscribe(type, cb);
          };
        }
      };
      return result;
    });
  }
});

// src/stacks/monitor.ts
import {
  CloudFormationClient,
  DescribeStackResourcesCommand,
  DescribeStacksCommand,
  DescribeStackEventsCommand
} from "@aws-sdk/client-cloudformation";
import { map, omitBy, pipe } from "remeda";
function isFinal(input) {
  return STATUSES_SUCCESS.includes(input) || STATUSES_FAILED.includes(input);
}
function isFailed(input) {
  return STATUSES_FAILED.includes(input);
}
function isSuccess(input) {
  return STATUSES_SUCCESS.includes(input);
}
function isPending(input) {
  return STATUSES_PENDING.includes(input);
}
async function monitor(stack) {
  const [cfn, bus] = await Promise.all([
    useAWSClient(CloudFormationClient),
    useBus()
  ]);
  let lastStatus;
  const errors = {};
  let lastEvent;
  while (true) {
    try {
      const [describe, resources, events] = await Promise.all([
        cfn.send(
          new DescribeStacksCommand({
            StackName: stack
          })
        ),
        cfn.send(
          new DescribeStackResourcesCommand({
            StackName: stack
          })
        ),
        cfn.send(
          new DescribeStackEventsCommand({
            StackName: stack
          })
        )
      ]);
      Logger.debug("Stack description", describe);
      if (lastEvent) {
        const eventsReversed = [...events.StackEvents ?? []].reverse();
        for (const event of eventsReversed) {
          if (!event.Timestamp)
            continue;
          if (event.Timestamp.getTime() > lastEvent.getTime()) {
            bus.publish("stack.event", {
              event,
              stackID: stack
            });
            if (event.ResourceStatusReason) {
              if (event.ResourceStatusReason.includes(
                "Resource creation cancelled"
              ) || event.ResourceStatusReason.includes(
                "Resource update cancelled"
              ) || event.ResourceStatusReason.includes(
                "Resource creation Initiated"
              ) || event.ResourceStatusReason.startsWith(
                "The following resource(s) failed to"
              ))
                continue;
              errors[event.LogicalResourceId] = event.ResourceStatusReason;
            }
          }
        }
        Logger.debug("Last event set to", lastEvent);
      }
      lastEvent = events.StackEvents?.at(0)?.Timestamp;
      bus.publish("stack.resources", {
        stackID: stack,
        resources: resources.StackResources
      });
      for (const resource of resources.StackResources || []) {
        if (resource.ResourceStatusReason?.includes(
          "Resource creation cancelled"
        ) || resource.ResourceStatusReason?.includes(
          "Resource update cancelled"
        ) || resource.ResourceStatusReason?.includes(
          "Resource creation Initiated"
        ) || resource.ResourceStatusReason?.startsWith(
          "The following resource(s) failed to"
        ))
          continue;
        if (resource.ResourceStatusReason)
          errors[resource.LogicalResourceId] = resource.ResourceStatusReason;
      }
      const [first] = describe.Stacks || [];
      if (first) {
        if (lastStatus !== first.StackStatus && first.StackStatus) {
          lastStatus = first.StackStatus;
          bus.publish("stack.status", {
            stackID: stack,
            status: first.StackStatus
          });
          Logger.debug(first);
          if (isFinal(first.StackStatus)) {
            return {
              status: first.StackStatus,
              outputs: pipe(
                first.Outputs || [],
                map((o) => [o.OutputKey, o.OutputValue]),
                Object.fromEntries,
                filterOutputs
              ),
              errors: isFailed(first.StackStatus) ? errors : {}
            };
          }
        }
      }
    } catch (ex) {
      if (ex.message.includes("does not exist")) {
        bus.publish("stack.status", {
          stackID: stack,
          status: "DELETE_COMPLETE"
        });
        return {
          status: "DELETE_COMPLETE",
          outputs: {},
          errors: {}
        };
      }
      throw ex;
    }
    await new Promise((resolve) => setTimeout(resolve, 1e3));
  }
}
function filterOutputs(input) {
  return pipe(
    input,
    omitBy((_, key) => {
      return key.startsWith("Export") || key === "SSTMetadata";
    })
  );
}
var STATUSES_PENDING, STATUSES_SUCCESS, STATUSES_FAILED, STATUSES;
var init_monitor = __esm({
  "src/stacks/monitor.ts"() {
    "use strict";
    init_bus();
    init_credentials();
    init_logger();
    STATUSES_PENDING = [
      "CREATE_IN_PROGRESS",
      "DELETE_IN_PROGRESS",
      "REVIEW_IN_PROGRESS",
      "ROLLBACK_IN_PROGRESS",
      "UPDATE_COMPLETE_CLEANUP_IN_PROGRESS",
      "UPDATE_IN_PROGRESS",
      "UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS",
      "UPDATE_ROLLBACK_IN_PROGRESS"
    ];
    STATUSES_SUCCESS = [
      "CREATE_COMPLETE",
      "UPDATE_COMPLETE",
      "DELETE_COMPLETE",
      "SKIPPED"
    ];
    STATUSES_FAILED = [
      "CREATE_FAILED",
      "DELETE_FAILED",
      "ROLLBACK_FAILED",
      "ROLLBACK_COMPLETE",
      "UPDATE_FAILED",
      "UPDATE_ROLLBACK_COMPLETE",
      "UPDATE_ROLLBACK_FAILED",
      "DEPENDENCY_FAILED"
    ];
    STATUSES = [
      ...STATUSES_PENDING,
      ...STATUSES_SUCCESS,
      ...STATUSES_FAILED
    ];
  }
});

// src/cdk/util.ts
async function callWithRetry(cb) {
  try {
    return await cb();
  } catch (e) {
    if (e.code === "ThrottlingException" && e.message === "Rate exceeded" || e.code === "Throttling" && e.message === "Rate exceeded" || e.code === "TooManyRequestsException" && e.message === "Too Many Requests" || e.code === "OperationAbortedException" || e.code === "TimeoutError" || e.code === "NetworkingError") {
      return await callWithRetry(cb);
    }
    throw e;
  }
}
var init_util = __esm({
  "src/cdk/util.ts"() {
    "use strict";
  }
});

// src/cdk/deploy-stack.ts
import * as cxapi from "@aws-cdk/cx-api";
import fs5 from "fs/promises";
import * as uuid from "uuid";
import { addMetadataAssetsToManifest } from "sst-aws-cdk/lib/assets.js";
import { debug, error, print } from "sst-aws-cdk/lib/logging.js";
import { toYAML } from "sst-aws-cdk/lib/serialize.js";
import { AssetManifestBuilder } from "sst-aws-cdk/lib/util/asset-manifest-builder.js";
import { publishAssets } from "sst-aws-cdk/lib/util/asset-publishing.js";
import { contentHash } from "sst-aws-cdk/lib/util/content-hash.js";
import { CfnEvaluationException } from "sst-aws-cdk/lib/api/evaluate-cloudformation-template.js";
import { tryHotswapDeployment } from "sst-aws-cdk/lib/api/hotswap-deployments.js";
import {
  changeSetHasNoChanges,
  CloudFormationStack,
  TemplateParameters,
  waitForChangeSet,
  waitForStackDeploy,
  waitForStackDelete
} from "sst-aws-cdk/lib/api/util/cloudformation.js";
import { blue as blue2 } from "colorette";
async function deployStack(options) {
  const stackArtifact = options.stack;
  const stackEnv = options.resolvedEnvironment;
  options.sdk.appendCustomUserAgent(options.extraUserAgent);
  const cfn = options.sdk.cloudFormation();
  const deployName = options.deployName || stackArtifact.stackName;
  let cloudFormationStack = await callWithRetry(
    () => CloudFormationStack.lookup(cfn, deployName)
  );
  if (cloudFormationStack.stackStatus.isCreationFailure) {
    debug(
      `Found existing stack ${deployName} that had previously failed creation. Deleting it before attempting to re-create it.`
    );
    await cfn.deleteStack({ StackName: deployName }).promise();
    const deletedStack = await waitForStackDelete(cfn, deployName);
    if (deletedStack && deletedStack.stackStatus.name !== "DELETE_COMPLETE") {
      throw new Error(
        `Failed deleting stack ${deployName} that had previously failed creation (current state: ${deletedStack.stackStatus})`
      );
    }
    cloudFormationStack = CloudFormationStack.doesNotExist(cfn, deployName);
  }
  const legacyAssets = new AssetManifestBuilder();
  const assetParams = await addMetadataAssetsToManifest(
    stackArtifact,
    legacyAssets,
    options.toolkitInfo,
    options.reuseAssets
  );
  const finalParameterValues = { ...options.parameters, ...assetParams };
  const templateParams = TemplateParameters.fromTemplate(
    stackArtifact.template
  );
  const stackParams = options.usePreviousParameters ? templateParams.updateExisting(
    finalParameterValues,
    cloudFormationStack.parameters
  ) : templateParams.supplyAll(finalParameterValues);
  if (await canSkipDeploy(
    options,
    cloudFormationStack,
    stackParams.hasChanges(cloudFormationStack.parameters)
  )) {
    debug(`${deployName}: skipping deployment (use --force to override)`);
    if (options.hotswap) {
    }
    return {
      noOp: true,
      outputs: cloudFormationStack.outputs,
      stackArn: cloudFormationStack.stackId
    };
  } else {
    debug(`${deployName}: deploying...`);
  }
  const bodyParameter = await makeBodyParameter(
    stackArtifact,
    options.resolvedEnvironment,
    legacyAssets,
    options.toolkitInfo,
    options.sdk,
    options.overrideTemplate
  );
  await publishAssets(
    legacyAssets.toManifest(stackArtifact.assembly.directory),
    options.sdkProvider,
    stackEnv,
    {
      parallel: options.assetParallelism
    }
  );
  if (options.hotswap) {
    try {
      const hotswapDeploymentResult = await tryHotswapDeployment(
        options.sdkProvider,
        assetParams,
        cloudFormationStack,
        stackArtifact
      );
      if (hotswapDeploymentResult) {
        return hotswapDeploymentResult;
      }
      print(
        "Could not perform a hotswap deployment, as the stack %s contains non-Asset changes",
        stackArtifact.displayName
      );
    } catch (e) {
      if (!(e instanceof CfnEvaluationException)) {
        throw e;
      }
      print(
        "Could not perform a hotswap deployment, because the CloudFormation template could not be resolved: %s",
        e.message
      );
    }
    print("Falling back to doing a full deployment");
    options.sdk.appendCustomUserAgent("cdk-hotswap/fallback");
  }
  const fullDeployment = new FullCloudFormationDeployment(
    options,
    cloudFormationStack,
    stackArtifact,
    stackParams,
    bodyParameter
  );
  return fullDeployment.performDeployment();
}
async function makeBodyParameter(stack, resolvedEnvironment, assetManifest, toolkitInfo, sdk, overrideTemplate) {
  if (stack.stackTemplateAssetObjectUrl && !overrideTemplate) {
    return {
      TemplateURL: restUrlFromManifest(
        stack.stackTemplateAssetObjectUrl,
        resolvedEnvironment,
        sdk
      )
    };
  }
  const templateJson = toYAML(overrideTemplate ?? stack.template);
  if (templateJson.length <= LARGE_TEMPLATE_SIZE_KB * 1024) {
    return { TemplateBody: templateJson };
  }
  if (!toolkitInfo.found) {
    error(
      `The template for stack "${stack.displayName}" is ${Math.round(
        templateJson.length / 1024
      )}KiB. Templates larger than ${LARGE_TEMPLATE_SIZE_KB}KiB must be uploaded to S3.
Run the following command in order to setup an S3 bucket in this environment, and then re-deploy:

`,
      blue2(`	$ cdk bootstrap ${resolvedEnvironment.name}
`)
    );
    throw new Error(
      'Template too large to deploy ("cdk bootstrap" is required)'
    );
  }
  const templateHash = contentHash(templateJson);
  const key = `cdk/${stack.id}/${templateHash}.yml`;
  let templateFile = stack.templateFile;
  if (overrideTemplate) {
    templateFile = `${stack.templateFile}-${templateHash}.yaml`;
    await fs5.writeFile(templateFile, templateJson, { encoding: "utf-8" });
  }
  assetManifest.addFileAsset(
    templateHash,
    {
      path: templateFile
    },
    {
      bucketName: toolkitInfo.bucketName,
      objectKey: key
    }
  );
  const templateURL = `${toolkitInfo.bucketUrl}/${key}`;
  debug("Storing template in S3 at:", templateURL);
  return { TemplateURL: templateURL };
}
async function makeBodyParameterAndUpload(stack, resolvedEnvironment, toolkitInfo, sdkProvider, sdk, overrideTemplate) {
  const forceUploadStack = Object.create(stack, {
    stackTemplateAssetObjectUrl: { value: void 0 }
  });
  const builder = new AssetManifestBuilder();
  const bodyparam = await makeBodyParameter(
    forceUploadStack,
    resolvedEnvironment,
    builder,
    toolkitInfo,
    sdk,
    overrideTemplate
  );
  const manifest = builder.toManifest(stack.assembly.directory);
  await publishAssets(manifest, sdkProvider, resolvedEnvironment, {
    quiet: true
  });
  return bodyparam;
}
async function destroyStack(options) {
  const deployName = options.deployName || options.stack.stackName;
  const cfn = options.sdk.cloudFormation();
  const currentStack = await CloudFormationStack.lookup(cfn, deployName);
  if (!currentStack.exists) {
    return;
  }
  try {
    await cfn.deleteStack({ StackName: deployName, RoleARN: options.roleArn }).promise();
    const destroyedStack = await waitForStackDelete(cfn, deployName);
    if (destroyedStack && destroyedStack.stackStatus.name !== "DELETE_COMPLETE") {
      throw new Error(
        `Failed to destroy ${deployName}: ${destroyedStack.stackStatus}`
      );
    }
  } catch (e) {
    throw new Error(suffixWithErrors(e.message));
  } finally {
  }
}
async function canSkipDeploy(deployStackOptions, cloudFormationStack, parameterChanges) {
  const deployName = deployStackOptions.deployName || deployStackOptions.stack.stackName;
  debug(`${deployName}: checking if we can skip deploy`);
  if (deployStackOptions.force) {
    debug(`${deployName}: forced deployment`);
    return false;
  }
  if (deployStackOptions.deploymentMethod?.method === "change-set" && deployStackOptions.deploymentMethod.execute === false) {
    debug(`${deployName}: --no-execute, always creating change set`);
    return false;
  }
  if (!cloudFormationStack.exists) {
    debug(`${deployName}: no existing stack`);
    return false;
  }
  if (cloudFormationStack.stackStatus.isInProgress) {
    debug(`${deployName}: stack is busy`);
    return false;
  }
  if (JSON.stringify(deployStackOptions.stack.template) !== JSON.stringify(await cloudFormationStack.template())) {
    debug(`${deployName}: template has changed`);
    return false;
  }
  if (!compareTags(cloudFormationStack.tags, deployStackOptions.tags ?? [])) {
    debug(`${deployName}: tags have changed`);
    return false;
  }
  if (!!deployStackOptions.stack.terminationProtection !== !!cloudFormationStack.terminationProtection) {
    debug(`${deployName}: termination protection has been updated`);
    return false;
  }
  if (parameterChanges) {
    if (parameterChanges === "ssm") {
      debug(
        `${deployName}: some parameters come from SSM so we have to assume they may have changed`
      );
    } else {
      debug(`${deployName}: parameters have changed`);
    }
    return false;
  }
  if (cloudFormationStack.stackStatus.isFailure) {
    debug(`${deployName}: stack is in a failure state`);
    return false;
  }
  return true;
}
function compareTags(a, b) {
  if (a.length !== b.length) {
    return false;
  }
  for (const aTag of a) {
    const bTag = b.find((tag) => tag.Key === aTag.Key);
    if (!bTag || bTag.Value !== aTag.Value) {
      return false;
    }
  }
  return true;
}
function restUrlFromManifest(url10, environment, sdk) {
  const doNotUseMarker = "**DONOTUSE**";
  url10 = cxapi.EnvironmentPlaceholders.replace(url10, {
    accountId: environment.account,
    region: environment.region,
    partition: doNotUseMarker
  });
  if (url10.indexOf(doNotUseMarker) > -1) {
    throw new Error(
      "Cannot use '${AWS::Partition}' in the 'stackTemplateAssetObjectUrl' field"
    );
  }
  const s3Url = url10.match(/s3:\/\/([^/]+)\/(.*)$/);
  if (!s3Url) {
    return url10;
  }
  const bucketName = s3Url[1];
  const objectKey = s3Url[2];
  const urlSuffix = sdk.getEndpointSuffix(environment.region);
  return `https://s3.${environment.region}.${urlSuffix}/${bucketName}/${objectKey}`;
}
function suffixWithErrors(msg, errors) {
  return errors && errors.length > 0 ? `${msg}: ${errors.join(", ")}` : msg;
}
var LARGE_TEMPLATE_SIZE_KB, FullCloudFormationDeployment;
var init_deploy_stack = __esm({
  "src/cdk/deploy-stack.ts"() {
    "use strict";
    init_util();
    LARGE_TEMPLATE_SIZE_KB = 50;
    FullCloudFormationDeployment = class {
      constructor(options, cloudFormationStack, stackArtifact, stackParams, bodyParameter) {
        this.options = options;
        this.cloudFormationStack = cloudFormationStack;
        this.stackArtifact = stackArtifact;
        this.stackParams = stackParams;
        this.bodyParameter = bodyParameter;
        this.cfn = options.sdk.cloudFormation();
        this.stackName = options.deployName ?? stackArtifact.stackName;
        this.update = cloudFormationStack.exists && cloudFormationStack.stackStatus.name !== "REVIEW_IN_PROGRESS";
        this.verb = this.update ? "update" : "create";
        this.uuid = uuid.v4();
      }
      cfn;
      stackName;
      update;
      verb;
      uuid;
      async performDeployment() {
        const deploymentMethod = this.options.deploymentMethod ?? {
          method: "change-set"
        };
        if (deploymentMethod.method === "direct" && this.options.resourcesToImport) {
          throw new Error("Importing resources requires a changeset deployment");
        }
        switch (deploymentMethod.method) {
          case "change-set":
            return this.changeSetDeployment(deploymentMethod);
          case "direct":
            return this.directDeployment();
        }
      }
      async changeSetDeployment(deploymentMethod) {
        const changeSetName = deploymentMethod.changeSetName ?? "cdk-deploy-change-set";
        const execute = deploymentMethod.execute ?? true;
        const changeSetDescription = await this.createChangeSet(
          changeSetName,
          execute
        );
        await this.updateTerminationProtection();
        if (changeSetHasNoChanges(changeSetDescription)) {
          debug("No changes are to be performed on %s.", this.stackName);
          if (execute) {
            debug("Deleting empty change set %s", changeSetDescription.ChangeSetId);
            await this.cfn.deleteChangeSet({
              StackName: this.stackName,
              ChangeSetName: changeSetName
            }).promise();
          }
          return {
            noOp: true,
            outputs: this.cloudFormationStack.outputs,
            stackArn: changeSetDescription.StackId
          };
        }
        if (!execute) {
          print(
            "Changeset %s created and waiting in review for manual execution (--no-execute)",
            changeSetDescription.ChangeSetId
          );
          return {
            noOp: false,
            outputs: this.cloudFormationStack.outputs,
            stackArn: changeSetDescription.StackId
          };
        }
        return this.executeChangeSet(changeSetDescription);
      }
      async createChangeSet(changeSetName, willExecute) {
        await this.cleanupOldChangeset(changeSetName);
        debug(
          `Attempting to create ChangeSet with name ${changeSetName} to ${this.verb} stack ${this.stackName}`
        );
        const changeSet = await this.cfn.createChangeSet({
          StackName: this.stackName,
          ChangeSetName: changeSetName,
          ChangeSetType: this.options.resourcesToImport ? "IMPORT" : this.update ? "UPDATE" : "CREATE",
          ResourcesToImport: this.options.resourcesToImport,
          Description: `CDK Changeset for execution ${this.uuid}`,
          ClientToken: `create${this.uuid}`,
          ...this.commonPrepareOptions()
        }).promise();
        debug(
          "Initiated creation of changeset: %s; waiting for it to finish creating...",
          changeSet.Id
        );
        return waitForChangeSet(this.cfn, this.stackName, changeSetName, {
          fetchAll: willExecute
        });
      }
      async executeChangeSet(changeSet) {
        debug(
          "Initiating execution of changeset %s on stack %s",
          changeSet.ChangeSetId,
          this.stackName
        );
        await this.cfn.executeChangeSet({
          StackName: this.stackName,
          ChangeSetName: changeSet.ChangeSetName,
          ClientRequestToken: `exec${this.uuid}`,
          ...this.commonExecuteOptions()
        }).promise();
        debug(
          "Execution of changeset %s on stack %s has started; waiting for the update to complete...",
          changeSet.ChangeSetId,
          this.stackName
        );
        const changeSetLength = (changeSet.Changes ?? []).length + (this.update ? 1 : 0);
        return this.monitorDeployment(changeSet.CreationTime, changeSetLength);
      }
      async cleanupOldChangeset(changeSetName) {
        if (this.cloudFormationStack.exists) {
          debug(
            `Removing existing change set with name ${changeSetName} if it exists`
          );
          await this.cfn.deleteChangeSet({
            StackName: this.stackName,
            ChangeSetName: changeSetName
          }).promise();
        }
      }
      async updateTerminationProtection() {
        const terminationProtection = this.stackArtifact.terminationProtection ?? false;
        if (!!this.cloudFormationStack.terminationProtection !== terminationProtection) {
          debug(
            "Updating termination protection from %s to %s for stack %s",
            this.cloudFormationStack.terminationProtection,
            terminationProtection,
            this.stackName
          );
          await this.cfn.updateTerminationProtection({
            StackName: this.stackName,
            EnableTerminationProtection: terminationProtection
          }).promise();
          debug(
            "Termination protection updated to %s for stack %s",
            terminationProtection,
            this.stackName
          );
        }
      }
      async directDeployment() {
        const startTime = new Date();
        if (this.update) {
          await this.cfn.updateStack({
            StackName: this.stackName,
            ClientRequestToken: `update${this.uuid}`,
            ...this.commonPrepareOptions(),
            ...this.commonExecuteOptions()
          }).promise();
          if (this.options.noMonitor)
            return;
          const ret = await this.monitorDeployment(startTime, void 0);
          await this.updateTerminationProtection();
          return ret;
        } else {
          const terminationProtection = this.stackArtifact.terminationProtection ?? false;
          await this.cfn.createStack({
            StackName: this.stackName,
            ClientRequestToken: `create${this.uuid}`,
            ...terminationProtection ? { EnableTerminationProtection: true } : void 0,
            ...this.commonPrepareOptions(),
            ...this.commonExecuteOptions()
          }).promise();
          if (this.options.noMonitor)
            return;
          return this.monitorDeployment(startTime, void 0);
        }
      }
      async monitorDeployment(startTime, expectedChanges) {
        let finalState = this.cloudFormationStack;
        try {
          const successStack = await waitForStackDeploy(this.cfn, this.stackName);
          if (!successStack) {
            throw new Error(
              "Stack deploy failed (the stack disappeared while we were deploying it)"
            );
          }
          finalState = successStack;
        } catch (e) {
          throw new Error(suffixWithErrors(e.message));
        } finally {
        }
        debug("Stack %s has completed updating", this.stackName);
        return {
          noOp: false,
          outputs: finalState.outputs,
          stackArn: finalState.stackId
        };
      }
      commonPrepareOptions() {
        return {
          Capabilities: [
            "CAPABILITY_IAM",
            "CAPABILITY_NAMED_IAM",
            "CAPABILITY_AUTO_EXPAND"
          ],
          NotificationARNs: this.options.notificationArns,
          Parameters: this.stackParams.apiParameters,
          RoleARN: this.options.roleArn,
          TemplateBody: this.bodyParameter.TemplateBody,
          TemplateURL: this.bodyParameter.TemplateURL,
          Tags: this.options.tags
        };
      }
      commonExecuteOptions() {
        const shouldDisableRollback = this.options.rollback === false;
        return {
          StackName: this.stackName,
          ...shouldDisableRollback ? { DisableRollback: true } : void 0
        };
      }
    };
  }
});

// src/cdk/cloudformation-deployments.ts
var cloudformation_deployments_exports = {};
__export(cloudformation_deployments_exports, {
  CloudFormationDeployments: () => CloudFormationDeployments,
  prepareSdkWithLookupRoleFor: () => prepareSdkWithLookupRoleFor
});
import * as cxapi2 from "@aws-cdk/cx-api";
import { AssetManifest } from "cdk-assets";
import { debug as debug2, warning } from "sst-aws-cdk/lib/logging.js";
import {
  buildAssets,
  publishAssets as publishAssets2
} from "sst-aws-cdk/lib/util/asset-publishing.js";
import { Mode } from "sst-aws-cdk/lib/api/aws-auth/credentials.js";
import {
  loadCurrentTemplateWithNestedStacks,
  loadCurrentTemplate
} from "sst-aws-cdk/lib/api/nested-stack-helpers.js";
import { ToolkitInfo } from "sst-aws-cdk/lib/api/toolkit-info.js";
import {
  CloudFormationStack as CloudFormationStack2
} from "sst-aws-cdk/lib/api/util/cloudformation.js";
import { replaceEnvPlaceholders } from "sst-aws-cdk/lib/api/util/placeholders.js";
async function prepareSdkWithLookupRoleFor(sdkProvider, stack) {
  const resolvedEnvironment = await sdkProvider.resolveEnvironment(
    stack.environment
  );
  const arns = await replaceEnvPlaceholders(
    {
      lookupRoleArn: stack.lookupRole?.arn
    },
    resolvedEnvironment,
    sdkProvider
  );
  const warningMessage = `Could not assume ${arns.lookupRoleArn}, proceeding anyway.`;
  const upgradeMessage = `(To get rid of this warning, please upgrade to bootstrap version >= ${stack.lookupRole?.requiresBootstrapStackVersion})`;
  try {
    const stackSdk = await sdkProvider.forEnvironment(
      resolvedEnvironment,
      Mode.ForReading,
      {
        assumeRoleArn: arns.lookupRoleArn,
        assumeRoleExternalId: stack.lookupRole?.assumeRoleExternalId
      }
    );
    if (stackSdk.didAssumeRole && stack.lookupRole?.bootstrapStackVersionSsmParameter && stack.lookupRole.requiresBootstrapStackVersion) {
      const version2 = await ToolkitInfo.versionFromSsmParameter(
        stackSdk.sdk,
        stack.lookupRole.bootstrapStackVersionSsmParameter
      );
      if (version2 < stack.lookupRole.requiresBootstrapStackVersion) {
        throw new Error(
          `Bootstrap stack version '${stack.lookupRole.requiresBootstrapStackVersion}' is required, found version '${version2}'.`
        );
      }
    } else if (!stackSdk.didAssumeRole && stack.lookupRole?.requiresBootstrapStackVersion) {
      warning(upgradeMessage);
    }
    return { ...stackSdk, resolvedEnvironment };
  } catch (e) {
    debug2(e);
    if (stack.lookupRole && stack.lookupRole.requiresBootstrapStackVersion) {
      warning(warningMessage);
      warning(upgradeMessage);
    }
    throw e;
  }
}
var CloudFormationDeployments;
var init_cloudformation_deployments = __esm({
  "src/cdk/cloudformation-deployments.ts"() {
    "use strict";
    init_deploy_stack();
    init_util();
    CloudFormationDeployments = class {
      sdkProvider;
      constructor(props) {
        this.sdkProvider = props.sdkProvider;
      }
      async readCurrentTemplateWithNestedStacks(rootStackArtifact, retrieveProcessedTemplate = false) {
        const sdk = (await this.prepareSdkWithLookupOrDeployRole(rootStackArtifact)).stackSdk;
        return (await loadCurrentTemplateWithNestedStacks(
          rootStackArtifact,
          sdk,
          retrieveProcessedTemplate
        )).deployedTemplate;
      }
      async readCurrentTemplate(stackArtifact) {
        debug2(`Reading existing template for stack ${stackArtifact.displayName}.`);
        const sdk = (await this.prepareSdkWithLookupOrDeployRole(stackArtifact)).stackSdk;
        return loadCurrentTemplate(stackArtifact, sdk);
      }
      async resourceIdentifierSummaries(stackArtifact, toolkitStackName) {
        debug2(
          `Retrieving template summary for stack ${stackArtifact.displayName}.`
        );
        const { stackSdk, resolvedEnvironment } = await this.prepareSdkFor(
          stackArtifact,
          void 0,
          Mode.ForReading
        );
        const cfn = stackSdk.cloudFormation();
        const toolkitInfo = await ToolkitInfo.lookup(
          resolvedEnvironment,
          stackSdk,
          toolkitStackName
        );
        const cfnParam = await makeBodyParameterAndUpload(
          stackArtifact,
          resolvedEnvironment,
          toolkitInfo,
          this.sdkProvider,
          stackSdk
        );
        const response = await cfn.getTemplateSummary(cfnParam).promise();
        if (!response.ResourceIdentifierSummaries) {
          debug2(
            'GetTemplateSummary API call did not return "ResourceIdentifierSummaries"'
          );
        }
        return response.ResourceIdentifierSummaries ?? [];
      }
      async deployStack(options) {
        let deploymentMethod = options.deploymentMethod;
        if (options.changeSetName || options.execute !== void 0) {
          if (deploymentMethod) {
            throw new Error(
              "You cannot supply both 'deploymentMethod' and 'changeSetName/execute'. Supply one or the other."
            );
          }
          deploymentMethod = {
            method: "change-set",
            changeSetName: options.changeSetName,
            execute: options.execute
          };
        }
        const { stackSdk, resolvedEnvironment, cloudFormationRoleArn } = await this.prepareSdkFor(options.stack, options.roleArn);
        const toolkitInfo = await callWithRetry(
          () => ToolkitInfo.lookup(
            resolvedEnvironment,
            stackSdk,
            options.toolkitStackName
          )
        );
        if (options.resourcesToImport === void 0) {
          await this.publishStackAssets(options.stack, toolkitInfo, {
            buildAssets: options.buildAssets ?? true,
            publishOptions: {
              quiet: options.quiet,
              parallel: options.assetParallelism
            }
          });
        }
        await this.validateBootstrapStackVersion(
          options.stack.stackName,
          options.stack.requiresBootstrapStackVersion,
          options.stack.bootstrapStackVersionSsmParameter,
          toolkitInfo
        );
        return deployStack({
          stack: options.stack,
          noMonitor: true,
          resolvedEnvironment,
          deployName: options.deployName,
          notificationArns: options.notificationArns,
          quiet: options.quiet,
          sdk: stackSdk,
          sdkProvider: this.sdkProvider,
          roleArn: cloudFormationRoleArn,
          reuseAssets: options.reuseAssets,
          toolkitInfo,
          tags: options.tags,
          deploymentMethod,
          force: options.force,
          parameters: options.parameters,
          usePreviousParameters: options.usePreviousParameters,
          progress: options.progress,
          ci: options.ci,
          rollback: options.rollback,
          hotswap: options.hotswap,
          extraUserAgent: options.extraUserAgent,
          resourcesToImport: options.resourcesToImport,
          overrideTemplate: options.overrideTemplate,
          assetParallelism: options.assetParallelism
        });
      }
      async destroyStack(options) {
        const { stackSdk, cloudFormationRoleArn: roleArn } = await this.prepareSdkFor(options.stack, options.roleArn);
        return destroyStack({
          sdk: stackSdk,
          roleArn,
          stack: options.stack,
          deployName: options.deployName,
          quiet: options.quiet,
          ci: options.ci
        });
      }
      async stackExists(options) {
        const { stackSdk } = await this.prepareSdkFor(
          options.stack,
          void 0,
          Mode.ForReading
        );
        const stack = await CloudFormationStack2.lookup(
          stackSdk.cloudFormation(),
          options.deployName ?? options.stack.stackName
        );
        return stack.exists;
      }
      async prepareSdkWithLookupOrDeployRole(stackArtifact) {
        try {
          const result = await prepareSdkWithLookupRoleFor(
            this.sdkProvider,
            stackArtifact
          );
          if (result.didAssumeRole) {
            return {
              resolvedEnvironment: result.resolvedEnvironment,
              stackSdk: result.sdk
            };
          }
        } catch {
        }
        return this.prepareSdkFor(stackArtifact, void 0, Mode.ForReading);
      }
      async prepareSdkFor(stack, roleArn, mode = Mode.ForWriting) {
        if (!stack.environment) {
          throw new Error(
            `The stack ${stack.displayName} does not have an environment`
          );
        }
        const resolvedEnvironment = await this.sdkProvider.resolveEnvironment(
          stack.environment
        );
        const arns = await replaceEnvPlaceholders(
          {
            assumeRoleArn: stack.assumeRoleArn,
            cloudFormationRoleArn: roleArn ?? stack.cloudFormationExecutionRoleArn
          },
          resolvedEnvironment,
          this.sdkProvider
        );
        const stackSdk = await this.sdkProvider.forEnvironment(
          resolvedEnvironment,
          mode,
          {
            assumeRoleArn: arns.assumeRoleArn,
            assumeRoleExternalId: stack.assumeRoleExternalId
          }
        );
        return {
          stackSdk: stackSdk.sdk,
          resolvedEnvironment,
          cloudFormationRoleArn: arns.cloudFormationRoleArn
        };
      }
      async buildStackAssets(options) {
        const { stackSdk, resolvedEnvironment } = await this.prepareSdkFor(
          options.stack,
          options.roleArn
        );
        const toolkitInfo = await ToolkitInfo.lookup(
          resolvedEnvironment,
          stackSdk,
          options.toolkitStackName
        );
        const stackEnv = await this.sdkProvider.resolveEnvironment(
          options.stack.environment
        );
        const assetArtifacts = options.stack.dependencies.filter(
          cxapi2.AssetManifestArtifact.isAssetManifestArtifact
        );
        for (const assetArtifact of assetArtifacts) {
          await this.validateBootstrapStackVersion(
            options.stack.stackName,
            assetArtifact.requiresBootstrapStackVersion,
            assetArtifact.bootstrapStackVersionSsmParameter,
            toolkitInfo
          );
          const manifest = AssetManifest.fromFile(assetArtifact.file);
          await buildAssets(
            manifest,
            this.sdkProvider,
            stackEnv,
            options.buildOptions
          );
        }
      }
      async publishStackAssets(stack, toolkitInfo, options = {}) {
        const stackEnv = await this.sdkProvider.resolveEnvironment(
          stack.environment
        );
        const assetArtifacts = stack.dependencies.filter(
          cxapi2.AssetManifestArtifact.isAssetManifestArtifact
        );
        for (const assetArtifact of assetArtifacts) {
          await this.validateBootstrapStackVersion(
            stack.stackName,
            assetArtifact.requiresBootstrapStackVersion,
            assetArtifact.bootstrapStackVersionSsmParameter,
            toolkitInfo
          );
          const manifest = AssetManifest.fromFile(assetArtifact.file);
          await publishAssets2(manifest, this.sdkProvider, stackEnv, {
            ...options.publishOptions,
            buildAssets: options.buildAssets ?? true
          });
        }
      }
      async validateBootstrapStackVersion(stackName, requiresBootstrapStackVersion, bootstrapStackVersionSsmParameter, toolkitInfo) {
        if (requiresBootstrapStackVersion === void 0) {
          return;
        }
        try {
          await toolkitInfo.validateVersion(
            requiresBootstrapStackVersion,
            bootstrapStackVersionSsmParameter
          );
        } catch (e) {
          throw new Error(`${stackName}: ${e.message}`);
        }
      }
    };
  }
});

// src/cdk/cloudformation-deployments-wrapper.ts
var cloudformation_deployments_wrapper_exports = {};
__export(cloudformation_deployments_wrapper_exports, {
  publishDeployAssets: () => publishDeployAssets
});
import { debug as debug3 } from "sst-aws-cdk/lib/logging.js";
import {
  CloudFormationStack as CloudFormationStack3,
  TemplateParameters as TemplateParameters2,
  waitForStackDelete as waitForStackDelete2
} from "sst-aws-cdk/lib/api/util/cloudformation.js";
import { ToolkitInfo as ToolkitInfo2 } from "sst-aws-cdk/lib/api/toolkit-info.js";
import { addMetadataAssetsToManifest as addMetadataAssetsToManifest2 } from "sst-aws-cdk/lib/assets.js";
import { publishAssets as publishAssets3 } from "sst-aws-cdk/lib/util/asset-publishing.js";
import { AssetManifestBuilder as AssetManifestBuilder2 } from "sst-aws-cdk/lib/util/asset-manifest-builder.js";
async function publishDeployAssets(sdkProvider, options) {
  const {
    deployment,
    toolkitInfo,
    stackSdk,
    resolvedEnvironment,
    cloudFormationRoleArn
  } = await useDeployment().get(sdkProvider, options);
  await deployment.publishStackAssets(options.stack, toolkitInfo, {
    buildAssets: options.buildAssets ?? true,
    publishOptions: {
      quiet: options.quiet,
      parallel: options.assetParallelism
    }
  });
  return deployStack2({
    stack: options.stack,
    noMonitor: true,
    resolvedEnvironment,
    deployName: options.deployName,
    notificationArns: options.notificationArns,
    quiet: options.quiet,
    sdk: stackSdk,
    sdkProvider,
    roleArn: cloudFormationRoleArn,
    reuseAssets: options.reuseAssets,
    toolkitInfo,
    tags: options.tags,
    deploymentMethod: options.deploymentMethod,
    force: options.force,
    parameters: options.parameters,
    usePreviousParameters: options.usePreviousParameters,
    progress: options.progress,
    ci: options.ci,
    rollback: options.rollback,
    hotswap: options.hotswap,
    extraUserAgent: options.extraUserAgent,
    resourcesToImport: options.resourcesToImport,
    overrideTemplate: options.overrideTemplate,
    assetParallelism: options.assetParallelism
  });
}
async function deployStack2(options) {
  const stackArtifact = options.stack;
  const stackEnv = options.resolvedEnvironment;
  options.sdk.appendCustomUserAgent(options.extraUserAgent);
  const cfn = options.sdk.cloudFormation();
  const deployName = options.deployName || stackArtifact.stackName;
  let cloudFormationStack = await CloudFormationStack3.lookup(cfn, deployName);
  if (cloudFormationStack.stackStatus.isCreationFailure) {
    debug3(
      `Found existing stack ${deployName} that had previously failed creation. Deleting it before attempting to re-create it.`
    );
    await cfn.deleteStack({ StackName: deployName }).promise();
    const deletedStack = await waitForStackDelete2(cfn, deployName);
    if (deletedStack && deletedStack.stackStatus.name !== "DELETE_COMPLETE") {
      throw new Error(
        `Failed deleting stack ${deployName} that had previously failed creation (current state: ${deletedStack.stackStatus})`
      );
    }
    cloudFormationStack = CloudFormationStack3.doesNotExist(cfn, deployName);
  }
  const legacyAssets = new AssetManifestBuilder2();
  const assetParams = await addMetadataAssetsToManifest2(
    stackArtifact,
    legacyAssets,
    options.toolkitInfo,
    options.reuseAssets
  );
  const finalParameterValues = { ...options.parameters, ...assetParams };
  const templateParams = TemplateParameters2.fromTemplate(
    stackArtifact.template
  );
  const stackParams = options.usePreviousParameters ? templateParams.updateExisting(
    finalParameterValues,
    cloudFormationStack.parameters
  ) : templateParams.supplyAll(finalParameterValues);
  const bodyParameter = await makeBodyParameter(
    stackArtifact,
    options.resolvedEnvironment,
    legacyAssets,
    options.toolkitInfo,
    options.sdk,
    options.overrideTemplate
  );
  await publishAssets3(
    legacyAssets.toManifest(stackArtifact.assembly.directory),
    options.sdkProvider,
    stackEnv,
    {
      parallel: options.assetParallelism
    }
  );
  return {
    isUpdate: cloudFormationStack.exists && cloudFormationStack.stackStatus.name !== "REVIEW_IN_PROGRESS",
    params: {
      StackName: deployName,
      TemplateBody: bodyParameter.TemplateBody,
      TemplateURL: bodyParameter.TemplateURL,
      Parameters: stackParams.apiParameters,
      Capabilities: [
        "CAPABILITY_IAM",
        "CAPABILITY_NAMED_IAM",
        "CAPABILITY_AUTO_EXPAND"
      ],
      Tags: options.tags
    }
  };
}
var useDeployment;
var init_cloudformation_deployments_wrapper = __esm({
  "src/cdk/cloudformation-deployments-wrapper.ts"() {
    "use strict";
    init_cloudformation_deployments();
    init_deploy_stack();
    init_context();
    useDeployment = Context.memo(() => {
      const state2 = /* @__PURE__ */ new Map();
      return {
        async get(sdkProvider, options) {
          const region = options.stack.environment.region;
          if (!state2.has(region)) {
            const deployment = new CloudFormationDeployments({ sdkProvider });
            const { stackSdk, resolvedEnvironment, cloudFormationRoleArn } = await deployment.prepareSdkFor(options.stack, options.roleArn);
            const toolkitInfo = await ToolkitInfo2.lookup(
              resolvedEnvironment,
              stackSdk,
              options.toolkitStackName
            );
            await deployment.validateBootstrapStackVersion(
              options.stack.stackName,
              options.stack.requiresBootstrapStackVersion,
              options.stack.bootstrapStackVersionSsmParameter,
              toolkitInfo
            );
            state2.set(region, {
              deployment,
              toolkitInfo,
              stackSdk,
              resolvedEnvironment,
              cloudFormationRoleArn
            });
          }
          return state2.get(region);
        }
      };
    });
  }
});

// src/stacks/deploy.ts
async function publishAssets4(stacks) {
  Logger.debug("Publishing assets");
  const provider = await useAWSProvider();
  const { publishDeployAssets: publishDeployAssets2 } = await Promise.resolve().then(() => (init_cloudformation_deployments_wrapper(), cloudformation_deployments_wrapper_exports));
  const results = {};
  for (const stack of stacks) {
    const result = await publishDeployAssets2(provider, {
      stack,
      quiet: false,
      deploymentMethod: {
        method: "direct"
      }
    });
    results[stack.stackName] = result;
  }
  return results;
}
async function deployMany(stacks) {
  if (stacks.length === 0) {
    throw new VisibleError("No stacks to deploy");
  }
  Logger.debug(
    "Deploying stacks",
    stacks.map((s) => s.stackName)
  );
  const { CloudFormationStackArtifact } = await import("aws-cdk-lib/cx-api");
  await useAWSProvider();
  const bus = useBus();
  const complete = /* @__PURE__ */ new Set();
  const todo = new Set(stacks.map((s) => s.id));
  const results = {};
  return new Promise((resolve) => {
    async function trigger() {
      for (const stack of stacks) {
        if (!todo.has(stack.id))
          continue;
        Logger.debug("Checking if", stack.id, "is ready to deploy");
        if (stack.dependencies.some(
          (dep) => dep instanceof CloudFormationStackArtifact && !complete.has(dep.id) && stacks.some((s) => s.id === dep.id)
        ))
          continue;
        deploy(stack).then((result) => {
          results[stack.id] = result;
          complete.add(stack.id);
          if (isFailed(result.status))
            stacks.forEach((s) => {
              if (todo.delete(s.stackName)) {
                complete.add(s.stackName);
                results[s.id] = {
                  status: "DEPENDENCY_FAILED",
                  outputs: {},
                  errors: {}
                };
                bus.publish("stack.status", {
                  stackID: s.id,
                  status: "DEPENDENCY_FAILED"
                });
              }
            });
          if (complete.size === stacks.length) {
            resolve(results);
          }
          trigger();
        });
        todo.delete(stack.id);
      }
    }
    trigger();
  });
}
async function deploy(stack) {
  const bus = useBus();
  Logger.debug("Deploying stack", stack.id);
  const provider = await useAWSProvider();
  const { CloudFormationDeployments: CloudFormationDeployments2 } = await Promise.resolve().then(() => (init_cloudformation_deployments(), cloudformation_deployments_exports));
  const deployment = new CloudFormationDeployments2({
    sdkProvider: provider
  });
  const stackTags = Object.entries(stack.tags ?? {}).map(([Key, Value]) => ({
    Key,
    Value
  }));
  try {
    await addInUseExports(stack);
    const result = await deployment.deployStack({
      stack,
      quiet: true,
      tags: stackTags,
      deploymentMethod: {
        method: "direct"
      }
    });
    if (result?.noOp) {
      bus.publish("stack.status", {
        stackID: stack.stackName,
        status: "SKIPPED"
      });
      return {
        errors: {},
        outputs: filterOutputs(result.outputs),
        status: "SKIPPED"
      };
    }
    bus.publish("stack.updated", {
      stackID: stack.stackName
    });
    return monitor(stack.stackName);
  } catch (ex) {
    Logger.debug("Failed to deploy stack", stack.id, ex);
    if (ex.message === "No updates are to be performed.") {
      return monitor(stack.stackName);
    }
    bus.publish("stack.status", {
      stackID: stack.stackName,
      status: "UPDATE_FAILED"
    });
    return {
      errors: {
        stack: ex.message
      },
      outputs: {},
      status: "UPDATE_FAILED"
    };
  }
}
async function addInUseExports(stack) {
  const oldOutputs = await getCloudFormationStackOutputs(stack);
  if (!oldOutputs)
    return;
  const newTemplate = JSON.parse(await getLocalTemplate(stack));
  const newOutputs = newTemplate.Outputs || {};
  const newExportNames = Object.keys(newOutputs).filter((outputKey) => outputKey.startsWith("ExportsOutput")).filter((outputKey) => newOutputs[outputKey].Export).map((outputKey) => newOutputs[outputKey].Export.Name);
  let isDirty = false;
  await Promise.all(
    oldOutputs.filter((output) => output.OutputKey?.startsWith("ExportsOutput")).filter((output) => output.ExportName).filter((output) => !newExportNames.includes(output.ExportName)).map(async (output) => {
      const imports = await listImports(output.ExportName);
      if (imports.length > 0) {
        Logger.debug(
          `deploy stack: addInUseExports: export ${output.ExportName} used in ${imports.join(", ")}`
        );
        newTemplate.Outputs = newTemplate.Outputs || {};
        newTemplate.Outputs[output.OutputKey] = {
          Description: `Output added by SST b/c exported value still used in ${imports.join(
            ", "
          )}`,
          Value: output.OutputValue,
          Export: {
            Name: output.ExportName
          }
        };
        isDirty = true;
      }
    })
  );
  if (isDirty) {
    await saveLocalTemplate(stack, JSON.stringify(newTemplate, null, 2));
  }
}
async function getCloudFormationStackOutputs(stack) {
  const { CloudFormationClient: CloudFormationClient4, DescribeStacksCommand: DescribeStacksCommand3 } = await import("@aws-sdk/client-cloudformation");
  const client = useAWSClient(CloudFormationClient4);
  try {
    const { Stacks: stacks } = await client.send(
      new DescribeStacksCommand3({
        StackName: stack.id
      })
    );
    if (!stacks || stacks.length === 0)
      return;
    return stacks[0].Outputs || [];
  } catch (e) {
    if (e.name === "ValidationError" && e.message.includes("Stack with id") && e.message.includes("does not exist")) {
      return;
    } else {
      throw e;
    }
  }
}
async function listImports(exportName) {
  const { CloudFormationClient: CloudFormationClient4, ListImportsCommand } = await import("@aws-sdk/client-cloudformation");
  const client = useAWSClient(CloudFormationClient4);
  try {
    const ret = await client.send(
      new ListImportsCommand({
        ExportName: exportName
      })
    );
    return ret.Imports || [];
  } catch (e) {
    if (e.name === "ValidationError" && e.message.includes("is not imported by any stack")) {
      return [];
    }
    throw e;
  }
}
async function getLocalTemplate(stack) {
  const fs18 = await import("fs/promises");
  const fileContent = await fs18.readFile(stack.templateFullPath);
  return fileContent.toString();
}
async function saveLocalTemplate(stack, content) {
  const fs18 = await import("fs/promises");
  await fs18.writeFile(stack.templateFullPath, content);
}
var init_deploy = __esm({
  "src/stacks/deploy.ts"() {
    "use strict";
    init_bus();
    init_credentials();
    init_logger();
    init_monitor();
    init_error();
  }
});

// src/stacks/diff.ts
async function diff(stack, oldTemplate) {
  const { diffTemplate, formatDifferences, TemplateDiff } = await import("@aws-cdk/cloudformation-diff");
  const diff3 = diffTemplate(oldTemplate, stack.template);
  if (diff3.isEmpty) {
    return { count: 0 };
  }
  diff3.iamChanges = { hasChanges: false };
  diff3.securityGroupChanges = { hasChanges: false };
  diff3.awsTemplateFormatVersion = false;
  diff3.transform = false;
  diff3.description = false;
  diff3.parameters = { differenceCount: 0 };
  diff3.metadata = { differenceCount: 0 };
  diff3.mappings = { differenceCount: 0 };
  diff3.conditions = { differenceCount: 0 };
  diff3.unknown = { differenceCount: 0 };
  delete diff3.outputs.diffs?.["SSTMetadata"];
  const output = [];
  const stream = {
    write(chunk) {
      output.push(`   ${chunk}`);
    }
  };
  const pathMap = await buildLogicalToPathMap(stack);
  formatDifferences(stream, diff3, pathMap);
  while (true) {
    if (output[output.length - 1]?.match(/^\s*$/)) {
      output.pop();
    } else {
      break;
    }
  }
  return {
    count: diff3.outputs.differenceCount + diff3.resources.differenceCount,
    diff: output.join("")
  };
}
async function buildLogicalToPathMap(stack) {
  const { ArtifactMetadataEntryType } = await import("@aws-cdk/cloud-assembly-schema");
  const map3 = {};
  for (const md of stack.findMetadataByType(
    ArtifactMetadataEntryType.LOGICAL_ID
  )) {
    map3[md.data] = md.path;
  }
  return map3;
}
var init_diff = __esm({
  "src/stacks/diff.ts"() {
    "use strict";
  }
});

// src/cache.ts
import path5 from "path";
import fs6 from "fs/promises";
var useCache;
var init_cache = __esm({
  "src/cache.ts"() {
    "use strict";
    init_project();
    init_logger();
    init_context();
    useCache = Context.memo(async () => {
      const project = useProject();
      const cache = path5.join(project.paths.out, "cache");
      await fs6.mkdir(cache, {
        recursive: true
      });
      async function write(key, data2) {
        const full = path5.join(cache, key);
        Logger.debug("Writing cache", full, data2.length, "bytes");
        await fs6.writeFile(full, data2);
      }
      async function read(key) {
        const full = path5.join(cache, key);
        try {
          const data2 = await fs6.readFile(full);
          return data2.toString();
        } catch {
          return null;
        }
      }
      return {
        write,
        read
      };
    });
  }
});

// src/stacks/metadata.ts
var metadata_exports = {};
__export(metadata_exports, {
  metadata: () => metadata2,
  useMetadata: () => useMetadata
});
import {
  S3Client as S3Client2,
  GetObjectCommand as GetObjectCommand2,
  ListObjectsV2Command
} from "@aws-sdk/client-s3";
async function metadata2() {
  Logger.debug("Fetching all metadata");
  const project = useProject();
  const [credentials, bootstrap2] = await Promise.all([
    useAWSCredentials(),
    useBootstrap()
  ]);
  const s3 = new S3Client2({
    region: project.config.region,
    credentials
  });
  const key = `stackMetadata/app.${project.config.name}/stage.${project.config.stage}/`;
  const list2 = await s3.send(
    new ListObjectsV2Command({
      Prefix: key,
      Bucket: bootstrap2.bucket
    })
  );
  const result = Object.fromEntries(
    await Promise.all(
      list2.Contents?.map(async (obj) => {
        const stackID = obj.Key?.split("/").pop();
        const result2 = await s3.send(
          new GetObjectCommand2({
            Key: obj.Key,
            Bucket: bootstrap2.bucket
          })
        );
        const body = await result2.Body.transformToString();
        return [stackID, JSON.parse(body)];
      }) || []
    )
  );
  Logger.debug("Fetched metadata from", list2.KeyCount, "stacks");
  return result;
}
var MetadataContext2, useMetadata;
var init_metadata = __esm({
  "src/stacks/metadata.ts"() {
    "use strict";
    init_bootstrap();
    init_credentials();
    init_cache();
    init_context();
    init_bus();
    init_logger();
    init_project();
    MetadataContext2 = Context.create(async () => {
      const bus = useBus();
      const cache = await useCache();
      const data2 = await metadata2();
      bus.publish("stacks.metadata", data2);
      bus.subscribe("stacks.metadata.updated", async () => {
        const data3 = await metadata2();
        await cache.write(`metadata.json`, JSON.stringify(data3));
        bus.publish("stacks.metadata", data3);
        MetadataContext2.provide(Promise.resolve(data3));
      });
      bus.subscribe("stacks.metadata.deleted", async () => {
        const data3 = await metadata2();
        await cache.write(`metadata.json`, JSON.stringify(data3));
        bus.publish("stacks.metadata", data3);
        MetadataContext2.provide(Promise.resolve(data3));
      });
      return data2;
    });
    useMetadata = MetadataContext2.use;
  }
});

// src/watcher.ts
var watcher_exports = {};
__export(watcher_exports, {
  useWatcher: () => useWatcher
});
import chokidar from "chokidar";
import path6 from "path";
var useWatcher;
var init_watcher = __esm({
  "src/watcher.ts"() {
    "use strict";
    init_context();
    init_bus();
    init_project();
    useWatcher = Context.memo(() => {
      const project = useProject();
      const bus = useBus();
      const watcher = chokidar.watch([project.paths.root], {
        persistent: true,
        ignoreInitial: true,
        followSymlinks: false,
        disableGlobbing: false,
        ignored: [
          "**/node_modules/**",
          "**/.build/**",
          "**/.sst/**",
          "**/.git/**",
          "**/debug.log"
        ],
        awaitWriteFinish: {
          pollInterval: 100,
          stabilityThreshold: 20
        }
      });
      watcher.on("change", (file) => {
        bus.publish("file.changed", {
          file,
          relative: path6.relative(project.paths.root, file)
        });
      });
      return {
        subscribe: bus.forward("file.changed")
      };
    });
  }
});

// src/runtime/handlers.ts
import path7 from "path";
import fs7 from "fs/promises";
import { useFunctions } from "../src/constructs/Function.js";
var useRuntimeHandlers, useFunctionBuilder;
var init_handlers = __esm({
  "src/runtime/handlers.ts"() {
    "use strict";
    init_context();
    init_logger();
    init_watcher();
    init_bus();
    init_project();
    useRuntimeHandlers = Context.memo(() => {
      const handlers = [];
      const project = useProject();
      const bus = useBus();
      const pendingBuilds = /* @__PURE__ */ new Map();
      const result = {
        subscribe: bus.forward("function.build.success", "function.build.failed"),
        register: (handler) => {
          handlers.push(handler);
        },
        for: (runtime) => {
          const result2 = handlers.find((x) => x.canHandle(runtime));
          if (!result2)
            throw new Error(`${runtime} runtime is unsupported`);
          return result2;
        },
        async build(functionID, mode) {
          async function task() {
            const func = useFunctions().fromID(functionID);
            if (!func)
              return {
                type: "error",
                errors: [`Function with ID "${functionID}" not found`]
              };
            const handler = result.for(func.runtime);
            const out = path7.join(project.paths.artifacts, functionID);
            await fs7.rm(out, { recursive: true, force: true });
            await fs7.mkdir(out, { recursive: true });
            if (func.hooks?.beforeBuild)
              await func.hooks.beforeBuild(func, out);
            const built = await handler.build({
              functionID,
              out,
              mode,
              props: func
            });
            if (built.type === "error") {
              bus.publish("function.build.failed", {
                functionID,
                errors: built.errors
              });
              return built;
            }
            if (func.copyFiles) {
              await Promise.all(
                func.copyFiles.map(async (entry) => {
                  const fromPath = path7.join(project.paths.root, entry.from);
                  const to = entry.to || entry.from;
                  if (path7.isAbsolute(to))
                    throw new Error(
                      `Copy destination path "${to}" must be relative`
                    );
                  const toPath = path7.join(out, to);
                  if (mode === "deploy")
                    await fs7.cp(fromPath, toPath, {
                      recursive: true
                    });
                  if (mode === "start") {
                    try {
                      const dir = path7.dirname(toPath);
                      await fs7.mkdir(dir, { recursive: true });
                      await fs7.symlink(fromPath, toPath);
                    } catch (ex) {
                      Logger.debug("Failed to symlink", fromPath, toPath, ex);
                    }
                  }
                })
              );
            }
            if (func.hooks?.afterBuild)
              await func.hooks.afterBuild(func, out);
            bus.publish("function.build.success", { functionID });
            return {
              ...built,
              out
            };
          }
          if (pendingBuilds.has(functionID)) {
            Logger.debug("Waiting on pending build", functionID);
            return pendingBuilds.get(functionID);
          }
          const promise = task();
          pendingBuilds.set(functionID, promise);
          Logger.debug("Building function", functionID);
          const r = await promise;
          pendingBuilds.delete(functionID);
          return r;
        }
      };
      return result;
    });
    useFunctionBuilder = Context.memo(() => {
      const artifacts = /* @__PURE__ */ new Map();
      const handlers = useRuntimeHandlers();
      const result = {
        artifact: (functionID) => {
          if (artifacts.has(functionID))
            return artifacts.get(functionID);
          return result.build(functionID);
        },
        build: async (functionID) => {
          const result2 = await handlers.build(functionID, "start");
          if (!result2)
            return;
          if (result2.type === "error")
            return;
          artifacts.set(functionID, result2);
          return artifacts.get(functionID);
        }
      };
      const watcher = useWatcher();
      watcher.subscribe("file.changed", async (evt) => {
        try {
          const functions = useFunctions();
          for (const [functionID, props] of Object.entries(functions.all)) {
            const handler = handlers.for(props.runtime);
            if (!handler?.shouldBuild({
              functionID,
              file: evt.properties.file
            }))
              continue;
            await result.build(functionID);
            Logger.debug("Rebuilt function", functionID);
          }
        } catch {
        }
      });
      return result;
    });
  }
});

// src/runtime/server.ts
var server_exports = {};
__export(server_exports, {
  useRuntimeServer: () => useRuntimeServer,
  useRuntimeServerConfig: () => useRuntimeServerConfig
});
import express from "express";
import https2 from "https";
import getPort from "get-port";
var useRuntimeServerConfig, useRuntimeServer;
var init_server = __esm({
  "src/runtime/server.ts"() {
    "use strict";
    init_context();
    init_bus();
    init_logger();
    init_workers();
    useRuntimeServerConfig = Context.memo(async () => {
      const port = await getPort({
        port: 12557
      });
      return {
        API_VERSION: "2018-06-01",
        port,
        url: `http://localhost:${port}`
      };
    });
    useRuntimeServer = Context.memo(async () => {
      const bus = useBus();
      const app = express();
      const workers = await useRuntimeWorkers();
      const cfg = await useRuntimeServerConfig();
      const workersWaiting = /* @__PURE__ */ new Map();
      const invocationsQueued = /* @__PURE__ */ new Map();
      function next(workerID) {
        const queue = invocationsQueued.get(workerID);
        const value = queue?.shift();
        if (value)
          return value;
        return new Promise((resolve, reject) => {
          workersWaiting.set(workerID, resolve);
        });
      }
      workers.subscribe("worker.exited", async (evt) => {
        const waiting = workersWaiting.get(evt.properties.workerID);
        if (!waiting)
          return;
        workersWaiting.delete(evt.properties.workerID);
      });
      bus.subscribe("function.invoked", async (evt) => {
        const worker = workersWaiting.get(evt.properties.workerID);
        if (worker) {
          workersWaiting.delete(evt.properties.workerID);
          worker(evt.properties);
          return;
        }
        let arr = invocationsQueued.get(evt.properties.workerID);
        if (!arr) {
          arr = [];
          invocationsQueued.set(evt.properties.workerID, arr);
        }
        arr.push(evt.properties);
      });
      app.post(
        `/:workerID/${cfg.API_VERSION}/runtime/init/error`,
        express.json({
          strict: false,
          type: ["application/json", "application/*+json"],
          limit: "10mb"
        }),
        async (req, res) => {
          const worker = workers.fromID(req.params.workerID);
          bus.publish("function.error", {
            requestID: workers.getCurrentRequestID(worker.workerID),
            workerID: worker.workerID,
            functionID: worker.functionID,
            ...req.body
          });
          res.json("ok");
        }
      );
      app.get(
        `/:workerID/${cfg.API_VERSION}/runtime/invocation/next`,
        async (req, res) => {
          Logger.debug(
            "Worker",
            req.params.workerID,
            "is waiting for next invocation"
          );
          const payload = await next(req.params.workerID);
          Logger.debug("Worker", req.params.workerID, "sending next payload");
          res.set({
            "Lambda-Runtime-Aws-Request-Id": payload.context.awsRequestId,
            "Lambda-Runtime-Deadline-Ms": Date.now() + payload.deadline,
            "Lambda-Runtime-Invoked-Function-Arn": payload.context.invokedFunctionArn,
            "Lambda-Runtime-Client-Context": JSON.stringify(
              payload.context.clientContext || null
            ),
            "Lambda-Runtime-Cognito-Identity": JSON.stringify(
              payload.context.identity || null
            ),
            "Lambda-Runtime-Log-Group-Name": payload.context.logGroupName,
            "Lambda-Runtime-Log-Stream-Name": payload.context.logStreamName
          });
          res.json(payload.event);
        }
      );
      app.post(
        `/:workerID/${cfg.API_VERSION}/runtime/invocation/:awsRequestId/response`,
        express.json({
          strict: false,
          type() {
            return true;
          },
          limit: "10mb"
        }),
        (req, res) => {
          Logger.debug("Worker", req.params.workerID, "got response", req.body);
          const worker = workers.fromID(req.params.workerID);
          bus.publish("function.success", {
            workerID: worker.workerID,
            functionID: worker.functionID,
            requestID: req.params.awsRequestId,
            body: req.body
          });
          res.status(202).send();
        }
      );
      app.all(
        `/proxy*`,
        express.raw({
          type: "*/*",
          limit: "1024mb"
        }),
        (req, res) => {
          res.header("Access-Control-Allow-Origin", "*");
          res.header(
            "Access-Control-Allow-Methods",
            "GET, PUT, PATCH, POST, DELETE"
          );
          res.header(
            "Access-Control-Allow-Headers",
            req.header("access-control-request-headers")
          );
          if (req.method === "OPTIONS")
            return res.send();
          const u = new URL(req.url.substring(7));
          const forward = https2.request(
            u,
            {
              headers: {
                ...req.headers,
                host: u.hostname
              },
              method: req.method
            },
            (proxied) => {
              res.status(proxied.statusCode);
              for (const [key, value] of Object.entries(proxied.headers)) {
                res.header(key, value);
              }
              proxied.pipe(res);
            }
          );
          if (req.method !== "GET" && req.method !== "DELETE" && req.method !== "HEAD" && req.body)
            forward.write(req.body);
          forward.end();
          forward.on("error", (e) => {
            console.log(e.message);
          });
        }
      );
      app.post(
        `/:workerID/${cfg.API_VERSION}/runtime/invocation/:awsRequestId/error`,
        express.json({
          strict: false,
          type: ["application/json", "application/*+json"],
          limit: "10mb"
        }),
        (req, res) => {
          const worker = workers.fromID(req.params.workerID);
          bus.publish("function.error", {
            workerID: worker.workerID,
            functionID: worker.functionID,
            errorType: req.body.errorType,
            errorMessage: req.body.errorMessage,
            requestID: req.params.awsRequestId,
            trace: req.body.trace
          });
          res.status(202).send();
        }
      );
      app.listen(cfg.port);
    });
  }
});

// src/runtime/workers.ts
var workers_exports = {};
__export(workers_exports, {
  useRuntimeWorkers: () => useRuntimeWorkers
});
import { useFunctions as useFunctions2 } from "../src/constructs/Function.js";
var useRuntimeWorkers;
var init_workers = __esm({
  "src/runtime/workers.ts"() {
    "use strict";
    init_context();
    init_bus();
    init_handlers();
    init_server();
    useRuntimeWorkers = Context.memo(async () => {
      const workers = /* @__PURE__ */ new Map();
      const bus = useBus();
      const handlers = useRuntimeHandlers();
      const builder = useFunctionBuilder();
      const server = await useRuntimeServerConfig();
      handlers.subscribe("function.build.success", async (evt) => {
        for (const [_, worker] of workers) {
          if (worker.functionID === evt.properties.functionID) {
            const props = useFunctions2().fromID(worker.functionID);
            if (!props)
              return;
            const handler = handlers.for(props.runtime);
            await handler?.stopWorker(worker.workerID);
            bus.publish("worker.stopped", worker);
          }
        }
      });
      const lastRequestId = /* @__PURE__ */ new Map();
      bus.subscribe("function.invoked", async (evt) => {
        bus.publish("function.ack", {
          functionID: evt.properties.functionID,
          workerID: evt.properties.workerID
        });
        lastRequestId.set(evt.properties.workerID, evt.properties.requestID);
        let worker = workers.get(evt.properties.workerID);
        if (worker)
          return;
        const props = useFunctions2().fromID(evt.properties.functionID);
        if (!props)
          return;
        const handler = handlers.for(props.runtime);
        if (!handler)
          return;
        const build2 = await builder.artifact(evt.properties.functionID);
        if (!build2)
          return;
        await handler.startWorker({
          ...build2,
          workerID: evt.properties.workerID,
          environment: evt.properties.env,
          url: `${server.url}/${evt.properties.workerID}/${server.API_VERSION}`
        });
        workers.set(evt.properties.workerID, {
          workerID: evt.properties.workerID,
          functionID: evt.properties.functionID
        });
        bus.publish("worker.started", {
          workerID: evt.properties.workerID,
          functionID: evt.properties.functionID
        });
      });
      return {
        fromID(workerID) {
          return workers.get(workerID);
        },
        getCurrentRequestID(workerID) {
          return lastRequestId.get(workerID);
        },
        stdout(workerID, message) {
          const worker = workers.get(workerID);
          bus.publish("worker.stdout", {
            ...worker,
            message: message.trim(),
            requestID: lastRequestId.get(workerID)
          });
        },
        exited(workerID) {
          const existing = workers.get(workerID);
          if (!existing)
            return;
          workers.delete(workerID);
          lastRequestId.delete(workerID);
          bus.publish("worker.exited", existing);
        },
        subscribe: bus.forward(
          "worker.started",
          "worker.stopped",
          "worker.exited",
          "worker.stdout"
        )
      };
    });
  }
});

// src/util/process.ts
import { exec } from "child_process";
import { promisify } from "util";
var execAsync;
var init_process = __esm({
  "src/util/process.ts"() {
    "use strict";
    execAsync = promisify(exec);
  }
});

// src/runtime/handlers/dotnet.ts
import { spawn } from "child_process";
import url3 from "url";
var FRAMEWORK_MAP, BOOTSTRAP_MAP, useDotnetHandler;
var init_dotnet = __esm({
  "src/runtime/handlers/dotnet.ts"() {
    "use strict";
    init_handlers();
    init_workers();
    init_context();
    init_server();
    init_fs();
    init_project();
    init_process();
    FRAMEWORK_MAP = {
      "dotnetcore1.0": "netcoreapp3.1",
      "dotnetcore2.0": "netcoreapp3.1",
      "dotnetcore2.1": "netcoreapp3.1",
      "dotnetcore3.1": "netcoreapp3.1",
      dotnet6: "net6.0"
    };
    BOOTSTRAP_MAP = {
      "dotnetcore1.0": "dotnet31-bootstrap",
      "dotnetcore2.0": "dotnet31-bootstrap",
      "dotnetcore2.1": "dotnet31-bootstrap",
      "dotnetcore3.1": "dotnet31-bootstrap",
      dotnet6: "dotnet6-bootstrap"
    };
    useDotnetHandler = Context.memo(async () => {
      const workers = await useRuntimeWorkers();
      const server = await useRuntimeServerConfig();
      const handlers = useRuntimeHandlers();
      const processes = /* @__PURE__ */ new Map();
      const sources = /* @__PURE__ */ new Map();
      const handlerName = process.platform === "win32" ? `handler.exe` : `handler`;
      handlers.register({
        shouldBuild: (input) => {
          if (!input.file.endsWith(".cs") && !input.file.endsWith(".fs"))
            return false;
          const parent = sources.get(input.functionID);
          if (!parent)
            return false;
          return isChild(parent, input.file);
        },
        canHandle: (input) => input.startsWith("dotnet"),
        startWorker: async (input) => {
          const name = input.handler.split(":")[0];
          const proc = spawn(
            `dotnet`,
            [
              `exec`,
              url3.fileURLToPath(
                new URL(
                  `../../support/${BOOTSTRAP_MAP["dotnetcore3.1"]}/release/dotnet-bootstrap.dll`,
                  import.meta.url
                )
              ),
              name + ".dll",
              input.handler
            ],
            {
              env: {
                ...process.env,
                ...input.environment,
                IS_LOCAL: "true",
                AWS_LAMBDA_RUNTIME_API: `localhost:${server.port}/${input.workerID}`,
                AWS_LAMBDA_DOTNET_DEBUG_RUN_ONCE: "true"
              },
              cwd: input.out
            }
          );
          proc.on("exit", () => workers.exited(input.workerID));
          proc.stdout.on("data", (data2) => {
            workers.stdout(input.workerID, data2.toString());
          });
          proc.stderr.on("data", (data2) => {
            workers.stdout(input.workerID, data2.toString());
          });
          processes.set(input.workerID, proc);
        },
        stopWorker: async (workerID) => {
          const proc = processes.get(workerID);
          if (proc) {
            proc.kill();
            processes.delete(workerID);
          }
        },
        build: async (input) => {
          const project = useProject();
          const name = input.props.handler.split(":")[0];
          const srcPath = await findBelow(project.paths.root, `${name}.csproj`);
          sources.set(input.functionID, srcPath);
          try {
            await execAsync(
              [
                "dotnet",
                "publish",
                "--output",
                input.out,
                "--configuration",
                "Release",
                "--framework",
                FRAMEWORK_MAP[input.props.runtime],
                "/p:GenerateRuntimeConfigurationFiles=true",
                "/clp:ForceConsoleColor",
                "--self-contained",
                "false",
                "-nologo"
              ].join(" "),
              {
                cwd: srcPath
              }
            );
            return {
              type: "success",
              handler: input.props.handler
            };
          } catch (ex) {
            return {
              type: "error",
              errors: [ex.stderr]
            };
          }
        }
      });
    });
  }
});

// src/runtime/handlers/node.ts
var node_exports = {};
__export(node_exports, {
  useNodeHandler: () => useNodeHandler
});
import path8 from "path";
import fs8 from "fs/promises";
import { exec as exec2 } from "child_process";
import fsSync2 from "fs";
import esbuild2 from "esbuild";
import url4 from "url";
import { Worker } from "worker_threads";
var useNodeHandler;
var init_node = __esm({
  "src/runtime/handlers/node.ts"() {
    "use strict";
    init_project();
    init_handlers();
    init_workers();
    init_context();
    init_error();
    init_colors();
    useNodeHandler = Context.memo(async () => {
      const workers = await useRuntimeWorkers();
      const handlers = useRuntimeHandlers();
      const cache = {};
      const project = useProject();
      const threads = /* @__PURE__ */ new Map();
      handlers.register({
        shouldBuild: (input) => {
          const result = cache[input.functionID];
          if (!result)
            return false;
          const relative = path8.relative(project.paths.root, input.file).split(path8.sep).join(path8.posix.sep);
          return Boolean(result.metafile?.inputs[relative]);
        },
        canHandle: (input) => input.startsWith("nodejs"),
        startWorker: async (input) => {
          new Promise(async () => {
            const worker = new Worker(
              url4.fileURLToPath(
                new URL("../../support/nodejs-runtime/index.mjs", import.meta.url)
              ),
              {
                env: {
                  ...input.environment,
                  IS_LOCAL: "true"
                },
                execArgv: ["--enable-source-maps"],
                workerData: input,
                stderr: true,
                stdin: true,
                stdout: true
              }
            );
            worker.stdout.on("data", (data2) => {
              workers.stdout(input.workerID, data2.toString());
            });
            worker.stderr.on("data", (data2) => {
              workers.stdout(input.workerID, data2.toString());
            });
            worker.on("exit", () => workers.exited(input.workerID));
            threads.set(input.workerID, worker);
          });
        },
        stopWorker: async (workerID) => {
          const worker = threads.get(workerID);
          await worker?.terminate();
        },
        build: async (input) => {
          const exists = cache[input.functionID];
          const parsed = path8.parse(input.props.handler);
          const file = [
            ".ts",
            ".tsx",
            ".mts",
            ".cts",
            ".js",
            ".jsx",
            ".mjs",
            ".cjs"
          ].map((ext) => path8.join(parsed.dir, parsed.name + ext)).find((file2) => {
            return fsSync2.existsSync(file2);
          });
          if (!file)
            return {
              type: "error",
              errors: [`Could not find file for handler "${input.props.handler}"`]
            };
          const nodejs = input.props.nodejs || {};
          const isESM = (nodejs.format || "esm") === "esm";
          const relative = path8.relative(
            project.paths.root,
            path8.resolve(parsed.dir)
          );
          const extension = isESM ? ".mjs" : ".cjs";
          const target = path8.join(
            input.out,
            !relative.startsWith("..") && !path8.isAbsolute(input.props.handler) ? relative : "",
            parsed.name + extension
          );
          const handler = path8.relative(input.out, target.replace(extension, parsed.ext)).split(path8.sep).join(path8.posix.sep);
          if (exists?.rebuild) {
            const result = await exists.rebuild();
            cache[input.functionID] = result;
            return {
              type: "success",
              handler
            };
          }
          const { external, ...override } = nodejs.esbuild || {};
          const forceExternal = [
            "sharp",
            "pg-native",
            ...isESM || input.props.runtime === "nodejs18.x" ? [] : ["aws-sdk"]
          ];
          const options = {
            entryPoints: [file],
            platform: "node",
            external: [
              ...forceExternal,
              ...nodejs.install || [],
              ...external || []
            ],
            loader: nodejs.loader,
            keepNames: true,
            bundle: true,
            logLevel: "silent",
            metafile: true,
            ...isESM ? {
              format: "esm",
              target: "esnext",
              mainFields: ["module", "main"],
              banner: {
                js: [
                  `import { createRequire as topLevelCreateRequire } from 'module';`,
                  `const require = topLevelCreateRequire(import.meta.url);`,
                  `import { fileURLToPath as topLevelFileUrlToPath, URL as topLevelURL } from "url"`,
                  `const __dirname = topLevelFileUrlToPath(new topLevelURL(".", import.meta.url))`,
                  nodejs.banner || ""
                ].join("\n")
              }
            } : {
              format: "cjs",
              target: "node14",
              banner: nodejs.banner ? {
                js: nodejs.banner
              } : void 0
            },
            outfile: target,
            sourcemap: input.mode === "start" ? "linked" : nodejs.sourcemap,
            minify: nodejs.minify,
            ...override
          };
          try {
            const result = await esbuild2.build(options);
            const installPackages = [
              ...nodejs.install || [],
              ...forceExternal.filter((pkg) => pkg !== "aws-sdk").filter((pkg) => !external?.includes(pkg)).filter(
                (pkg) => Object.values(result.metafile?.inputs || {}).some(
                  ({ imports }) => imports.some(({ path: path20 }) => path20 === pkg)
                )
              )
            ];
            const warnings = [];
            Object.entries(result.metafile?.inputs || {}).forEach(
              ([inputPath, { imports }]) => imports.filter(({ path: path20 }) => path20.includes("sst/constructs")).forEach(({ path: path20 }) => {
                warnings.push(
                  `You are importing from "${path20}" in "${inputPath}". Did you mean to import from "sst/node"?`
                );
              })
            );
            async function find2(dir, target2) {
              if (dir === "/")
                throw new VisibleError("Could not find a package.json file");
              if (await fs8.access(path8.join(dir, target2)).then(() => true).catch(() => false))
                return dir;
              return find2(path8.join(dir, ".."), target2);
            }
            if (input.mode === "deploy" && installPackages) {
              const src = await find2(parsed.dir, "package.json");
              const json = JSON.parse(
                await fs8.readFile(path8.join(src, "package.json")).then((x) => x.toString())
              );
              fs8.writeFile(
                path8.join(input.out, "package.json"),
                JSON.stringify({
                  dependencies: Object.fromEntries(
                    installPackages.map((x) => [x, json.dependencies?.[x] || "*"])
                  )
                })
              );
              const cmd = ["npm install"];
              if (installPackages.includes("sharp")) {
                cmd.push(
                  "--platform=linux",
                  input.props.architecture === "arm_64" ? "--arch=arm64" : "--arch=x64"
                );
              }
              await new Promise((resolve) => {
                const process2 = exec2(cmd.join(" "), {
                  cwd: input.out
                });
                process2.on("exit", () => resolve());
              });
            }
            if (input.mode === "start") {
              const dir = path8.join(
                await find2(parsed.dir, "package.json"),
                "node_modules"
              );
              try {
                await fs8.symlink(
                  path8.resolve(dir),
                  path8.resolve(path8.join(input.out, "node_modules")),
                  "dir"
                );
              } catch {
              }
            }
            cache[input.functionID] = result;
            return {
              type: "success",
              handler
            };
          } catch (ex) {
            const result = ex;
            if ("errors" in result) {
              return {
                type: "error",
                errors: result.errors.flatMap((x) => [
                  Colors.bold(x.text),
                  x.location?.file || "",
                  Colors.dim(x.location?.line, "\u2502", x.location?.lineText)
                ])
              };
            }
            return {
              type: "error",
              errors: [ex.toString()]
            };
          }
        }
      });
    });
  }
});

// src/runtime/handlers/go.ts
var go_exports = {};
__export(go_exports, {
  useGoHandler: () => useGoHandler
});
import path9 from "path";
import fs9 from "fs/promises";
import os3 from "os";
import { spawn as spawn2 } from "child_process";
async function find(dir, target) {
  if (dir === "/")
    throw new VisibleError(`Could not find a ${target} file`);
  if (await fs9.access(path9.join(dir, target)).then(() => true).catch(() => false))
    return dir;
  return find(path9.join(dir, ".."), target);
}
var useGoHandler;
var init_go = __esm({
  "src/runtime/handlers/go.ts"() {
    "use strict";
    init_handlers();
    init_workers();
    init_context();
    init_error();
    init_server();
    init_fs();
    init_process();
    useGoHandler = Context.memo(async () => {
      const workers = await useRuntimeWorkers();
      const server = await useRuntimeServerConfig();
      const handlers = useRuntimeHandlers();
      const processes = /* @__PURE__ */ new Map();
      const sources = /* @__PURE__ */ new Map();
      const handlerName = process.platform === "win32" ? `bootstrap.exe` : `bootstrap`;
      handlers.register({
        shouldBuild: (input) => {
          const parent = sources.get(input.functionID);
          if (!parent)
            return false;
          return isChild(parent, input.file);
        },
        canHandle: (input) => input.startsWith("go"),
        startWorker: async (input) => {
          const proc = spawn2(path9.join(input.out, handlerName), {
            env: {
              ...process.env,
              ...input.environment,
              IS_LOCAL: "true",
              AWS_LAMBDA_RUNTIME_API: `localhost:${server.port}/${input.workerID}`
            },
            cwd: input.out
          });
          proc.on("exit", () => workers.exited(input.workerID));
          proc.stdout.on("data", (data2) => {
            workers.stdout(input.workerID, data2.toString());
          });
          proc.stderr.on("data", (data2) => {
            workers.stdout(input.workerID, data2.toString());
          });
          processes.set(input.workerID, proc);
        },
        stopWorker: async (workerID) => {
          const proc = processes.get(workerID);
          if (proc) {
            proc.kill();
            processes.delete(workerID);
          }
        },
        build: async (input) => {
          const parsed = path9.parse(input.props.handler);
          const project = await find(parsed.dir, "go.mod");
          sources.set(input.functionID, project);
          const src = path9.relative(project, input.props.handler);
          if (input.mode === "start") {
            try {
              const target = path9.join(input.out, handlerName);
              const srcPath = os3.platform() === "win32" ? src.replaceAll("\\", "\\\\") : src;
              const result = await execAsync(
                `go build -ldflags "-s -w" -o "${target}" ./${srcPath}`,
                {
                  cwd: project,
                  env: {
                    ...process.env
                  }
                }
              );
            } catch (ex) {
              return {
                type: "error",
                errors: [String(ex)]
              };
            }
          }
          if (input.mode === "deploy") {
            try {
              const target = path9.join(input.out, "bootstrap");
              const srcPath = os3.platform() === "win32" ? src.replaceAll("\\", "\\\\") : src;
              await execAsync(
                `go build -ldflags "-s -w" -o "${target}" ./${srcPath}`,
                {
                  cwd: project,
                  env: {
                    ...process.env,
                    CGO_ENABLED: "0",
                    GOARCH: input.props.architecture === "arm_64" ? "arm64" : "amd64",
                    GOOS: "linux"
                  }
                }
              );
            } catch (ex) {
              return {
                type: "error",
                errors: [String(ex)]
              };
            }
          }
          return {
            type: "success",
            handler: "bootstrap"
          };
        }
      });
    });
  }
});

// src/runtime/handlers/rust.ts
var rust_exports = {};
__export(rust_exports, {
  useRustHandler: () => useRustHandler
});
import path10 from "path";
import fs10 from "fs/promises";
import { exec as exec4, spawn as spawn3 } from "child_process";
import { promisify as promisify2 } from "util";
var execAsync2, useRustHandler;
var init_rust = __esm({
  "src/runtime/handlers/rust.ts"() {
    "use strict";
    init_handlers();
    init_workers();
    init_context();
    init_error();
    init_server();
    init_fs();
    execAsync2 = promisify2(exec4);
    useRustHandler = Context.memo(async () => {
      const workers = await useRuntimeWorkers();
      const server = await useRuntimeServerConfig();
      const handlers = useRuntimeHandlers();
      const processes = /* @__PURE__ */ new Map();
      const sources = /* @__PURE__ */ new Map();
      const handlerName = process.platform === "win32" ? `handler.exe` : `handler`;
      handlers.register({
        shouldBuild: (input) => {
          if (!input.file.endsWith(".rs"))
            return false;
          const parent = sources.get(input.functionID);
          if (!parent)
            return false;
          const result = isChild(parent, input.file);
          return result;
        },
        canHandle: (input) => input.startsWith("rust"),
        startWorker: async (input) => {
          const proc = spawn3(path10.join(input.out, handlerName), {
            env: {
              ...process.env,
              ...input.environment,
              IS_LOCAL: "true",
              RUST_BACKTRACE: "1",
              AWS_LAMBDA_RUNTIME_API: `http://localhost:${server.port}/${input.workerID}`,
              AWS_LAMBDA_FUNCTION_MEMORY_SIZE: "1024"
            },
            cwd: input.out
          });
          proc.on("exit", () => workers.exited(input.workerID));
          proc.stdout.on("data", (data2) => {
            workers.stdout(input.workerID, data2.toString());
          });
          proc.stderr.on("data", (data2) => {
            workers.stdout(input.workerID, data2.toString());
          });
          processes.set(input.workerID, proc);
        },
        stopWorker: async (workerID) => {
          const proc = processes.get(workerID);
          if (proc) {
            proc.kill();
            processes.delete(workerID);
          }
        },
        build: async (input) => {
          const parsed = path10.parse(input.props.handler);
          const project = await findAbove(parsed.dir, "Cargo.toml");
          if (!project)
            return {
              type: "error",
              errors: ["Could not find a Cargo.toml file"]
            };
          sources.set(input.functionID, project);
          if (input.mode === "start") {
            try {
              await execAsync2(`cargo build --bin ${parsed.name}`, {
                cwd: project,
                env: {
                  ...process.env
                }
              });
              await fs10.cp(
                path10.join(project, `target/debug`, parsed.name),
                path10.join(input.out, "handler")
              );
            } catch (ex) {
              throw new VisibleError("Failed to build");
            }
          }
          if (input.mode === "deploy") {
            try {
              await execAsync2(`cargo lambda build --release --bin ${parsed.name}`, {
                cwd: project,
                env: {
                  ...process.env
                }
              });
              await fs10.cp(
                path10.join(project, `target/lambda/`, parsed.name, "bootstrap"),
                path10.join(input.out, "bootstrap")
              );
            } catch (ex) {
              throw new VisibleError("Failed to build");
            }
          }
          return {
            type: "success",
            handler: "handler"
          };
        }
      });
    });
  }
});

// src/runtime/handlers/pythonBundling.ts
import fs11 from "fs";
import url5 from "url";
import path11 from "path";
import {
  DockerImage,
  FileSystem
} from "aws-cdk-lib";
function bundle(options) {
  const { entry, runtime, outputPathSuffix, installCommands } = options;
  const stagedir = FileSystem.mkdtemp("python-bundling-");
  const hasDeps = stageDependencies(entry, stagedir);
  const hasInstallCommands = stageInstallCommands(
    installCommands || [],
    stagedir
  );
  const dockerfile = hasInstallCommands ? "Dockerfile.custom" : hasDeps ? "Dockerfile.dependencies" : "Dockerfile";
  fs11.copyFileSync(
    path11.join(__dirname2, "../../support/python-runtime", dockerfile),
    path11.join(stagedir, dockerfile)
  );
  const image = DockerImage.fromBuild(stagedir, {
    buildArgs: {
      IMAGE: runtime.bundlingImage.image
    },
    file: dockerfile
  });
  const outputPath = path11.join(options.out, outputPathSuffix);
  if (hasDeps || hasInstallCommands) {
    image.cp(`${BUNDLER_DEPENDENCIES_CACHE}/.`, outputPath);
  }
  fs11.cpSync(entry, outputPath, {
    recursive: true
  });
}
function stageDependencies(entry, stagedir) {
  const prefixes = ["Pipfile", "pyproject", "poetry", "requirements.txt"];
  let found = false;
  for (const file of fs11.readdirSync(entry)) {
    for (const prefix of prefixes) {
      if (file.startsWith(prefix)) {
        fs11.copyFileSync(path11.join(entry, file), path11.join(stagedir, file));
        found = true;
      }
    }
  }
  return found;
}
function stageInstallCommands(installCommands, stagedir) {
  let found = false;
  if (installCommands.length > 0) {
    const filePath = path11.join(stagedir, "sst-deps-install-command.sh");
    fs11.writeFileSync(filePath, installCommands.join(" && "));
    fs11.chmodSync(filePath, "755");
    found = true;
  }
  return found;
}
var __dirname2, BUNDLER_DEPENDENCIES_CACHE;
var init_pythonBundling = __esm({
  "src/runtime/handlers/pythonBundling.ts"() {
    "use strict";
    __dirname2 = path11.dirname(url5.fileURLToPath(import.meta.url));
    BUNDLER_DEPENDENCIES_CACHE = "/var/dependencies";
  }
});

// src/runtime/handlers/python.ts
var python_exports = {};
__export(python_exports, {
  usePythonHandler: () => usePythonHandler
});
import path12 from "path";
import { exec as exec5, spawn as spawn4 } from "child_process";
import { promisify as promisify3 } from "util";
import { Runtime } from "aws-cdk-lib/aws-lambda";
import os4 from "os";
import url6 from "url";
var execAsync3, RUNTIME_MAP, usePythonHandler;
var init_python = __esm({
  "src/runtime/handlers/python.ts"() {
    "use strict";
    init_handlers();
    init_workers();
    init_context();
    init_server();
    init_fs();
    init_pythonBundling();
    execAsync3 = promisify3(exec5);
    RUNTIME_MAP = {
      "python2.7": Runtime.PYTHON_2_7,
      "python3.6": Runtime.PYTHON_3_6,
      "python3.7": Runtime.PYTHON_3_7,
      "python3.8": Runtime.PYTHON_3_8,
      "python3.9": Runtime.PYTHON_3_9
    };
    usePythonHandler = Context.memo(async () => {
      const workers = await useRuntimeWorkers();
      const server = await useRuntimeServerConfig();
      const handlers = useRuntimeHandlers();
      const processes = /* @__PURE__ */ new Map();
      const sources = /* @__PURE__ */ new Map();
      async function findSrc(input) {
        const hints = ["requirements.txt", "Pipfile", "poetry.lock"];
        for (const hint of hints) {
          const result = await findAbove(input, hint);
          if (result)
            return result;
        }
      }
      handlers.register({
        shouldBuild: (input) => {
          const parent = sources.get(input.functionID);
          if (!parent)
            return false;
          return isChild(parent, input.file);
        },
        canHandle: (input) => input.startsWith("python"),
        startWorker: async (input) => {
          const src = await findSrc(input.handler);
          if (!src)
            throw new Error(`Could not find src for ${input.handler}`);
          const parsed = path12.parse(path12.relative(src, input.handler));
          const target = [...parsed.dir.split(path12.sep), parsed.name].join(".");
          const proc = spawn4(
            os4.platform() === "win32" ? "python.exe" : "python3",
            [
              "-u",
              url6.fileURLToPath(
                new URL("../../support/python-runtime/runtime.py", import.meta.url)
              ),
              target,
              src,
              parsed.ext.substring(1)
            ],
            {
              env: {
                ...process.env,
                ...input.environment,
                IS_LOCAL: "true",
                AWS_LAMBDA_FUNCTION_MEMORY_SIZE: "1024",
                AWS_LAMBDA_RUNTIME_API: `localhost:${server.port}/${input.workerID}`
              },
              shell: true,
              cwd: src
            }
          );
          proc.on("exit", () => workers.exited(input.workerID));
          proc.stdout.on("data", (data2) => {
            workers.stdout(input.workerID, data2.toString());
          });
          proc.stderr.on("data", (data2) => {
            workers.stdout(input.workerID, data2.toString());
          });
          processes.set(input.workerID, proc);
        },
        stopWorker: async (workerID) => {
          const proc = processes.get(workerID);
          if (proc) {
            proc.kill();
            processes.delete(workerID);
          }
        },
        build: async (input) => {
          if (input.mode === "start")
            return {
              type: "success",
              handler: input.props.handler
            };
          const src = await findSrc(input.props.handler);
          if (!src)
            return {
              type: "error",
              errors: [`Could not find src for ${input.props.handler}`]
            };
          bundle({
            installCommands: input.props.python?.installCommands,
            entry: src,
            runtime: RUNTIME_MAP[input.props.runtime],
            outputPathSuffix: ".",
            out: input.out
          });
          return {
            type: "success",
            handler: path12.relative(src, path12.resolve(input.props.handler)).split(path12.sep).join(path12.posix.sep)
          };
        }
      });
    });
  }
});

// src/runtime/handlers/java.ts
var java_exports = {};
__export(java_exports, {
  useJavaHandler: () => useJavaHandler
});
import path13 from "path";
import fs12 from "fs/promises";
import os5 from "os";
import zipLocal from "zip-local";
import { spawn as spawn5 } from "child_process";
import url7 from "url";
async function getGradleBinary(srcPath) {
  const gradleWrapperPath = path13.resolve(path13.join(srcPath, "gradlew"));
  return await existsAsync(gradleWrapperPath) ? gradleWrapperPath : "gradle";
}
var useJavaHandler;
var init_java = __esm({
  "src/runtime/handlers/java.ts"() {
    "use strict";
    init_handlers();
    init_workers();
    init_context();
    init_server();
    init_fs();
    init_project();
    init_process();
    useJavaHandler = Context.memo(async () => {
      const workers = await useRuntimeWorkers();
      const server = await useRuntimeServerConfig();
      const handlers = useRuntimeHandlers();
      const processes = /* @__PURE__ */ new Map();
      const sources = /* @__PURE__ */ new Map();
      const handlerName = process.platform === "win32" ? `handler.exe` : `handler`;
      handlers.register({
        shouldBuild: (input) => {
          if (!input.file.endsWith(".java"))
            return false;
          const parent = sources.get(input.functionID);
          if (!parent)
            return false;
          return isChild(parent, input.file);
        },
        canHandle: (input) => input.startsWith("java"),
        startWorker: async (input) => {
          const proc = spawn5(
            `java`,
            [
              `-cp`,
              [
                url7.fileURLToPath(
                  new URL("../../support/java-runtime/release/*", import.meta.url)
                )
              ].join(os5.platform() === "win32" ? ";" : ":"),
              "com.amazonaws.services.lambda.runtime.api.client.AWSLambda",
              input.handler
            ],
            {
              env: {
                ...process.env,
                ...input.environment,
                IS_LOCAL: "true",
                AWS_LAMBDA_RUNTIME_API: `localhost:${server.port}/${input.workerID}`
              },
              cwd: input.out
            }
          );
          proc.on("exit", () => workers.exited(input.workerID));
          proc.stdout.on("data", (data2) => {
            workers.stdout(input.workerID, data2.toString());
          });
          proc.stderr.on("data", (data2) => {
            workers.stdout(input.workerID, data2.toString());
          });
          processes.set(input.workerID, proc);
        },
        stopWorker: async (workerID) => {
          const proc = processes.get(workerID);
          if (proc) {
            proc.kill();
            processes.delete(workerID);
          }
        },
        build: async (input) => {
          const project = useProject();
          const srcPath = await findBelow(project.paths.root, "build.gradle");
          const buildBinary = await getGradleBinary(srcPath);
          const buildTask = input.props.java?.buildTask || "build";
          const outputDir = input.props.java?.buildOutputDir || "distributions";
          sources.set(input.functionID, srcPath);
          try {
            await execAsync(
              `${buildBinary} ${buildTask} -Dorg.gradle.logging.level=${process.env.DEBUG ? "debug" : "lifecycle"}`,
              {
                cwd: srcPath
              }
            );
            const buildOutput = path13.join(srcPath, "build", outputDir);
            const zip = (await fs12.readdir(buildOutput)).find(
              (f) => f.endsWith(".zip")
            );
            zipLocal.sync.unzip(path13.join(buildOutput, zip)).save(input.out);
            return {
              type: "success",
              handler: input.props.handler
            };
          } catch (ex) {
            return {
              type: "error",
              errors: [ex.stderr]
            };
          }
        }
      });
    });
  }
});

// src/stacks/synth.ts
import * as contextproviders from "sst-aws-cdk/lib/context-providers/index.js";
import path14 from "path";
async function synth(opts) {
  Logger.debug("Synthesizing stacks...");
  const { App: App2 } = await import("../src/constructs/App.js");
  const { useNodeHandler: useNodeHandler2 } = await Promise.resolve().then(() => (init_node(), node_exports));
  const { useGoHandler: useGoHandler2 } = await Promise.resolve().then(() => (init_go(), go_exports));
  const { useRustHandler: useRustHandler2 } = await Promise.resolve().then(() => (init_rust(), rust_exports));
  const { usePythonHandler: usePythonHandler2 } = await Promise.resolve().then(() => (init_python(), python_exports));
  const { useJavaHandler: useJavaHandler2 } = await Promise.resolve().then(() => (init_java(), java_exports));
  useNodeHandler2();
  useGoHandler2();
  usePythonHandler2();
  useJavaHandler2();
  useDotnetHandler();
  useRustHandler2();
  const { Configuration } = await import("sst-aws-cdk/lib/settings.js");
  const project = useProject();
  const identity = await useSTSIdentity();
  opts = {
    ...opts,
    buildDir: opts.buildDir || path14.join(project.paths.out, "dist")
  };
  const cfg = new Configuration();
  await cfg.load();
  let previous2 = /* @__PURE__ */ new Set();
  while (true) {
    const app = new App2(
      {
        account: identity.Account,
        stage: project.config.stage,
        name: project.config.name,
        region: project.config.region,
        mode: opts.mode,
        debugIncreaseTimeout: opts.increaseTimeout,
        isActiveStack: opts.isActiveStack
      },
      {
        outdir: opts.buildDir,
        context: cfg.context.all
      }
    );
    await opts.fn(app);
    await app.finish();
    const assembly = app.synth();
    Logger.debug(assembly.manifest.missing);
    const { missing } = assembly.manifest;
    const provider = await useAWSProvider();
    if (missing && missing.length) {
      const next = missing.map((x) => x.key);
      if (next.length === previous2.size && next.every((x) => previous2.has(x)))
        throw new VisibleError(formatErrorMessage(next.join("")));
      Logger.debug("Looking up context for:", next, "Previous:", previous2);
      previous2 = new Set(next);
      await contextproviders.provideContextValues(
        missing,
        cfg.context,
        provider
      );
      if (cfg.context.keys.length) {
        await cfg.saveContext();
      }
      continue;
    }
    Logger.debug("Finished synthesizing");
    return assembly;
  }
}
function formatErrorMessage(message) {
  return formatCustomDomainError(message) || `Could not resolve context values for ${message}`;
}
function formatCustomDomainError(message) {
  const ret = message.match(/hosted-zone:account=\d+:domainName=(\S+):/);
  if (!ret) {
    return;
  }
  const hostedZone = ret && ret[1];
  return [
    `It seems you are configuring custom domains for you URL.`,
    hostedZone ? `And SST is not able to find the hosted zone "${hostedZone}" in your AWS Route 53 account.` : `And SST is not able to find the hosted zone in your AWS Route 53 account.`,
    `Please double check and make sure the zone exists, or pass in a different zone.`
  ].join(" ");
}
var init_synth = __esm({
  "src/stacks/synth.ts"() {
    "use strict";
    init_logger();
    init_project();
    init_credentials();
    init_error();
    init_dotnet();
  }
});

// src/stacks/remove.ts
import {
  CloudFormationClient as CloudFormationClient2,
  DeleteStackCommand
} from "@aws-sdk/client-cloudformation";
async function removeMany(stacks) {
  await useAWSProvider();
  const bus = useBus();
  const complete = /* @__PURE__ */ new Set();
  const todo = new Set(stacks.map((s) => s.id));
  const results = {};
  return new Promise((resolve) => {
    async function trigger() {
      for (const stack of stacks) {
        if (!todo.has(stack.id))
          continue;
        Logger.debug("Checking if", stack.id, "can be removed");
        const waiting = stacks.filter((dependant) => {
          if (dependant.id === stack.id)
            return false;
          if (complete.has(dependant.id))
            return false;
          return dependant.dependencies?.some((d) => d.id === stack.id);
        });
        if (waiting.length) {
          Logger.debug(
            "Waiting on",
            waiting.map((s) => s.id)
          );
          continue;
        }
        remove(stack).then((result) => {
          results[stack.id] = result;
          complete.add(stack.id);
          if (isFailed(result.status))
            stacks.forEach((s) => {
              if (todo.delete(s.stackName)) {
                complete.add(s.stackName);
                results[s.id] = {
                  status: "DEPENDENCY_FAILED",
                  outputs: {},
                  errors: {}
                };
                bus.publish("stack.status", {
                  stackID: s.id,
                  status: "DEPENDENCY_FAILED"
                });
              }
            });
          if (complete.size === stacks.length) {
            resolve(results);
          }
          trigger();
        });
        todo.delete(stack.id);
      }
    }
    trigger();
  });
}
async function remove(stack) {
  Logger.debug("Removing stack", stack.id);
  const cfn = useAWSClient(CloudFormationClient2);
  try {
    await cfn.send(
      new DeleteStackCommand({
        StackName: stack.stackName
      })
    );
    return monitor(stack.stackName);
  } catch (ex) {
    return {
      errors: {
        stack: ex.message
      },
      outputs: {},
      status: "UPDATE_FAILED"
    };
  }
}
var init_remove = __esm({
  "src/stacks/remove.ts"() {
    "use strict";
    init_bus();
    init_credentials();
    init_logger();
    init_monitor();
  }
});

// src/stacks/index.ts
var stacks_exports = {};
__export(stacks_exports, {
  STATUSES: () => STATUSES,
  Stacks: () => stacks_exports,
  clearAppMetadata: () => clearAppMetadata,
  deploy: () => deploy,
  deployMany: () => deployMany,
  diff: () => diff,
  filterOutputs: () => filterOutputs,
  isFailed: () => isFailed,
  isFinal: () => isFinal,
  isPending: () => isPending,
  isSuccess: () => isSuccess,
  load: () => load,
  loadAssembly: () => loadAssembly,
  metadata: () => metadata2,
  monitor: () => monitor,
  publishAssets: () => publishAssets4,
  remove: () => remove,
  removeMany: () => removeMany,
  saveAppMetadata: () => saveAppMetadata,
  synth: () => synth,
  useAppMetadata: () => useAppMetadata,
  useMetadata: () => useMetadata
});
var init_stacks = __esm({
  "src/stacks/index.ts"() {
    "use strict";
    init_app_metadata();
    init_assembly();
    init_build();
    init_deploy();
    init_diff();
    init_metadata();
    init_synth();
    init_monitor();
    init_remove();
    init_stacks();
  }
});

// src/bootstrap.ts
var bootstrap_exports = {};
__export(bootstrap_exports, {
  bootstrapSST: () => bootstrapSST,
  useBootstrap: () => useBootstrap
});
import url8 from "url";
import path15 from "path";
import { bold, dim } from "colorette";
import { spawn as spawn6 } from "child_process";
import {
  DescribeStacksCommand as DescribeStacksCommand2,
  CloudFormationClient as CloudFormationClient3
} from "@aws-sdk/client-cloudformation";
import {
  App,
  DefaultStackSynthesizer,
  CfnOutput,
  Duration,
  Tags,
  Stack,
  RemovalPolicy
} from "aws-cdk-lib";
import { Function, Runtime as Runtime2, Code } from "aws-cdk-lib/aws-lambda";
import { SqsEventSource } from "aws-cdk-lib/aws-lambda-event-sources";
import { PolicyStatement } from "aws-cdk-lib/aws-iam";
import { Queue } from "aws-cdk-lib/aws-sqs";
import { Rule } from "aws-cdk-lib/aws-events";
import { SqsQueue } from "aws-cdk-lib/aws-events-targets";
import {
  BlockPublicAccess,
  Bucket,
  BucketEncryption
} from "aws-cdk-lib/aws-s3";
async function loadCDKStatus() {
  const { cdk } = useProject().config;
  const client = useAWSClient(CloudFormationClient3);
  const stackName = cdk?.toolkitStackName || CDK_STACK_NAME;
  try {
    const { Stacks: stacks } = await client.send(
      new DescribeStacksCommand2({ StackName: stackName })
    );
    if (!stacks || stacks.length === 0)
      return false;
    if (!["CREATE_COMPLETE", "UPDATE_COMPLETE"].includes(stacks[0].StackStatus)) {
      return false;
    }
    const output = stacks[0].Outputs?.find(
      (o) => o.OutputKey === "BootstrapVersion"
    );
    if (!output || parseInt(output.OutputValue) < 14)
      return false;
    return true;
  } catch (e) {
    if (e.name === "ValidationError" && e.message === `Stack with id ${stackName} does not exist`) {
      return false;
    } else {
      throw e;
    }
  }
}
async function loadSSTStatus() {
  const { bootstrap: bootstrap2 } = useProject().config;
  const cf = useAWSClient(CloudFormationClient3);
  const stackName = bootstrap2?.stackName || SST_STACK_NAME;
  let result;
  try {
    result = await cf.send(
      new DescribeStacksCommand2({
        StackName: stackName
      })
    );
  } catch (e) {
    if (e.Code === "ValidationError" && e.message === `Stack with id ${stackName} does not exist`) {
      return null;
    }
    throw e;
  }
  let version2, bucket;
  (result.Stacks[0].Outputs || []).forEach((o) => {
    if (o.OutputKey === OUTPUT_VERSION) {
      version2 = o.OutputValue;
    } else if (o.OutputKey === OUTPUT_BUCKET) {
      bucket = o.OutputValue;
    }
  });
  if (!version2 || !bucket) {
    return null;
  }
  return { version: version2, bucket };
}
async function bootstrapSST() {
  const { region, bootstrap: bootstrap2, cdk } = useProject().config;
  const app = new App();
  const stackName = bootstrap2?.stackName || SST_STACK_NAME;
  const stack = new Stack(app, stackName, {
    env: {
      region
    },
    synthesizer: new DefaultStackSynthesizer({
      qualifier: cdk?.qualifier,
      fileAssetsBucketName: cdk?.fileAssetsBucketName
    })
  });
  for (const [key, value] of Object.entries(bootstrap2?.tags || {})) {
    Tags.of(app).add(key, value);
  }
  const bucket = new Bucket(stack, region, {
    encryption: BucketEncryption.S3_MANAGED,
    removalPolicy: RemovalPolicy.DESTROY,
    autoDeleteObjects: true,
    blockPublicAccess: cdk?.publicAccessBlockConfiguration !== false ? BlockPublicAccess.BLOCK_ALL : void 0
  });
  const fn = new Function(stack, "MetadataHandler", {
    code: Code.fromAsset(
      path15.resolve(__dirname3, "support/bootstrap-metadata-function")
    ),
    handler: "index.handler",
    runtime: region?.startsWith("us-gov-") ? Runtime2.NODEJS_16_X : Runtime2.NODEJS_18_X,
    environment: {
      BUCKET_NAME: bucket.bucketName
    },
    initialPolicy: [
      new PolicyStatement({
        actions: ["cloudformation:DescribeStacks"],
        resources: ["*"]
      }),
      new PolicyStatement({
        actions: ["s3:PutObject", "s3:DeleteObject"],
        resources: [bucket.bucketArn + "/*"]
      }),
      new PolicyStatement({
        actions: ["iot:Publish"],
        resources: [
          `arn:${stack.partition}:iot:${stack.region}:${stack.account}:topic//sst/*`
        ]
      })
    ]
  });
  const queue = new Queue(stack, "MetadataQueue", {
    visibilityTimeout: Duration.seconds(30),
    retentionPeriod: Duration.minutes(2)
  });
  fn.addEventSource(new SqsEventSource(queue));
  const rule = new Rule(stack, "MetadataRule", {
    eventPattern: {
      source: ["aws.cloudformation"],
      detailType: ["CloudFormation Stack Status Change"],
      detail: {
        "status-details": {
          status: [
            "CREATE_COMPLETE",
            "UPDATE_COMPLETE",
            "UPDATE_ROLLBACK_COMPLETE",
            "ROLLBACK_COMPLETE",
            "DELETE_COMPLETE"
          ]
        }
      }
    }
  });
  rule.addTarget(
    new SqsQueue(queue, {
      retryAttempts: 10
    })
  );
  new CfnOutput(stack, OUTPUT_VERSION, { value: LATEST_VERSION });
  new CfnOutput(stack, OUTPUT_BUCKET, { value: bucket.bucketName });
  const asm = app.synth();
  const result = await stacks_exports.deploy(asm.stacks[0]);
  if (stacks_exports.isFailed(result.status)) {
    throw new VisibleError(
      `Failed to deploy bootstrap stack:
${JSON.stringify(
        result.errors,
        null,
        4
      )}`
    );
  }
}
async function bootstrapCDK() {
  const identity = await useSTSIdentity();
  const credentials = await useAWSCredentials();
  const { region, profile, cdk } = useProject().config;
  await new Promise((resolve, reject) => {
    const proc = spawn6(
      [
        "npx",
        "cdk",
        "bootstrap",
        `aws://${identity.Account}/${region}`,
        "--no-version-reporting",
        ...cdk?.publicAccessBlockConfiguration === false ? ["--public-access-block-configuration", "false"] : cdk?.publicAccessBlockConfiguration === true ? ["--public-access-block-configuration", "false"] : [],
        ...cdk?.toolkitStackName ? ["--toolkit-stack-name", cdk.toolkitStackName] : [],
        ...cdk?.qualifier ? ["--qualifier", cdk.qualifier] : [],
        ...cdk?.fileAssetsBucketName ? ["--toolkit-bucket-name", cdk.fileAssetsBucketName] : [],
        ...cdk?.customPermissionsBoundary ? ["--custom-permissions-boundary", cdk.customPermissionsBoundary] : []
      ].join(" "),
      {
        env: {
          ...process.env,
          AWS_ACCESS_KEY_ID: credentials.accessKeyId,
          AWS_SECRET_ACCESS_KEY: credentials.secretAccessKey,
          AWS_SESSION_TOKEN: credentials.sessionToken,
          AWS_REGION: region,
          AWS_PROFILE: profile
        },
        stdio: "pipe",
        shell: true
      }
    );
    let stderr = "";
    proc.stdout.on("data", (data2) => {
      Logger.debug(data2.toString());
    });
    proc.stderr.on("data", (data2) => {
      Logger.debug(data2.toString());
      stderr += data2;
    });
    proc.on("exit", (code) => {
      Logger.debug("CDK bootstrap exited with code " + code);
      if (code === 0) {
        resolve();
      } else {
        console.log(bold(dim(stderr)));
        reject(new VisibleError(`Failed to bootstrap`));
      }
    });
  });
}
var CDK_STACK_NAME, SST_STACK_NAME, OUTPUT_VERSION, OUTPUT_BUCKET, LATEST_VERSION, __dirname3, useBootstrap;
var init_bootstrap = __esm({
  "src/bootstrap.ts"() {
    "use strict";
    init_project();
    init_spinner();
    init_context();
    init_credentials();
    init_error();
    init_logger();
    init_stacks();
    CDK_STACK_NAME = "CDKToolkit";
    SST_STACK_NAME = "SSTBootstrap";
    OUTPUT_VERSION = "Version";
    OUTPUT_BUCKET = "BucketName";
    LATEST_VERSION = "7";
    __dirname3 = url8.fileURLToPath(new URL(".", import.meta.url));
    useBootstrap = Context.memo(async () => {
      Logger.debug("Initializing bootstrap context");
      let [cdkStatus, sstStatus] = await Promise.all([
        loadCDKStatus(),
        loadSSTStatus()
      ]);
      Logger.debug("Loaded bootstrap status");
      const needToBootstrapCDK = !cdkStatus;
      const needToBootstrapSST = !sstStatus || sstStatus.version !== LATEST_VERSION;
      if (needToBootstrapCDK || needToBootstrapSST) {
        const spinner = createSpinner(
          "Deploying bootstrap stack, this only needs to happen once"
        ).start();
        if (needToBootstrapCDK) {
          await bootstrapCDK();
        }
        if (needToBootstrapSST) {
          await bootstrapSST();
          sstStatus = await loadSSTStatus();
          if (!sstStatus)
            throw new VisibleError("Failed to load bootstrap stack status");
        }
        spinner.succeed();
      }
      Logger.debug("Bootstrap context initialized", sstStatus);
      return sstStatus;
    }, "Bootstrap");
  }
});

// src/cli/local/router.ts
import * as trpc from "@trpc/server";
var router2;
var init_router = __esm({
  "src/cli/local/router.ts"() {
    "use strict";
    init_project();
    init_bus();
    init_credentials();
    router2 = trpc.router().query("getCredentials", {
      async resolve({ ctx }) {
        const project = useProject();
        const credentials = await useAWSCredentials();
        return {
          region: project.config.region,
          credentials: {
            accessKeyId: credentials.accessKeyId,
            secretAccessKey: credentials.secretAccessKey,
            sessionToken: credentials.sessionToken
          }
        };
      }
    }).query("getState", {
      async resolve({ ctx }) {
        return ctx.state;
      }
    }).mutation("deploy", {
      async resolve() {
        return;
      }
    }).subscription("onStateChange", {
      async resolve({ ctx }) {
        const bus = useBus();
        return new trpc.Subscription((emit) => {
          const sub = bus.subscribe("local.patches", (evt) => {
            emit.data(evt.properties);
          });
          return () => {
            bus.unsubscribe(sub);
          };
        });
      }
    });
  }
});

// src/cli/local/server.ts
var server_exports2 = {};
__export(server_exports2, {
  useLocalServer: () => useLocalServer,
  useLocalServerConfig: () => useLocalServerConfig
});
import { produceWithPatches, enablePatches } from "immer";
import express2 from "express";
import fs13 from "fs/promises";
import { WebSocketServer } from "ws";
import https3 from "https";
import http from "http";
import { applyWSSHandler } from "@trpc/server/adapters/ws/dist/trpc-server-adapters-ws.cjs.js";
import { optimise } from "dendriform-immer-patch-optimiser";
import { sync } from "cross-spawn";
import getPort2 from "get-port";
async function useLocalServer(opts) {
  const cfg = await useLocalServerConfig();
  const project = useProject();
  let state2 = {
    app: project.config.name,
    stage: project.config.stage,
    bootstrap: project.config.bootstrap,
    live: opts.live,
    stacks: {
      status: "idle"
    },
    functions: {}
  };
  const rest = express2();
  rest.all(`/ping`, (req, res) => {
    res.header("Access-Control-Allow-Origin", "*");
    res.header("Access-Control-Allow-Methods", "GET, PUT, PATCH, POST, DELETE");
    res.header(
      "Access-Control-Allow-Headers",
      req.header("access-control-request-headers")
    );
    res.sendStatus(200);
  });
  rest.all(
    `/proxy*`,
    express2.raw({
      type: "*/*",
      limit: "1024mb"
    }),
    (req, res) => {
      res.header("Access-Control-Allow-Origin", "*");
      res.header(
        "Access-Control-Allow-Methods",
        "GET, PUT, PATCH, POST, DELETE"
      );
      res.header(
        "Access-Control-Allow-Headers",
        req.header("access-control-request-headers")
      );
      if (req.method === "OPTIONS")
        return res.send();
      const u = new URL(req.url.substring(7));
      const forward = https3.request(
        u,
        {
          headers: {
            ...req.headers,
            host: u.hostname
          },
          method: req.method
        },
        (proxied) => {
          res.status(proxied.statusCode);
          for (const [key, value] of Object.entries(proxied.headers)) {
            res.header(key, value);
          }
          proxied.pipe(res);
        }
      );
      if (req.method !== "GET" && req.method !== "DELETE" && req.method !== "HEAD" && req.body)
        forward.write(req.body);
      forward.end();
      forward.on("error", (e) => {
        console.log(e.message);
      });
    }
  );
  const server = await (async () => {
    const result2 = sync("mkcert", ["--help"]);
    const KEY_PATH = ".sst/localhost-key.pem";
    const CERT_PATH = ".sst/localhost.pem";
    if (result2.status === 0) {
      try {
        await Promise.all([fs13.access(KEY_PATH), fs13.access(CERT_PATH)]);
      } catch (e) {
        sync("mkcert", ["localhost"], {
          cwd: ".sst"
        });
      }
      const [key, cert] = await Promise.all([
        fs13.readFile(KEY_PATH),
        fs13.readFile(CERT_PATH)
      ]);
      return https3.createServer(
        {
          key,
          cert
        },
        rest
      );
    }
    return http.createServer({}, rest);
  })();
  const wss = new WebSocketServer({ server });
  wss.on("connection", (socket, req) => {
    if (req.headers.origin?.endsWith("localhost:3000"))
      return;
    if (req.headers.origin?.endsWith("localhost:3001"))
      return;
    if (req.headers.origin?.endsWith("console.serverless-stack.com"))
      return;
    if (req.headers.origin?.endsWith("console.sst.dev"))
      return;
    if (req.headers.origin?.endsWith("--sst-console.netlify.app"))
      return;
    console.log("Rejecting unauthorized connection from " + req.headers.origin);
    socket.terminate();
  });
  server.listen(cfg.port);
  const handler = applyWSSHandler({
    wss,
    router: router2,
    createContext() {
      return {
        state: state2
      };
    }
  });
  process.on("SIGTERM", () => {
    handler.broadcastReconnectNotification();
    wss.close();
  });
  const bus = useBus();
  const pending = [];
  function updateState(cb) {
    const [next, patches] = produceWithPatches(state2, cb);
    if (!patches.length)
      return;
    const scheduled = pending.length;
    pending.push(...optimise(state2, patches));
    if (!scheduled)
      setTimeout(() => {
        bus.publish("local.patches", pending);
        pending.splice(0, pending.length);
      }, 0);
    state2 = next;
  }
  function updateFunction(id, cb) {
    return updateState((draft) => {
      let func = draft.functions[id];
      if (!func) {
        func = {
          warm: true,
          state: "idle",
          issues: {},
          invocations: []
        };
        draft.functions[id] = func;
      }
      cb(func);
    });
  }
  bus.subscribe("function.invoked", (evt) => {
    updateFunction(evt.properties.functionID, (draft) => {
      if (draft.invocations.length >= 25)
        draft.invocations.pop();
      draft.invocations.unshift({
        id: evt.properties.context.awsRequestId,
        request: evt.properties.event,
        times: {
          start: Date.now()
        },
        logs: []
      });
    });
  });
  bus.subscribe("worker.stdout", (evt) => {
    updateFunction(evt.properties.functionID, (draft) => {
      const entry = draft.invocations.find(
        (i) => i.id === evt.properties.requestID
      );
      if (!entry)
        return;
      entry.logs.push({
        timestamp: Date.now(),
        message: evt.properties.message
      });
    });
  });
  bus.subscribe("function.success", (evt) => {
    updateFunction(evt.properties.functionID, (draft) => {
      const invocation = draft.invocations.find(
        (x) => x.id === evt.properties.requestID
      );
      if (!invocation)
        return;
      invocation.response = {
        type: "success",
        data: evt.properties.body
      };
      invocation.times.end = Date.now();
    });
  });
  bus.subscribe("function.error", (evt) => {
    updateFunction(evt.properties.functionID, (draft) => {
      const invocation = draft.invocations.find(
        (x) => x.id === evt.properties.requestID
      );
      if (!invocation)
        return;
      invocation.response = {
        type: "failure",
        error: {
          errorMessage: evt.properties.errorMessage,
          stackTrace: evt.properties.trace || []
        }
      };
      invocation.times.end = Date.now();
    });
  });
  const result = {
    updateState,
    updateFunction
  };
  return result;
}
var useLocalServerConfig;
var init_server2 = __esm({
  "src/cli/local/server.ts"() {
    "use strict";
    init_router();
    init_project();
    init_bus();
    init_context();
    enablePatches();
    useLocalServerConfig = Context.memo(async () => {
      const project = useProject();
      const port = await getPort2({
        port: 13557
      });
      return {
        port,
        url: `https://console.sst.dev/${project.config.name}/${project.config.stage}${port !== 13557 ? `?_port=${port}` : ""}`
      };
    });
  }
});

// src/cli/ui/header.ts
var header_exports = {};
__export(header_exports, {
  printConsole: () => printConsole,
  printHeader: () => printHeader
});
async function printHeader(input) {
  const project = useProject();
  Colors.line(
    `${Colors.primary.bold(`SST v${project.version}`)}  ${input.hint ? Colors.dim(`ready!`) : ""}`
  );
  Colors.gap();
  Colors.line(
    `${Colors.primary(`\u279C`)}  ${Colors.bold("App:")}     ${project.config.name}`
  );
  Colors.line(
    `${Colors.primary(` `)}  ${Colors.bold("Stage:")}   ${project.config.stage}`
  );
  if (input.console) {
    const local = await useLocalServerConfig();
    Colors.line(
      `${Colors.primary(` `)}  ${Colors.bold("Console:")} ${Colors.link(
        local.url
      )}`
    );
  }
  Colors.gap();
}
function printConsole() {
}
var init_header = __esm({
  "src/cli/ui/header.ts"() {
    "use strict";
    init_project();
    init_colors();
    init_server2();
  }
});

// src/iot.ts
var iot_exports = {};
__export(iot_exports, {
  useIOT: () => useIOT,
  useIOTEndpoint: () => useIOTEndpoint
});
import { IoTClient, DescribeEndpointCommand } from "@aws-sdk/client-iot";
import iot from "aws-iot-device-sdk";
import { PutObjectCommand as PutObjectCommand2, S3Client as S3Client3 } from "@aws-sdk/client-s3";
var useIOTEndpoint, useIOT;
var init_iot = __esm({
  "src/iot.ts"() {
    "use strict";
    init_context();
    init_credentials();
    init_error();
    init_bus();
    init_project();
    init_logger();
    init_bootstrap();
    useIOTEndpoint = Context.memo(async () => {
      const iot2 = useAWSClient(IoTClient);
      Logger.debug("Getting IoT endpoint");
      const response = await iot2.send(
        new DescribeEndpointCommand({
          endpointType: "iot:Data-ATS"
        })
      );
      Logger.debug("Using IoT endpoint:", response.endpointAddress);
      if (!response.endpointAddress)
        throw new VisibleError("IoT Endpoint address not found");
      return response.endpointAddress;
    });
    useIOT = Context.memo(async () => {
      const bus = useBus();
      const endpoint = await useIOTEndpoint();
      const creds = await useAWSCredentials();
      const project = useProject();
      const bootstrap2 = await useBootstrap();
      const s3 = useAWSClient(S3Client3);
      async function encode(input) {
        const id = Math.random().toString();
        const json = JSON.stringify(input);
        if (json.length > 1024 * 1024 * 3) {
          const key = `pointers/${id}`;
          await s3.send(
            new PutObjectCommand2({
              Bucket: bootstrap2.bucket,
              Key: key,
              Body: json
            })
          );
          return [
            {
              id,
              index: 0,
              count: 1,
              data: JSON.stringify({
                type: "pointer",
                properties: {
                  key,
                  bucket: bootstrap2.bucket
                }
              })
            }
          ];
        }
        const parts = json.match(/.{1,50000}/g);
        if (!parts)
          return [];
        Logger.debug("Encoded iot message into", parts?.length, "parts");
        return parts.map((part, index) => ({
          id,
          index,
          count: parts?.length,
          data: part
        }));
      }
      const device = new iot.device({
        protocol: "wss",
        host: endpoint,
        region: project.config.region,
        accessKeyId: creds.accessKeyId,
        secretKey: creds.secretAccessKey,
        sessionToken: creds.sessionToken,
        reconnectPeriod: 1
      });
      const PREFIX2 = `/sst/${project.config.name}/${project.config.stage}`;
      device.subscribe(`${PREFIX2}/events`, { qos: 1 });
      const fragments = /* @__PURE__ */ new Map();
      device.on("connect", () => {
        Logger.debug("IoT connected");
      });
      device.on("error", (err) => {
        Logger.debug("IoT error", err);
      });
      device.on("close", () => {
        Logger.debug("IoT closed");
      });
      device.on("reconnect", () => {
        Logger.debug("IoT reconnected");
      });
      device.on("message", (_topic, buffer) => {
        const fragment = JSON.parse(buffer.toString());
        if (!fragment.id) {
          bus.publish(fragment.type, fragment.properties);
          return;
        }
        let pending = fragments.get(fragment.id);
        if (!pending) {
          pending = /* @__PURE__ */ new Map();
          fragments.set(fragment.id, pending);
        }
        pending.set(fragment.index, fragment);
        if (pending.size === fragment.count) {
          const data2 = [...pending.values()].sort((a, b) => a.index - b.index).map((item) => item.data).join("");
          fragments.delete(fragment.id);
          const evt = JSON.parse(data2);
          if (evt.sourceID === bus.sourceID)
            return;
          bus.publish(evt.type, evt.properties);
        }
      });
      return {
        prefix: PREFIX2,
        async publish(topic, type, properties) {
          const payload = {
            type,
            properties,
            sourceID: bus.sourceID
          };
          for (const fragment of await encode(payload)) {
            await new Promise((r) => {
              device.publish(
                topic,
                JSON.stringify(fragment),
                {
                  qos: 1
                },
                () => {
                  r();
                }
              );
            });
          }
          Logger.debug("IOT Published", topic, type);
        }
      };
    });
  }
});

// src/runtime/iot.ts
var iot_exports2 = {};
__export(iot_exports2, {
  useIOTBridge: () => useIOTBridge
});
var useIOTBridge;
var init_iot2 = __esm({
  "src/runtime/iot.ts"() {
    "use strict";
    init_context();
    init_bus();
    init_iot();
    useIOTBridge = Context.memo(async () => {
      const bus = useBus();
      const iot2 = await useIOT();
      const topic = `${iot2.prefix}/events`;
      bus.subscribe("function.success", async (evt) => {
        iot2.publish(
          topic + "/" + evt.properties.workerID,
          "function.success",
          evt.properties
        );
      });
      bus.subscribe("function.error", async (evt) => {
        iot2.publish(
          topic + "/" + evt.properties.workerID,
          "function.error",
          evt.properties
        );
      });
      bus.subscribe("function.ack", async (evt) => {
        iot2.publish(
          topic + "/" + evt.properties.workerID,
          "function.ack",
          evt.properties
        );
      });
    });
  }
});

// src/cli/ui/deploy.tsx
var deploy_exports = {};
__export(deploy_exports, {
  DeploymentUI: () => DeploymentUI,
  printDeploymentResults: () => printDeploymentResults
});
import React, { useState, useEffect } from "react";
import { Box, Text } from "ink";
import Spinner from "ink-spinner";
function printDeploymentResults(assembly, results, remove4) {
  const success = Object.entries(results).filter(
    ([_stack, result]) => stacks_exports.isSuccess(result.status)
  );
  if (success.length) {
    Colors.gap();
    Colors.line(
      Colors.success(`\u2714`),
      Colors.bold(remove4 ? ` Removed:` : ` Deployed:`)
    );
    for (const [stack, result] of success) {
      Colors.line(`   ${Colors.dim(stackNameToId(stack))}`);
      for (const key of Object.keys(result.outputs).sort()) {
        const value = result.outputs[key];
        Colors.line(`   ${Colors.bold.dim(key + ":")} ${value}`);
      }
    }
    Colors.gap();
  }
  const failed = Object.entries(results).filter(
    ([_stack, result]) => stacks_exports.isFailed(result.status)
  );
  if (failed.length) {
    Colors.gap();
    Colors.line(`${Colors.danger(`\u2716`)}  ${Colors.bold.dim(`Errors`)}`);
    for (const [stack, result] of failed) {
      Colors.line(
        `   ${Colors.dim(stackNameToId(stack))} ${Colors.dim(result.status)}`
      );
      for (const [id, error2] of Object.entries(result.errors)) {
        const readable = logicalIdToCdkPath(assembly, stack, id) || id;
        Colors.line(`   ${Colors.danger.bold(readable + ":")} ${error2}`);
        const helper = getHelper(error2);
        if (helper) {
          Colors.line(`   ${Colors.warning.bold("\u2B91  Hint:")} ${helper}`);
        }
      }
    }
    Colors.gap();
  }
}
function stackNameToId(stack) {
  const project = useProject();
  const prefix = `${project.config.stage}-${project.config.name}-`;
  return stack.startsWith(prefix) ? stack.substring(prefix.length) : stack;
}
function logicalIdToCdkPath(assembly, stack, logicalId) {
  const found = Object.entries(
    assembly.manifest.artifacts?.[stack]?.metadata || {}
  ).find(
    ([_key, value]) => value[0]?.type === "aws:cdk:logicalId" && value[0]?.data === logicalId
  )?.[0];
  if (!found) {
    return;
  }
  return found.split("/").filter(Boolean).slice(1, -1).join("/");
}
function getHelper(error2) {
  return getApiAccessLogPermissionsHelper(error2) || getAppSyncMultiResolverHelper(error2) || getApiLogRoleHelper(error2);
}
function getApiAccessLogPermissionsHelper(error2) {
  if (error2.indexOf("Insufficient permissions to enable logging") > -1) {
    return `This is a common deploy error. Check out this GitHub issue for more details - https://github.com/serverless-stack/sst/issues/125`;
  }
}
function getAppSyncMultiResolverHelper(error2) {
  if (error2.indexOf(
    "Only one resolver is allowed per field. (Service: AWSAppSync"
  ) > -1) {
    return `This is a common error for deploying AppSync APIs. Check out this GitHub issue for more details - https://github.com/aws/aws-cdk/issues/13269`;
  }
}
function getApiLogRoleHelper(error2) {
  if (error2.indexOf(
    "CloudWatch Logs role ARN must be set in account settings to enable logging (Service: AmazonApiGatewayV2"
  ) > -1) {
    return `This is a common error when configuring Access Log for WebSocket APIs. The AWS API Gateway service in your AWS account does not have permissions to the CloudWatch logs service. Follow this article to create an IAM role for logging to CloudWatch - https://aws.amazon.com/premiumsupport/knowledge-center/api-gateway-cloudwatch-logs/`;
  }
}
var DeploymentUI;
var init_deploy2 = __esm({
  "src/cli/ui/deploy.tsx"() {
    "use strict";
    init_bus();
    init_stacks();
    init_colors();
    init_project();
    DeploymentUI = (props) => {
      const [resources, setResources] = useState({});
      useEffect(() => {
        Colors.gap();
        const bus = useBus();
        const event = bus.subscribe("stack.event", (payload) => {
          const { event: event2 } = payload.properties;
          setResources((previous2) => {
            if (stacks_exports.isFinal(event2.ResourceStatus)) {
              const readable = logicalIdToCdkPath(
                props.assembly,
                event2.StackName,
                event2.LogicalResourceId
              );
              Colors.line(
                Colors.warning(Colors.prefix),
                readable ? Colors.dim(
                  `${stackNameToId(event2.StackName)} ${readable} ${event2.ResourceType}`
                ) : Colors.dim(
                  `${stackNameToId(event2.StackName)} ${event2.ResourceType}`
                ),
                stacks_exports.isFailed(event2.ResourceStatus) ? Colors.danger(event2.ResourceStatus) : Colors.dim(event2.ResourceStatus),
                stacks_exports.isFailed(event2.ResourceStatus) && event2.ResourceStatusReason ? event2.ResourceStatusReason : ""
              );
              const { [event2.LogicalResourceId]: _, ...next } = previous2;
              return next;
            }
            return {
              ...previous2,
              [payload.properties.event.LogicalResourceId]: payload.properties.event
            };
          });
        });
        return () => {
          bus.unsubscribe(event);
        };
      }, []);
      function color(status) {
        if (stacks_exports.isFailed(status))
          return "red";
        if (stacks_exports.isSuccess(status))
          return "green";
        return "yellow";
      }
      return /* @__PURE__ */ React.createElement(Box, { flexDirection: "column" }, Object.entries(resources).slice(0, process.stdout.rows - 2).map(([_, evt], index) => {
        const readable = logicalIdToCdkPath(
          props.assembly,
          evt.StackName,
          evt.LogicalResourceId
        );
        return /* @__PURE__ */ React.createElement(Box, { key: index }, /* @__PURE__ */ React.createElement(Text, null, /* @__PURE__ */ React.createElement(Spinner, null), "  ", readable ? `${stackNameToId(evt.StackName)} ${readable} ${evt.ResourceType}` : `${stackNameToId(evt.StackName)} ${evt.ResourceType}`, " "), /* @__PURE__ */ React.createElement(Text, { color: color(evt.ResourceStatus || "") }, evt.ResourceStatus));
      }), Object.entries(resources).length === 0 && /* @__PURE__ */ React.createElement(Box, null, /* @__PURE__ */ React.createElement(Text, null, /* @__PURE__ */ React.createElement(Spinner, null), "  ", /* @__PURE__ */ React.createElement(Text, { dimColor: true }, props.remove ? "Removing..." : "Deploying..."))));
    };
  }
});

// src/pothos.ts
var pothos_exports = {};
__export(pothos_exports, {
  Pothos: () => pothos_exports,
  extractSchema: () => extractSchema,
  generate: () => generate
});
import babel from "@babel/core";
import generator from "@babel/generator";
import esbuild3 from "esbuild";
import fs14 from "fs/promises";
import path16 from "path";
import url9 from "url";
async function generate(opts) {
  const { printSchema, lexicographicSortSchema } = await import("graphql");
  const contents = await extractSchema(opts);
  const out = path16.join(path16.dirname(opts.schema), "out.mjs");
  await fs14.writeFile(out, contents, "utf8");
  const { schema } = await import(url9.pathToFileURL(out).href + "?bust=" + Date.now());
  await fs14.rm(out);
  const schemaAsString = printSchema(lexicographicSortSchema(schema));
  return schemaAsString;
}
async function extractSchema(opts) {
  const result = await esbuild3.build({
    platform: "node",
    bundle: true,
    format: "esm",
    entryPoints: [opts.schema],
    external: ["@pothos/*"],
    keepNames: true,
    write: false,
    plugins: [
      {
        name: "externalize",
        setup(build2) {
          const filter = /^[^.\/]|^\.[^.\/]|^\.\.[^\/]/;
          build2.onResolve({ filter }, (args) => {
            return {
              path: args.path,
              external: true
            };
          });
        }
      }
    ]
  });
  const globalPaths = /* @__PURE__ */ new Set();
  const transformed = babel.transformSync(result.outputFiles[0].text, {
    sourceType: "module",
    plugins: [
      {
        name: "pothos-extractor",
        visitor: {
          Program(path20) {
            const dummyResolverId = path20.scope.generateUidIdentifier("DUMMY_RESOLVER");
            const resolverNode = dummyResolver({
              dummy_resolver: dummyResolverId
            });
            path20.unshiftContainer("body", resolverNode);
            path20.scope.crawl();
            let schemaBuilder = null;
            path20.traverse({
              ImportDeclaration(declarator) {
                if (!declarator)
                  return;
                if (declarator.node.source.value.startsWith("@pothos"))
                  return;
                declarator.remove();
              },
              VariableDeclarator(declarator) {
                if (schemaBuilder)
                  return;
                const init = declarator.get("init");
                if (init.isNewExpression() && init.get("callee").referencesImport("@pothos/core", "default")) {
                  schemaBuilder = declarator;
                }
              },
              CallExpression(callPath) {
                if (!types.isMemberExpression(callPath.node.callee) || !types.isIdentifier(callPath.node.callee.object) || !types.isIdentifier(callPath.node.callee.property) || !schemaBuilder || callPath.node.callee.object.name !== schemaBuilder.node.id.name && callPath.node.callee.property.name !== "implement") {
                  return;
                }
                callPath.traverse({
                  Property(propertyPath) {
                    if (types.isIdentifier(propertyPath.node.key) && ["resolve", "validate"].includes(
                      propertyPath.node.key.name
                    )) {
                      propertyPath.remove();
                    }
                  }
                });
                if (callPath.node.callee.property.name === "addScalarType" || callPath.node.callee.property.name === "scalarType") {
                  callPath.node.callee.property = types.identifier("scalarType");
                  callPath.node.arguments = [
                    callPath.node.arguments[0],
                    dummyResolverId
                  ];
                }
                const bindings = getBindings(callPath, globalPaths);
                for (const binding of bindings) {
                  globalPaths.add(findRootBinding(binding).node);
                }
                globalPaths.add(findRootBinding(callPath).node);
              },
              ExportDeclaration(exportPath) {
                globalPaths.add(exportPath.node);
              }
            });
          }
        }
      }
    ]
  });
  if (!transformed)
    throw new Error("Could not transform file");
  const contents = generator.default(
    types.program([...globalPaths])
  );
  return contents.code;
}
function getBindings(path20, globalPaths) {
  const bindings = [];
  path20.traverse({
    Expression(expressionPath) {
      if (!expressionPath.isIdentifier())
        return;
      const binding = path20.scope.getBinding(expressionPath);
      if (!binding || globalPaths.has(binding.path) || bindings.includes(binding.path))
        return;
      const rootBinding = findRootBinding(binding.path);
      if (path20 === rootBinding) {
        bindings.push(binding.path);
        return;
      }
      const bindingOfBindings = getBindings(rootBinding, globalPaths);
      bindings.push(...bindingOfBindings, binding.path);
    }
  });
  for (const binding of bindings) {
    globalPaths.add(findRootBinding(binding).node);
  }
  return bindings;
}
function findRootBinding(path20) {
  let rootPath = path20;
  while (rootPath.parentPath?.node !== void 0 && !rootPath.parentPath?.isProgram()) {
    rootPath = rootPath.parentPath;
  }
  return rootPath;
}
var types, template, dummyResolver;
var init_pothos = __esm({
  "src/pothos.ts"() {
    "use strict";
    init_pothos();
    ({ types, template } = babel);
    dummyResolver = template(
      "const %%dummy_resolver%% = { serialize: x => x, parseValue: x => x  };"
    );
  }
});

// src/cli/commands/plugins/pothos.ts
var pothos_exports2 = {};
__export(pothos_exports2, {
  usePothosBuilder: () => usePothosBuilder
});
import fs15 from "fs/promises";
import { exec as exec6 } from "child_process";
import { promisify as promisify4 } from "util";
import path17 from "path";
var execAsync4, usePothosBuilder;
var init_pothos2 = __esm({
  "src/cli/commands/plugins/pothos.ts"() {
    "use strict";
    init_bus();
    init_context();
    init_pothos();
    init_colors();
    execAsync4 = promisify4(exec6);
    usePothosBuilder = Context.memo(() => {
      let routes = [];
      const bus = useBus();
      async function build2(route) {
        try {
          const schema = await pothos_exports.generate({
            schema: route.schema
          });
          await fs15.writeFile(route.output, schema);
          if (Array.isArray(route.commands) && route.commands.length > 0) {
            await Promise.all(route.commands.map((cmd) => execAsync4(cmd)));
          }
          Colors.line(Colors.success(`\u2714`), " Pothos: Extracted pothos schema");
        } catch (ex) {
          Colors.line(Colors.danger(`\u2716`), " Pothos: Failed to extract schema:");
          for (let line of ex.message.split("\n")) {
            console.log(`  `, line);
          }
        }
      }
      bus.subscribe("file.changed", async (evt) => {
        if (evt.properties.file.endsWith("out.mjs"))
          return;
        for (const route of routes) {
          const dir = path17.dirname(route.schema);
          const relative = path17.relative(dir, evt.properties.file);
          if (relative && !relative.startsWith("..") && !path17.isAbsolute(relative))
            build2(route);
        }
      });
      let first = false;
      bus.subscribe("stacks.metadata", async (evt) => {
        routes = Object.values(evt.properties).flat().filter((c) => c.type == "Api").flatMap((c) => c.data.routes).filter((r) => ["pothos", "graphql"].includes(r.type)).filter((r) => r.schema);
        if (first)
          return;
        for (const route of routes) {
          build2(route);
          first = true;
        }
      });
    });
  }
});

// src/cli/commands/plugins/kysely.ts
var kysely_exports = {};
__export(kysely_exports, {
  useKyselyTypeGenerator: () => useKyselyTypeGenerator
});
import { Kysely } from "kysely";
import { DataApiDialect } from "kysely-data-api";
import { RDSData } from "@aws-sdk/client-rds-data";
import * as fs16 from "fs/promises";
import {
  DatabaseMetadata,
  EnumCollection,
  PostgresDialect,
  MysqlDialect,
  Serializer,
  Transformer
} from "kysely-codegen";
var useKyselyTypeGenerator;
var init_kysely = __esm({
  "src/cli/commands/plugins/kysely.ts"() {
    "use strict";
    init_context();
    init_bus();
    init_logger();
    init_credentials();
    useKyselyTypeGenerator = Context.memo(async () => {
      let databases = [];
      const bus = useBus();
      const logger = Logger.debug.bind(null, "[kysely-codegen]");
      async function generate2(db) {
        if (!db.types)
          return;
        logger("generating types for", db.migratorID);
        const k = new Kysely({
          dialect: new DataApiDialect({
            mode: db.engine.includes("postgres") ? "postgres" : "mysql",
            driver: {
              secretArn: db.secretArn,
              resourceArn: db.clusterArn,
              database: db.defaultDatabaseName,
              client: useAWSClient(RDSData)
            }
          })
        });
        const tables = await k.introspection.getTables();
        logger("introspected tables");
        const metadata3 = db.engine.includes("postgres") ? tables.map((table) => ({
          ...table,
          columns: table.columns.map((column) => {
            const isArray = column.dataType.startsWith("_");
            return {
              ...column,
              dataType: isArray ? column.dataType.slice(1) : column.dataType,
              enumValues: null,
              isArray
            };
          })
        })) : tables.map((table) => ({
          ...table,
          columns: table.columns.map((column) => ({
            ...column,
            enumValues: null
          }))
        }));
        logger("generated metadata", metadata3.length);
        const transformer = new Transformer();
        const Dialect = db.engine.includes("postgres") ? new PostgresDialect() : new MysqlDialect();
        const nodes = transformer.transform({
          dialect: Dialect,
          camelCase: db.types.camelCase === true,
          metadata: new DatabaseMetadata(metadata3, new EnumCollection())
        });
        logger("transformed nodes", nodes.length);
        const lastIndex = nodes.length - 1;
        const last2 = nodes[lastIndex];
        nodes[lastIndex] = {
          ...last2,
          argument: {
            ...last2.argument,
            name: "Database"
          }
        };
        const serializer = new Serializer();
        const data2 = serializer.serialize(nodes);
        await fs16.writeFile(db.types.path, data2);
      }
      bus.subscribe("stacks.metadata", (evt) => {
        const constructs = Object.values(evt.properties).flat();
        databases = constructs.filter((c) => c.type === "RDS").filter((c) => c.data.migrator).filter((c) => c.data.types).map((c) => ({
          migratorID: constructs.find(
            (fn) => fn.addr == c.data.migrator?.node
          ).addr,
          clusterArn: c.data.clusterArn,
          types: c.data.types,
          engine: c.data.engine,
          defaultDatabaseName: c.data.defaultDatabaseName,
          secretArn: c.data.secretArn
        }));
        databases.map(
          (db) => generate2(db).catch((err) => {
            logger(err);
          })
        );
      });
      bus.subscribe("function.success", async (evt) => {
        if (!evt.properties.body?.results)
          return;
        const db = databases.find(
          (db2) => db2.migratorID === evt.properties.functionID
        );
        if (!db)
          return;
        generate2(db).catch((err) => {
          logger(err);
        });
      });
      logger("Loaded kyseley type generator");
    });
  }
});

// src/cli/commands/plugins/warmer.ts
var warmer_exports = {};
__export(warmer_exports, {
  useRDSWarmer: () => useRDSWarmer
});
import {
  RDSDataClient,
  ExecuteStatementCommand
} from "@aws-sdk/client-rds-data";
var useRDSWarmer;
var init_warmer = __esm({
  "src/cli/commands/plugins/warmer.ts"() {
    "use strict";
    init_bus();
    init_context();
    init_credentials();
    useRDSWarmer = Context.memo(async () => {
      let interval;
      const bus = useBus();
      const client = useAWSClient(RDSDataClient);
      bus.subscribe("stacks.metadata", (evt) => {
        if (interval)
          clearInterval(interval);
        interval = setInterval(() => {
          Object.values(evt.properties).flat().filter((c) => c.type === "RDS").map((c) => {
            try {
              client.send(
                new ExecuteStatementCommand({
                  sql: "SELECT 1",
                  secretArn: c.data.secretArn,
                  resourceArn: c.data.clusterArn,
                  database: c.data.defaultDatabaseName
                })
              );
            } catch (e) {
            }
          });
        }, 1e3 * 60);
      });
    });
  }
});

// src/cli/terminal.ts
var terminal_exports = {};
__export(terminal_exports, {
  clear: () => clear
});
function clear() {
  for (let i = 0, l = process.stdout.rows; i < l - 1; i++) {
    console.log("");
  }
  console.clear();
}
var init_terminal = __esm({
  "src/cli/terminal.ts"() {
    "use strict";
  }
});

// src/config.ts
var config_exports = {};
__export(config_exports, {
  Config: () => Config
});
import {
  DeleteParameterCommand,
  GetParameterCommand,
  GetParametersByPathCommand,
  PutParameterCommand,
  SSMClient
} from "@aws-sdk/client-ssm";
import {
  GetFunctionConfigurationCommand,
  LambdaClient,
  UpdateFunctionConfigurationCommand
} from "@aws-sdk/client-lambda";
import { pipe as pipe2, map as map2 } from "remeda";
async function* scan(prefix) {
  const ssm = useAWSClient(SSMClient);
  let token;
  while (true) {
    const results = await ssm.send(
      new GetParametersByPathCommand({
        Path: prefix,
        WithDecryption: true,
        Recursive: true,
        NextToken: token
      })
    );
    yield* results.Parameters || [];
    if (!results.NextToken)
      break;
    token = results.NextToken;
  }
}
function parse(ssmName, prefix) {
  const parts = ssmName.substring(prefix.length).split("/");
  return {
    type: parts[0],
    id: parts[1],
    prop: parts.slice(2).join("/")
  };
}
async function restartFunction(arn) {
  const lambda = useAWSClient(LambdaClient);
  try {
    const config = await lambda.send(
      new GetFunctionConfigurationCommand({
        FunctionName: arn
      })
    );
    await lambda.send(
      new UpdateFunctionConfigurationCommand({
        FunctionName: arn,
        Environment: {
          Variables: {
            ...config.Environment?.Variables || {},
            [SECRET_UPDATED_AT_ENV]: Date.now().toString()
          }
        }
      })
    );
    return true;
  } catch (e) {
    if (e.name === "ResourceNotFoundException" && e.message.startsWith("Function not found")) {
      return;
    }
  }
}
var Config, FALLBACK_STAGE, SECRET_UPDATED_AT_ENV, PREFIX;
var init_config = __esm({
  "src/config.ts"() {
    "use strict";
    init_project();
    init_credentials();
    init_iot();
    init_stacks();
    ((Config2) => {
      async function parameters() {
        const result = [];
        for await (const p of scan(PREFIX.FALLBACK)) {
          const parsed = parse(p.Name, PREFIX.FALLBACK);
          if (parsed.type === "secrets")
            continue;
          result.push({
            ...parsed,
            value: p.Value
          });
        }
        for await (const p of scan(PREFIX.STAGE)) {
          const parsed = parse(p.Name, PREFIX.STAGE);
          if (parsed.type === "secrets")
            continue;
          result.push({
            ...parsed,
            value: p.Value
          });
        }
        return result;
      }
      Config2.parameters = parameters;
      function envFor(input) {
        return `SST_${input.type}_${input.prop}_${normalizeID(input.id)}`;
      }
      Config2.envFor = envFor;
      function pathFor(input) {
        return `${input.fallback ? PREFIX.FALLBACK : PREFIX.STAGE}${input.type}/${normalizeID(input.id)}/${input.prop}`;
      }
      Config2.pathFor = pathFor;
      function normalizeID(input) {
        return input.replace(/-/g, "_");
      }
      Config2.normalizeID = normalizeID;
      async function secrets2() {
        const result = {};
        for await (const p of scan(PREFIX.STAGE + "Secret")) {
          const parsed = parse(p.Name, PREFIX.STAGE);
          if (!result[parsed.id])
            result[parsed.id] = {};
          result[parsed.id].value = p.Value;
        }
        for await (const p of scan(PREFIX.FALLBACK + "Secret")) {
          const parsed = parse(p.Name, PREFIX.FALLBACK);
          if (!result[parsed.id])
            result[parsed.id] = {};
          result[parsed.id].fallback = p.Value;
        }
        return result;
      }
      Config2.secrets = secrets2;
      async function env() {
        const project = useProject();
        const parameters2 = await Config2.parameters();
        const env2 = {
          SST_APP: project.config.name,
          SST_STAGE: project.config.stage,
          ...pipe2(
            parameters2,
            map2((p) => [envFor(p), p.value]),
            Object.fromEntries
          )
        };
        return env2;
      }
      Config2.env = env;
      async function setSecret(input) {
        const ssm = useAWSClient(SSMClient);
        await ssm.send(
          new PutParameterCommand({
            Name: pathFor({
              id: input.key,
              type: "Secret",
              prop: "value",
              fallback: input.fallback
            }),
            Value: input.value,
            Type: "SecureString",
            Overwrite: true
          })
        );
        const iot2 = await useIOT();
        const topic = `${iot2.prefix}/events`;
        await iot2.publish(topic, "config.secret.updated", { name: input.key });
      }
      Config2.setSecret = setSecret;
      async function getSecret(input) {
        const ssm = useAWSClient(SSMClient);
        const result = await ssm.send(
          new GetParameterCommand({
            Name: pathFor({
              id: input.key,
              prop: "value",
              type: "Secret",
              fallback: input.fallback
            }),
            WithDecryption: true
          })
        );
        return result.Parameter?.Value;
      }
      Config2.getSecret = getSecret;
      async function removeSecret(input) {
        const ssm = useAWSClient(SSMClient);
        await ssm.send(
          new DeleteParameterCommand({
            Name: pathFor({
              id: input.key,
              type: "Secret",
              prop: "value",
              fallback: input.fallback
            })
          })
        );
      }
      Config2.removeSecret = removeSecret;
      async function restart(keys) {
        const metadata3 = await stacks_exports.metadata();
        const siteData = Object.values(metadata3).flat().filter(
          (c) => c.type === "AstroSite" || c.type === "NextjsSite" || c.type === "RemixSite" || c.type === "SolidStartSite" || c.type === "SvelteKitSite"
        ).filter((c) => keys.some((key) => c.data.secrets.includes(key)));
        const siteDataPlaceholder = siteData.filter(
          (c) => c.data.mode === "placeholder"
        );
        const siteDataEdge = siteData.filter((c) => c.data.mode === "deployed").filter((c) => c.data.edge);
        const siteDataRegional = siteData.filter((c) => c.data.mode === "deployed").filter((c) => !c.data.edge);
        const regionalSiteArns = siteData.map((s) => s.data.server);
        const functionData = Object.values(metadata3).flat().filter((c) => c.type === "Function").filter((c) => !regionalSiteArns.includes(c.data.arn)).filter((c) => keys.some((key) => c.data.secrets.includes(key)));
        const restartedSites = (await Promise.all(
          siteDataRegional.map(async (s) => {
            const restarted = await restartFunction(s.data.server);
            return restarted ? s : restarted;
          })
        )).filter((c) => Boolean(c));
        const restartedFunctions = (await Promise.all(
          functionData.map(async (f) => {
            const restarted = await restartFunction(f.data.arn);
            return restarted ? f : restarted;
          })
        )).filter((c) => Boolean(c));
        return {
          edgeSites: siteDataEdge,
          sites: restartedSites,
          placeholderSites: siteDataPlaceholder,
          functions: restartedFunctions
        };
      }
      Config2.restart = restart;
    })(Config || (Config = {}));
    FALLBACK_STAGE = ".fallback";
    SECRET_UPDATED_AT_ENV = "SST_ADMIN_SECRET_UPDATED_AT";
    PREFIX = {
      get STAGE() {
        const project = useProject();
        return project.config.ssmPrefix;
      },
      get FALLBACK() {
        const project = useProject();
        return `/sst/${project.config.name}/${FALLBACK_STAGE}/`;
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/service-customizations/s3.js
var require_s3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/service-customizations/s3.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isArnBucketName = exports.isDnsCompatibleBucketName = exports.S3_HOSTNAME_PATTERN = exports.DOT_PATTERN = exports.resolveParamsForS3 = void 0;
    var resolveParamsForS3 = async (endpointParams) => {
      const bucket = (endpointParams === null || endpointParams === void 0 ? void 0 : endpointParams.Bucket) || "";
      if (typeof endpointParams.Bucket === "string") {
        endpointParams.Bucket = bucket.replace(/#/g, encodeURIComponent("#")).replace(/\?/g, encodeURIComponent("?"));
      }
      if ((0, exports.isArnBucketName)(bucket)) {
        if (endpointParams.ForcePathStyle === true) {
          throw new Error("Path-style addressing cannot be used with ARN buckets");
        }
      } else if (!(0, exports.isDnsCompatibleBucketName)(bucket) || bucket.indexOf(".") !== -1 && !String(endpointParams.Endpoint).startsWith("http:") || bucket.toLowerCase() !== bucket || bucket.length < 3) {
        endpointParams.ForcePathStyle = true;
      }
      if (endpointParams.DisableMultiRegionAccessPoints) {
        endpointParams.disableMultiRegionAccessPoints = true;
        endpointParams.DisableMRAP = true;
      }
      return endpointParams;
    };
    exports.resolveParamsForS3 = resolveParamsForS3;
    var DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
    var IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
    var DOTS_PATTERN = /\.\./;
    exports.DOT_PATTERN = /\./;
    exports.S3_HOSTNAME_PATTERN = /^(.+\.)?s3(-fips)?(\.dualstack)?[.-]([a-z0-9-]+)\./;
    var isDnsCompatibleBucketName = (bucketName) => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);
    exports.isDnsCompatibleBucketName = isDnsCompatibleBucketName;
    var isArnBucketName = (bucketName) => {
      const [arn, partition, service, region, account, typeOrId] = bucketName.split(":");
      const isArn = arn === "arn" && bucketName.split(":").length >= 6;
      const isValidArn = [arn, partition, service, account, typeOrId].filter(Boolean).length === 5;
      if (isArn && !isValidArn) {
        throw new Error(`Invalid ARN: ${bucketName} was an invalid ARN.`);
      }
      return arn === "arn" && !!partition && !!service && !!account && !!typeOrId;
    };
    exports.isArnBucketName = isArnBucketName;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/service-customizations/index.js
var require_service_customizations = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/service-customizations/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_s3(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/createConfigValueProvider.js
var require_createConfigValueProvider = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/createConfigValueProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createConfigValueProvider = void 0;
    var createConfigValueProvider = (configKey, canonicalEndpointParamKey, config) => {
      const configProvider = async () => {
        var _a;
        const configValue = (_a = config[configKey]) !== null && _a !== void 0 ? _a : config[canonicalEndpointParamKey];
        if (typeof configValue === "function") {
          return configValue();
        }
        return configValue;
      };
      if (configKey === "endpoint" || canonicalEndpointParamKey === "endpoint") {
        return async () => {
          const endpoint = await configProvider();
          if (endpoint && typeof endpoint === "object") {
            if ("url" in endpoint) {
              return endpoint.url.href;
            }
            if ("hostname" in endpoint) {
              const { protocol, hostname, port, path: path20 } = endpoint;
              return `${protocol}//${hostname}${port ? ":" + port : ""}${path20}`;
            }
          }
          return endpoint;
        };
      }
      return configProvider;
    };
    exports.createConfigValueProvider = createConfigValueProvider;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/getEndpointFromInstructions.js
var require_getEndpointFromInstructions = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/getEndpointFromInstructions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveParams = exports.getEndpointFromInstructions = void 0;
    var service_customizations_1 = require_service_customizations();
    var createConfigValueProvider_1 = require_createConfigValueProvider();
    var getEndpointFromInstructions = async (commandInput, instructionsSupplier, clientConfig, context) => {
      const endpointParams = await (0, exports.resolveParams)(commandInput, instructionsSupplier, clientConfig);
      if (typeof clientConfig.endpointProvider !== "function") {
        throw new Error("config.endpointProvider is not set.");
      }
      const endpoint = clientConfig.endpointProvider(endpointParams, context);
      return endpoint;
    };
    exports.getEndpointFromInstructions = getEndpointFromInstructions;
    var resolveParams = async (commandInput, instructionsSupplier, clientConfig) => {
      var _a;
      const endpointParams = {};
      const instructions = ((_a = instructionsSupplier === null || instructionsSupplier === void 0 ? void 0 : instructionsSupplier.getEndpointParameterInstructions) === null || _a === void 0 ? void 0 : _a.call(instructionsSupplier)) || {};
      for (const [name, instruction] of Object.entries(instructions)) {
        switch (instruction.type) {
          case "staticContextParams":
            endpointParams[name] = instruction.value;
            break;
          case "contextParams":
            endpointParams[name] = commandInput[instruction.name];
            break;
          case "clientContextParams":
          case "builtInParams":
            endpointParams[name] = await (0, createConfigValueProvider_1.createConfigValueProvider)(instruction.name, name, clientConfig)();
            break;
          default:
            throw new Error("Unrecognized endpoint parameter instruction: " + JSON.stringify(instruction));
        }
      }
      if (Object.keys(instructions).length === 0) {
        Object.assign(endpointParams, clientConfig);
      }
      if (String(clientConfig.serviceId).toLowerCase() === "s3") {
        await (0, service_customizations_1.resolveParamsForS3)(endpointParams);
      }
      return endpointParams;
    };
    exports.resolveParams = resolveParams;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+querystring-parser@3.272.0/node_modules/@aws-sdk/querystring-parser/dist-cjs/index.js
var require_dist_cjs2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+querystring-parser@3.272.0/node_modules/@aws-sdk/querystring-parser/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseQueryString = void 0;
    function parseQueryString(querystring) {
      const query = {};
      querystring = querystring.replace(/^\?/, "");
      if (querystring) {
        for (const pair of querystring.split("&")) {
          let [key, value = null] = pair.split("=");
          key = decodeURIComponent(key);
          if (value) {
            value = decodeURIComponent(value);
          }
          if (!(key in query)) {
            query[key] = value;
          } else if (Array.isArray(query[key])) {
            query[key].push(value);
          } else {
            query[key] = [query[key], value];
          }
        }
      }
      return query;
    }
    exports.parseQueryString = parseQueryString;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+url-parser@3.272.0/node_modules/@aws-sdk/url-parser/dist-cjs/index.js
var require_dist_cjs3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+url-parser@3.272.0/node_modules/@aws-sdk/url-parser/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseUrl = void 0;
    var querystring_parser_1 = require_dist_cjs2();
    var parseUrl = (url10) => {
      if (typeof url10 === "string") {
        return (0, exports.parseUrl)(new URL(url10));
      }
      const { hostname, pathname, port, protocol, search } = url10;
      let query;
      if (search) {
        query = (0, querystring_parser_1.parseQueryString)(search);
      }
      return {
        hostname,
        port: port ? parseInt(port) : void 0,
        protocol,
        path: pathname,
        query
      };
    };
    exports.parseUrl = parseUrl;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/toEndpointV1.js
var require_toEndpointV1 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/toEndpointV1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toEndpointV1 = void 0;
    var url_parser_1 = require_dist_cjs3();
    var toEndpointV1 = (endpoint) => {
      if (typeof endpoint === "object") {
        if ("url" in endpoint) {
          return (0, url_parser_1.parseUrl)(endpoint.url);
        }
        return endpoint;
      }
      return (0, url_parser_1.parseUrl)(endpoint);
    };
    exports.toEndpointV1 = toEndpointV1;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/index.js
var require_adaptors = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_getEndpointFromInstructions(), exports);
    tslib_1.__exportStar(require_toEndpointV1(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/endpointMiddleware.js
var require_endpointMiddleware = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/endpointMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.endpointMiddleware = void 0;
    var getEndpointFromInstructions_1 = require_getEndpointFromInstructions();
    var endpointMiddleware = ({ config, instructions }) => {
      return (next, context) => async (args) => {
        var _a, _b;
        const endpoint = await (0, getEndpointFromInstructions_1.getEndpointFromInstructions)(args.input, {
          getEndpointParameterInstructions() {
            return instructions;
          }
        }, { ...config }, context);
        context.endpointV2 = endpoint;
        context.authSchemes = (_a = endpoint.properties) === null || _a === void 0 ? void 0 : _a.authSchemes;
        const authScheme = (_b = context.authSchemes) === null || _b === void 0 ? void 0 : _b[0];
        if (authScheme) {
          context["signing_region"] = authScheme.signingRegion;
          context["signing_service"] = authScheme.signingName;
        }
        return next({
          ...args
        });
      };
    };
    exports.endpointMiddleware = endpointMiddleware;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-serde@3.272.0/node_modules/@aws-sdk/middleware-serde/dist-cjs/deserializerMiddleware.js
var require_deserializerMiddleware = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-serde@3.272.0/node_modules/@aws-sdk/middleware-serde/dist-cjs/deserializerMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deserializerMiddleware = void 0;
    var deserializerMiddleware = (options, deserializer) => (next, context) => async (args) => {
      const { response } = await next(args);
      try {
        const parsed = await deserializer(response, options);
        return {
          response,
          output: parsed
        };
      } catch (error2) {
        Object.defineProperty(error2, "$response", {
          value: response
        });
        throw error2;
      }
    };
    exports.deserializerMiddleware = deserializerMiddleware;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-serde@3.272.0/node_modules/@aws-sdk/middleware-serde/dist-cjs/serializerMiddleware.js
var require_serializerMiddleware = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-serde@3.272.0/node_modules/@aws-sdk/middleware-serde/dist-cjs/serializerMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.serializerMiddleware = void 0;
    var serializerMiddleware = (options, serializer) => (next, context) => async (args) => {
      var _a;
      const endpoint = ((_a = context.endpointV2) === null || _a === void 0 ? void 0 : _a.url) && options.urlParser ? async () => options.urlParser(context.endpointV2.url) : options.endpoint;
      if (!endpoint) {
        throw new Error("No valid endpoint provider available.");
      }
      const request = await serializer(args.input, { ...options, endpoint });
      return next({
        ...args,
        request
      });
    };
    exports.serializerMiddleware = serializerMiddleware;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-serde@3.272.0/node_modules/@aws-sdk/middleware-serde/dist-cjs/serdePlugin.js
var require_serdePlugin = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-serde@3.272.0/node_modules/@aws-sdk/middleware-serde/dist-cjs/serdePlugin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSerdePlugin = exports.serializerMiddlewareOption = exports.deserializerMiddlewareOption = void 0;
    var deserializerMiddleware_1 = require_deserializerMiddleware();
    var serializerMiddleware_1 = require_serializerMiddleware();
    exports.deserializerMiddlewareOption = {
      name: "deserializerMiddleware",
      step: "deserialize",
      tags: ["DESERIALIZER"],
      override: true
    };
    exports.serializerMiddlewareOption = {
      name: "serializerMiddleware",
      step: "serialize",
      tags: ["SERIALIZER"],
      override: true
    };
    function getSerdePlugin(config, serializer, deserializer) {
      return {
        applyToStack: (commandStack) => {
          commandStack.add((0, deserializerMiddleware_1.deserializerMiddleware)(config, deserializer), exports.deserializerMiddlewareOption);
          commandStack.add((0, serializerMiddleware_1.serializerMiddleware)(config, serializer), exports.serializerMiddlewareOption);
        }
      };
    }
    exports.getSerdePlugin = getSerdePlugin;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-serde@3.272.0/node_modules/@aws-sdk/middleware-serde/dist-cjs/index.js
var require_dist_cjs4 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-serde@3.272.0/node_modules/@aws-sdk/middleware-serde/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_deserializerMiddleware(), exports);
    tslib_1.__exportStar(require_serdePlugin(), exports);
    tslib_1.__exportStar(require_serializerMiddleware(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/getEndpointPlugin.js
var require_getEndpointPlugin = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/getEndpointPlugin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointPlugin = exports.endpointMiddlewareOptions = void 0;
    var middleware_serde_1 = require_dist_cjs4();
    var endpointMiddleware_1 = require_endpointMiddleware();
    exports.endpointMiddlewareOptions = {
      step: "serialize",
      tags: ["ENDPOINT_PARAMETERS", "ENDPOINT_V2", "ENDPOINT"],
      name: "endpointV2Middleware",
      override: true,
      relation: "before",
      toMiddleware: middleware_serde_1.serializerMiddlewareOption.name
    };
    var getEndpointPlugin = (config, instructions) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, endpointMiddleware_1.endpointMiddleware)({
          config,
          instructions
        }), exports.endpointMiddlewareOptions);
      }
    });
    exports.getEndpointPlugin = getEndpointPlugin;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-middleware@3.272.0/node_modules/@aws-sdk/util-middleware/dist-cjs/normalizeProvider.js
var require_normalizeProvider = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-middleware@3.272.0/node_modules/@aws-sdk/util-middleware/dist-cjs/normalizeProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.normalizeProvider = void 0;
    var normalizeProvider = (input) => {
      if (typeof input === "function")
        return input;
      const promisified = Promise.resolve(input);
      return () => promisified;
    };
    exports.normalizeProvider = normalizeProvider;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-middleware@3.272.0/node_modules/@aws-sdk/util-middleware/dist-cjs/index.js
var require_dist_cjs5 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-middleware@3.272.0/node_modules/@aws-sdk/util-middleware/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_normalizeProvider(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/resolveEndpointConfig.js
var require_resolveEndpointConfig = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/resolveEndpointConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveEndpointConfig = void 0;
    var util_middleware_1 = require_dist_cjs5();
    var toEndpointV1_1 = require_toEndpointV1();
    var resolveEndpointConfig = (input) => {
      var _a, _b, _c;
      const tls = (_a = input.tls) !== null && _a !== void 0 ? _a : true;
      const { endpoint } = input;
      const customEndpointProvider = endpoint != null ? async () => (0, toEndpointV1_1.toEndpointV1)(await (0, util_middleware_1.normalizeProvider)(endpoint)()) : void 0;
      const isCustomEndpoint = !!endpoint;
      return {
        ...input,
        endpoint: customEndpointProvider,
        tls,
        isCustomEndpoint,
        useDualstackEndpoint: (0, util_middleware_1.normalizeProvider)((_b = input.useDualstackEndpoint) !== null && _b !== void 0 ? _b : false),
        useFipsEndpoint: (0, util_middleware_1.normalizeProvider)((_c = input.useFipsEndpoint) !== null && _c !== void 0 ? _c : false)
      };
    };
    exports.resolveEndpointConfig = resolveEndpointConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/types.js
var require_types = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/index.js
var require_dist_cjs6 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_adaptors(), exports);
    tslib_1.__exportStar(require_endpointMiddleware(), exports);
    tslib_1.__exportStar(require_getEndpointPlugin(), exports);
    tslib_1.__exportStar(require_resolveEndpointConfig(), exports);
    tslib_1.__exportStar(require_types(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/models/IAMServiceException.js
var require_IAMServiceException = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/models/IAMServiceException.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IAMServiceException = void 0;
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var IAMServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, IAMServiceException.prototype);
      }
    };
    exports.IAMServiceException = IAMServiceException;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/models/models_0.js
var require_models_0 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/models/models_0.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AttachedPolicyFilterSensitiveLog = exports.AttachedPermissionsBoundaryFilterSensitiveLog = exports.AddUserToGroupRequestFilterSensitiveLog = exports.AddRoleToInstanceProfileRequestFilterSensitiveLog = exports.AddClientIDToOpenIDConnectProviderRequestFilterSensitiveLog = exports.AccessKeyMetadataFilterSensitiveLog = exports.AccessKeyLastUsedFilterSensitiveLog = exports.AccessKeyFilterSensitiveLog = exports.AccessDetailFilterSensitiveLog = exports.PolicySourceType = exports.PolicyEvaluationDecisionType = exports.ContextKeyTypeEnum = exports.PolicyEvaluationException = exports.GlobalEndpointTokenVersion = exports.PolicyType = exports.PolicyScopeType = exports.PolicyUsageType = exports.UnrecognizedPublicKeyEncodingException = exports.EncodingType = exports.DeletionTaskStatusType = exports.PolicyOwnerEntityType = exports.JobStatusType = exports.SortKeyType = exports.ReportFormatType = exports.CredentialReportNotReadyException = exports.CredentialReportNotPresentException = exports.CredentialReportExpiredException = exports.SummaryKeyType = exports.EntityType = exports.ReportGenerationLimitExceededException = exports.ReportStateType = exports.InvalidAuthenticationCodeException = exports.DeleteConflictException = exports.ServiceNotSupportedException = exports.MalformedPolicyDocumentException = exports.ConcurrentModificationException = exports.PasswordPolicyViolationException = exports.InvalidUserTypeException = exports.EntityTemporarilyUnmodifiableException = exports.PolicyNotAttachableException = exports.PermissionsBoundaryAttachmentType = exports.AssignmentStatusType = exports.UnmodifiableEntityException = exports.EntityAlreadyExistsException = exports.ServiceFailureException = exports.NoSuchEntityException = exports.LimitExceededException = exports.InvalidInputException = exports.StatusType = exports.AccessAdvisorUsageGranularityType = void 0;
    exports.DeleteOpenIDConnectProviderRequestFilterSensitiveLog = exports.DeleteLoginProfileRequestFilterSensitiveLog = exports.DeleteInstanceProfileRequestFilterSensitiveLog = exports.DeleteGroupPolicyRequestFilterSensitiveLog = exports.DeleteGroupRequestFilterSensitiveLog = exports.DeleteAccountAliasRequestFilterSensitiveLog = exports.DeleteAccessKeyRequestFilterSensitiveLog = exports.DeactivateMFADeviceRequestFilterSensitiveLog = exports.CreateVirtualMFADeviceResponseFilterSensitiveLog = exports.VirtualMFADeviceFilterSensitiveLog = exports.CreateVirtualMFADeviceRequestFilterSensitiveLog = exports.CreateUserResponseFilterSensitiveLog = exports.UserFilterSensitiveLog = exports.CreateUserRequestFilterSensitiveLog = exports.CreateServiceSpecificCredentialResponseFilterSensitiveLog = exports.ServiceSpecificCredentialFilterSensitiveLog = exports.CreateServiceSpecificCredentialRequestFilterSensitiveLog = exports.CreateServiceLinkedRoleResponseFilterSensitiveLog = exports.CreateServiceLinkedRoleRequestFilterSensitiveLog = exports.CreateSAMLProviderResponseFilterSensitiveLog = exports.CreateSAMLProviderRequestFilterSensitiveLog = exports.CreateRoleResponseFilterSensitiveLog = exports.CreateRoleRequestFilterSensitiveLog = exports.CreatePolicyVersionResponseFilterSensitiveLog = exports.PolicyVersionFilterSensitiveLog = exports.CreatePolicyVersionRequestFilterSensitiveLog = exports.CreatePolicyResponseFilterSensitiveLog = exports.PolicyFilterSensitiveLog = exports.CreatePolicyRequestFilterSensitiveLog = exports.CreateOpenIDConnectProviderResponseFilterSensitiveLog = exports.CreateOpenIDConnectProviderRequestFilterSensitiveLog = exports.CreateLoginProfileResponseFilterSensitiveLog = exports.LoginProfileFilterSensitiveLog = exports.CreateLoginProfileRequestFilterSensitiveLog = exports.CreateInstanceProfileResponseFilterSensitiveLog = exports.InstanceProfileFilterSensitiveLog = exports.RoleFilterSensitiveLog = exports.RoleLastUsedFilterSensitiveLog = exports.CreateInstanceProfileRequestFilterSensitiveLog = exports.TagFilterSensitiveLog = exports.CreateGroupResponseFilterSensitiveLog = exports.GroupFilterSensitiveLog = exports.CreateGroupRequestFilterSensitiveLog = exports.CreateAccountAliasRequestFilterSensitiveLog = exports.CreateAccessKeyResponseFilterSensitiveLog = exports.CreateAccessKeyRequestFilterSensitiveLog = exports.ChangePasswordRequestFilterSensitiveLog = exports.AttachUserPolicyRequestFilterSensitiveLog = exports.AttachRolePolicyRequestFilterSensitiveLog = exports.AttachGroupPolicyRequestFilterSensitiveLog = void 0;
    exports.GetOpenIDConnectProviderRequestFilterSensitiveLog = exports.GetLoginProfileResponseFilterSensitiveLog = exports.GetLoginProfileRequestFilterSensitiveLog = exports.GetInstanceProfileResponseFilterSensitiveLog = exports.GetInstanceProfileRequestFilterSensitiveLog = exports.GetGroupPolicyResponseFilterSensitiveLog = exports.GetGroupPolicyRequestFilterSensitiveLog = exports.GetGroupResponseFilterSensitiveLog = exports.GetGroupRequestFilterSensitiveLog = exports.GetCredentialReportResponseFilterSensitiveLog = exports.GetContextKeysForPrincipalPolicyRequestFilterSensitiveLog = exports.GetContextKeysForPolicyResponseFilterSensitiveLog = exports.GetContextKeysForCustomPolicyRequestFilterSensitiveLog = exports.GetAccountSummaryResponseFilterSensitiveLog = exports.GetAccountPasswordPolicyResponseFilterSensitiveLog = exports.PasswordPolicyFilterSensitiveLog = exports.GetAccountAuthorizationDetailsResponseFilterSensitiveLog = exports.UserDetailFilterSensitiveLog = exports.RoleDetailFilterSensitiveLog = exports.ManagedPolicyDetailFilterSensitiveLog = exports.GroupDetailFilterSensitiveLog = exports.PolicyDetailFilterSensitiveLog = exports.GetAccountAuthorizationDetailsRequestFilterSensitiveLog = exports.GetAccessKeyLastUsedResponseFilterSensitiveLog = exports.GetAccessKeyLastUsedRequestFilterSensitiveLog = exports.GenerateServiceLastAccessedDetailsResponseFilterSensitiveLog = exports.GenerateServiceLastAccessedDetailsRequestFilterSensitiveLog = exports.GenerateOrganizationsAccessReportResponseFilterSensitiveLog = exports.GenerateOrganizationsAccessReportRequestFilterSensitiveLog = exports.GenerateCredentialReportResponseFilterSensitiveLog = exports.EnableMFADeviceRequestFilterSensitiveLog = exports.DetachUserPolicyRequestFilterSensitiveLog = exports.DetachRolePolicyRequestFilterSensitiveLog = exports.DetachGroupPolicyRequestFilterSensitiveLog = exports.DeleteVirtualMFADeviceRequestFilterSensitiveLog = exports.DeleteUserPolicyRequestFilterSensitiveLog = exports.DeleteUserPermissionsBoundaryRequestFilterSensitiveLog = exports.DeleteUserRequestFilterSensitiveLog = exports.DeleteSSHPublicKeyRequestFilterSensitiveLog = exports.DeleteSigningCertificateRequestFilterSensitiveLog = exports.DeleteServiceSpecificCredentialRequestFilterSensitiveLog = exports.DeleteServiceLinkedRoleResponseFilterSensitiveLog = exports.DeleteServiceLinkedRoleRequestFilterSensitiveLog = exports.DeleteServerCertificateRequestFilterSensitiveLog = exports.DeleteSAMLProviderRequestFilterSensitiveLog = exports.DeleteRolePolicyRequestFilterSensitiveLog = exports.DeleteRolePermissionsBoundaryRequestFilterSensitiveLog = exports.DeleteRoleRequestFilterSensitiveLog = exports.DeletePolicyVersionRequestFilterSensitiveLog = exports.DeletePolicyRequestFilterSensitiveLog = void 0;
    exports.PolicyRoleFilterSensitiveLog = exports.PolicyGroupFilterSensitiveLog = exports.ListEntitiesForPolicyRequestFilterSensitiveLog = exports.ListAttachedUserPoliciesResponseFilterSensitiveLog = exports.ListAttachedUserPoliciesRequestFilterSensitiveLog = exports.ListAttachedRolePoliciesResponseFilterSensitiveLog = exports.ListAttachedRolePoliciesRequestFilterSensitiveLog = exports.ListAttachedGroupPoliciesResponseFilterSensitiveLog = exports.ListAttachedGroupPoliciesRequestFilterSensitiveLog = exports.ListAccountAliasesResponseFilterSensitiveLog = exports.ListAccountAliasesRequestFilterSensitiveLog = exports.ListAccessKeysResponseFilterSensitiveLog = exports.ListAccessKeysRequestFilterSensitiveLog = exports.GetUserPolicyResponseFilterSensitiveLog = exports.GetUserPolicyRequestFilterSensitiveLog = exports.GetUserResponseFilterSensitiveLog = exports.GetUserRequestFilterSensitiveLog = exports.GetSSHPublicKeyResponseFilterSensitiveLog = exports.SSHPublicKeyFilterSensitiveLog = exports.GetSSHPublicKeyRequestFilterSensitiveLog = exports.GetServiceLinkedRoleDeletionStatusResponseFilterSensitiveLog = exports.DeletionTaskFailureReasonTypeFilterSensitiveLog = exports.RoleUsageTypeFilterSensitiveLog = exports.GetServiceLinkedRoleDeletionStatusRequestFilterSensitiveLog = exports.GetServiceLastAccessedDetailsWithEntitiesResponseFilterSensitiveLog = exports.EntityDetailsFilterSensitiveLog = exports.EntityInfoFilterSensitiveLog = exports.GetServiceLastAccessedDetailsWithEntitiesRequestFilterSensitiveLog = exports.GetServiceLastAccessedDetailsResponseFilterSensitiveLog = exports.ServiceLastAccessedFilterSensitiveLog = exports.TrackedActionLastAccessedFilterSensitiveLog = exports.GetServiceLastAccessedDetailsRequestFilterSensitiveLog = exports.GetServerCertificateResponseFilterSensitiveLog = exports.ServerCertificateFilterSensitiveLog = exports.ServerCertificateMetadataFilterSensitiveLog = exports.GetServerCertificateRequestFilterSensitiveLog = exports.GetSAMLProviderResponseFilterSensitiveLog = exports.GetSAMLProviderRequestFilterSensitiveLog = exports.GetRolePolicyResponseFilterSensitiveLog = exports.GetRolePolicyRequestFilterSensitiveLog = exports.GetRoleResponseFilterSensitiveLog = exports.GetRoleRequestFilterSensitiveLog = exports.GetPolicyVersionResponseFilterSensitiveLog = exports.GetPolicyVersionRequestFilterSensitiveLog = exports.GetPolicyResponseFilterSensitiveLog = exports.GetPolicyRequestFilterSensitiveLog = exports.GetOrganizationsAccessReportResponseFilterSensitiveLog = exports.ErrorDetailsFilterSensitiveLog = exports.GetOrganizationsAccessReportRequestFilterSensitiveLog = exports.GetOpenIDConnectProviderResponseFilterSensitiveLog = void 0;
    exports.ListServiceSpecificCredentialsRequestFilterSensitiveLog = exports.ListServerCertificateTagsResponseFilterSensitiveLog = exports.ListServerCertificateTagsRequestFilterSensitiveLog = exports.ListServerCertificatesResponseFilterSensitiveLog = exports.ListServerCertificatesRequestFilterSensitiveLog = exports.ListSAMLProviderTagsResponseFilterSensitiveLog = exports.ListSAMLProviderTagsRequestFilterSensitiveLog = exports.ListSAMLProvidersResponseFilterSensitiveLog = exports.SAMLProviderListEntryFilterSensitiveLog = exports.ListSAMLProvidersRequestFilterSensitiveLog = exports.ListRoleTagsResponseFilterSensitiveLog = exports.ListRoleTagsRequestFilterSensitiveLog = exports.ListRolesResponseFilterSensitiveLog = exports.ListRolesRequestFilterSensitiveLog = exports.ListRolePoliciesResponseFilterSensitiveLog = exports.ListRolePoliciesRequestFilterSensitiveLog = exports.ListPolicyVersionsResponseFilterSensitiveLog = exports.ListPolicyVersionsRequestFilterSensitiveLog = exports.ListPolicyTagsResponseFilterSensitiveLog = exports.ListPolicyTagsRequestFilterSensitiveLog = exports.ListPoliciesGrantingServiceAccessResponseFilterSensitiveLog = exports.ListPoliciesGrantingServiceAccessEntryFilterSensitiveLog = exports.PolicyGrantingServiceAccessFilterSensitiveLog = exports.ListPoliciesGrantingServiceAccessRequestFilterSensitiveLog = exports.ListPoliciesResponseFilterSensitiveLog = exports.ListPoliciesRequestFilterSensitiveLog = exports.ListOpenIDConnectProviderTagsResponseFilterSensitiveLog = exports.ListOpenIDConnectProviderTagsRequestFilterSensitiveLog = exports.ListOpenIDConnectProvidersResponseFilterSensitiveLog = exports.OpenIDConnectProviderListEntryFilterSensitiveLog = exports.ListOpenIDConnectProvidersRequestFilterSensitiveLog = exports.ListMFADeviceTagsResponseFilterSensitiveLog = exports.ListMFADeviceTagsRequestFilterSensitiveLog = exports.ListMFADevicesResponseFilterSensitiveLog = exports.MFADeviceFilterSensitiveLog = exports.ListMFADevicesRequestFilterSensitiveLog = exports.ListInstanceProfileTagsResponseFilterSensitiveLog = exports.ListInstanceProfileTagsRequestFilterSensitiveLog = exports.ListInstanceProfilesForRoleResponseFilterSensitiveLog = exports.ListInstanceProfilesForRoleRequestFilterSensitiveLog = exports.ListInstanceProfilesResponseFilterSensitiveLog = exports.ListInstanceProfilesRequestFilterSensitiveLog = exports.ListGroupsForUserResponseFilterSensitiveLog = exports.ListGroupsForUserRequestFilterSensitiveLog = exports.ListGroupsResponseFilterSensitiveLog = exports.ListGroupsRequestFilterSensitiveLog = exports.ListGroupPoliciesResponseFilterSensitiveLog = exports.ListGroupPoliciesRequestFilterSensitiveLog = exports.ListEntitiesForPolicyResponseFilterSensitiveLog = exports.PolicyUserFilterSensitiveLog = void 0;
    exports.UntagOpenIDConnectProviderRequestFilterSensitiveLog = exports.UntagMFADeviceRequestFilterSensitiveLog = exports.UntagInstanceProfileRequestFilterSensitiveLog = exports.TagUserRequestFilterSensitiveLog = exports.TagServerCertificateRequestFilterSensitiveLog = exports.TagSAMLProviderRequestFilterSensitiveLog = exports.TagRoleRequestFilterSensitiveLog = exports.TagPolicyRequestFilterSensitiveLog = exports.TagOpenIDConnectProviderRequestFilterSensitiveLog = exports.TagMFADeviceRequestFilterSensitiveLog = exports.TagInstanceProfileRequestFilterSensitiveLog = exports.SimulatePrincipalPolicyRequestFilterSensitiveLog = exports.SimulatePolicyResponseFilterSensitiveLog = exports.EvaluationResultFilterSensitiveLog = exports.ResourceSpecificResultFilterSensitiveLog = exports.PermissionsBoundaryDecisionDetailFilterSensitiveLog = exports.OrganizationsDecisionDetailFilterSensitiveLog = exports.StatementFilterSensitiveLog = exports.PositionFilterSensitiveLog = exports.SimulateCustomPolicyRequestFilterSensitiveLog = exports.ContextEntryFilterSensitiveLog = exports.SetSecurityTokenServicePreferencesRequestFilterSensitiveLog = exports.SetDefaultPolicyVersionRequestFilterSensitiveLog = exports.ResyncMFADeviceRequestFilterSensitiveLog = exports.ResetServiceSpecificCredentialResponseFilterSensitiveLog = exports.ResetServiceSpecificCredentialRequestFilterSensitiveLog = exports.RemoveUserFromGroupRequestFilterSensitiveLog = exports.RemoveRoleFromInstanceProfileRequestFilterSensitiveLog = exports.RemoveClientIDFromOpenIDConnectProviderRequestFilterSensitiveLog = exports.PutUserPolicyRequestFilterSensitiveLog = exports.PutUserPermissionsBoundaryRequestFilterSensitiveLog = exports.PutRolePolicyRequestFilterSensitiveLog = exports.PutRolePermissionsBoundaryRequestFilterSensitiveLog = exports.PutGroupPolicyRequestFilterSensitiveLog = exports.ListVirtualMFADevicesResponseFilterSensitiveLog = exports.ListVirtualMFADevicesRequestFilterSensitiveLog = exports.ListUserTagsResponseFilterSensitiveLog = exports.ListUserTagsRequestFilterSensitiveLog = exports.ListUsersResponseFilterSensitiveLog = exports.ListUsersRequestFilterSensitiveLog = exports.ListUserPoliciesResponseFilterSensitiveLog = exports.ListUserPoliciesRequestFilterSensitiveLog = exports.ListSSHPublicKeysResponseFilterSensitiveLog = exports.SSHPublicKeyMetadataFilterSensitiveLog = exports.ListSSHPublicKeysRequestFilterSensitiveLog = exports.ListSigningCertificatesResponseFilterSensitiveLog = exports.SigningCertificateFilterSensitiveLog = exports.ListSigningCertificatesRequestFilterSensitiveLog = exports.ListServiceSpecificCredentialsResponseFilterSensitiveLog = exports.ServiceSpecificCredentialMetadataFilterSensitiveLog = void 0;
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var IAMServiceException_1 = require_IAMServiceException();
    var AccessAdvisorUsageGranularityType;
    (function(AccessAdvisorUsageGranularityType2) {
      AccessAdvisorUsageGranularityType2["ACTION_LEVEL"] = "ACTION_LEVEL";
      AccessAdvisorUsageGranularityType2["SERVICE_LEVEL"] = "SERVICE_LEVEL";
    })(AccessAdvisorUsageGranularityType = exports.AccessAdvisorUsageGranularityType || (exports.AccessAdvisorUsageGranularityType = {}));
    var StatusType;
    (function(StatusType2) {
      StatusType2["Active"] = "Active";
      StatusType2["Inactive"] = "Inactive";
    })(StatusType = exports.StatusType || (exports.StatusType = {}));
    var InvalidInputException = class extends IAMServiceException_1.IAMServiceException {
      constructor(opts) {
        super({
          name: "InvalidInputException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidInputException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInputException.prototype);
      }
    };
    exports.InvalidInputException = InvalidInputException;
    var LimitExceededException = class extends IAMServiceException_1.IAMServiceException {
      constructor(opts) {
        super({
          name: "LimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
      }
    };
    exports.LimitExceededException = LimitExceededException;
    var NoSuchEntityException = class extends IAMServiceException_1.IAMServiceException {
      constructor(opts) {
        super({
          name: "NoSuchEntityException",
          $fault: "client",
          ...opts
        });
        this.name = "NoSuchEntityException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NoSuchEntityException.prototype);
      }
    };
    exports.NoSuchEntityException = NoSuchEntityException;
    var ServiceFailureException = class extends IAMServiceException_1.IAMServiceException {
      constructor(opts) {
        super({
          name: "ServiceFailureException",
          $fault: "server",
          ...opts
        });
        this.name = "ServiceFailureException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ServiceFailureException.prototype);
      }
    };
    exports.ServiceFailureException = ServiceFailureException;
    var EntityAlreadyExistsException = class extends IAMServiceException_1.IAMServiceException {
      constructor(opts) {
        super({
          name: "EntityAlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "EntityAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, EntityAlreadyExistsException.prototype);
      }
    };
    exports.EntityAlreadyExistsException = EntityAlreadyExistsException;
    var UnmodifiableEntityException = class extends IAMServiceException_1.IAMServiceException {
      constructor(opts) {
        super({
          name: "UnmodifiableEntityException",
          $fault: "client",
          ...opts
        });
        this.name = "UnmodifiableEntityException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnmodifiableEntityException.prototype);
      }
    };
    exports.UnmodifiableEntityException = UnmodifiableEntityException;
    var AssignmentStatusType;
    (function(AssignmentStatusType2) {
      AssignmentStatusType2["Any"] = "Any";
      AssignmentStatusType2["Assigned"] = "Assigned";
      AssignmentStatusType2["Unassigned"] = "Unassigned";
    })(AssignmentStatusType = exports.AssignmentStatusType || (exports.AssignmentStatusType = {}));
    var PermissionsBoundaryAttachmentType;
    (function(PermissionsBoundaryAttachmentType2) {
      PermissionsBoundaryAttachmentType2["Policy"] = "PermissionsBoundaryPolicy";
    })(PermissionsBoundaryAttachmentType = exports.PermissionsBoundaryAttachmentType || (exports.PermissionsBoundaryAttachmentType = {}));
    var PolicyNotAttachableException = class extends IAMServiceException_1.IAMServiceException {
      constructor(opts) {
        super({
          name: "PolicyNotAttachableException",
          $fault: "client",
          ...opts
        });
        this.name = "PolicyNotAttachableException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PolicyNotAttachableException.prototype);
      }
    };
    exports.PolicyNotAttachableException = PolicyNotAttachableException;
    var EntityTemporarilyUnmodifiableException = class extends IAMServiceException_1.IAMServiceException {
      constructor(opts) {
        super({
          name: "EntityTemporarilyUnmodifiableException",
          $fault: "client",
          ...opts
        });
        this.name = "EntityTemporarilyUnmodifiableException";
        this.$fault = "client";
        Object.setPrototypeOf(this, EntityTemporarilyUnmodifiableException.prototype);
      }
    };
    exports.EntityTemporarilyUnmodifiableException = EntityTemporarilyUnmodifiableException;
    var InvalidUserTypeException = class extends IAMServiceException_1.IAMServiceException {
      constructor(opts) {
        super({
          name: "InvalidUserTypeException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidUserTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidUserTypeException.prototype);
      }
    };
    exports.InvalidUserTypeException = InvalidUserTypeException;
    var PasswordPolicyViolationException = class extends IAMServiceException_1.IAMServiceException {
      constructor(opts) {
        super({
          name: "PasswordPolicyViolationException",
          $fault: "client",
          ...opts
        });
        this.name = "PasswordPolicyViolationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PasswordPolicyViolationException.prototype);
      }
    };
    exports.PasswordPolicyViolationException = PasswordPolicyViolationException;
    var ConcurrentModificationException = class extends IAMServiceException_1.IAMServiceException {
      constructor(opts) {
        super({
          name: "ConcurrentModificationException",
          $fault: "client",
          ...opts
        });
        this.name = "ConcurrentModificationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConcurrentModificationException.prototype);
      }
    };
    exports.ConcurrentModificationException = ConcurrentModificationException;
    var MalformedPolicyDocumentException = class extends IAMServiceException_1.IAMServiceException {
      constructor(opts) {
        super({
          name: "MalformedPolicyDocumentException",
          $fault: "client",
          ...opts
        });
        this.name = "MalformedPolicyDocumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MalformedPolicyDocumentException.prototype);
      }
    };
    exports.MalformedPolicyDocumentException = MalformedPolicyDocumentException;
    var ServiceNotSupportedException = class extends IAMServiceException_1.IAMServiceException {
      constructor(opts) {
        super({
          name: "ServiceNotSupportedException",
          $fault: "client",
          ...opts
        });
        this.name = "ServiceNotSupportedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceNotSupportedException.prototype);
      }
    };
    exports.ServiceNotSupportedException = ServiceNotSupportedException;
    var DeleteConflictException = class extends IAMServiceException_1.IAMServiceException {
      constructor(opts) {
        super({
          name: "DeleteConflictException",
          $fault: "client",
          ...opts
        });
        this.name = "DeleteConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeleteConflictException.prototype);
      }
    };
    exports.DeleteConflictException = DeleteConflictException;
    var InvalidAuthenticationCodeException = class extends IAMServiceException_1.IAMServiceException {
      constructor(opts) {
        super({
          name: "InvalidAuthenticationCodeException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAuthenticationCodeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAuthenticationCodeException.prototype);
      }
    };
    exports.InvalidAuthenticationCodeException = InvalidAuthenticationCodeException;
    var ReportStateType;
    (function(ReportStateType2) {
      ReportStateType2["COMPLETE"] = "COMPLETE";
      ReportStateType2["INPROGRESS"] = "INPROGRESS";
      ReportStateType2["STARTED"] = "STARTED";
    })(ReportStateType = exports.ReportStateType || (exports.ReportStateType = {}));
    var ReportGenerationLimitExceededException = class extends IAMServiceException_1.IAMServiceException {
      constructor(opts) {
        super({
          name: "ReportGenerationLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "ReportGenerationLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ReportGenerationLimitExceededException.prototype);
      }
    };
    exports.ReportGenerationLimitExceededException = ReportGenerationLimitExceededException;
    var EntityType;
    (function(EntityType2) {
      EntityType2["AWSManagedPolicy"] = "AWSManagedPolicy";
      EntityType2["Group"] = "Group";
      EntityType2["LocalManagedPolicy"] = "LocalManagedPolicy";
      EntityType2["Role"] = "Role";
      EntityType2["User"] = "User";
    })(EntityType = exports.EntityType || (exports.EntityType = {}));
    var SummaryKeyType;
    (function(SummaryKeyType2) {
      SummaryKeyType2["AccessKeysPerUserQuota"] = "AccessKeysPerUserQuota";
      SummaryKeyType2["AccountAccessKeysPresent"] = "AccountAccessKeysPresent";
      SummaryKeyType2["AccountMFAEnabled"] = "AccountMFAEnabled";
      SummaryKeyType2["AccountSigningCertificatesPresent"] = "AccountSigningCertificatesPresent";
      SummaryKeyType2["AttachedPoliciesPerGroupQuota"] = "AttachedPoliciesPerGroupQuota";
      SummaryKeyType2["AttachedPoliciesPerRoleQuota"] = "AttachedPoliciesPerRoleQuota";
      SummaryKeyType2["AttachedPoliciesPerUserQuota"] = "AttachedPoliciesPerUserQuota";
      SummaryKeyType2["GlobalEndpointTokenVersion"] = "GlobalEndpointTokenVersion";
      SummaryKeyType2["GroupPolicySizeQuota"] = "GroupPolicySizeQuota";
      SummaryKeyType2["Groups"] = "Groups";
      SummaryKeyType2["GroupsPerUserQuota"] = "GroupsPerUserQuota";
      SummaryKeyType2["GroupsQuota"] = "GroupsQuota";
      SummaryKeyType2["MFADevices"] = "MFADevices";
      SummaryKeyType2["MFADevicesInUse"] = "MFADevicesInUse";
      SummaryKeyType2["Policies"] = "Policies";
      SummaryKeyType2["PoliciesQuota"] = "PoliciesQuota";
      SummaryKeyType2["PolicySizeQuota"] = "PolicySizeQuota";
      SummaryKeyType2["PolicyVersionsInUse"] = "PolicyVersionsInUse";
      SummaryKeyType2["PolicyVersionsInUseQuota"] = "PolicyVersionsInUseQuota";
      SummaryKeyType2["ServerCertificates"] = "ServerCertificates";
      SummaryKeyType2["ServerCertificatesQuota"] = "ServerCertificatesQuota";
      SummaryKeyType2["SigningCertificatesPerUserQuota"] = "SigningCertificatesPerUserQuota";
      SummaryKeyType2["UserPolicySizeQuota"] = "UserPolicySizeQuota";
      SummaryKeyType2["Users"] = "Users";
      SummaryKeyType2["UsersQuota"] = "UsersQuota";
      SummaryKeyType2["VersionsPerPolicyQuota"] = "VersionsPerPolicyQuota";
    })(SummaryKeyType = exports.SummaryKeyType || (exports.SummaryKeyType = {}));
    var CredentialReportExpiredException = class extends IAMServiceException_1.IAMServiceException {
      constructor(opts) {
        super({
          name: "CredentialReportExpiredException",
          $fault: "client",
          ...opts
        });
        this.name = "CredentialReportExpiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CredentialReportExpiredException.prototype);
      }
    };
    exports.CredentialReportExpiredException = CredentialReportExpiredException;
    var CredentialReportNotPresentException = class extends IAMServiceException_1.IAMServiceException {
      constructor(opts) {
        super({
          name: "CredentialReportNotPresentException",
          $fault: "client",
          ...opts
        });
        this.name = "CredentialReportNotPresentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CredentialReportNotPresentException.prototype);
      }
    };
    exports.CredentialReportNotPresentException = CredentialReportNotPresentException;
    var CredentialReportNotReadyException = class extends IAMServiceException_1.IAMServiceException {
      constructor(opts) {
        super({
          name: "CredentialReportNotReadyException",
          $fault: "client",
          ...opts
        });
        this.name = "CredentialReportNotReadyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CredentialReportNotReadyException.prototype);
      }
    };
    exports.CredentialReportNotReadyException = CredentialReportNotReadyException;
    var ReportFormatType;
    (function(ReportFormatType2) {
      ReportFormatType2["text_csv"] = "text/csv";
    })(ReportFormatType = exports.ReportFormatType || (exports.ReportFormatType = {}));
    var SortKeyType;
    (function(SortKeyType2) {
      SortKeyType2["LAST_AUTHENTICATED_TIME_ASCENDING"] = "LAST_AUTHENTICATED_TIME_ASCENDING";
      SortKeyType2["LAST_AUTHENTICATED_TIME_DESCENDING"] = "LAST_AUTHENTICATED_TIME_DESCENDING";
      SortKeyType2["SERVICE_NAMESPACE_ASCENDING"] = "SERVICE_NAMESPACE_ASCENDING";
      SortKeyType2["SERVICE_NAMESPACE_DESCENDING"] = "SERVICE_NAMESPACE_DESCENDING";
    })(SortKeyType = exports.SortKeyType || (exports.SortKeyType = {}));
    var JobStatusType;
    (function(JobStatusType2) {
      JobStatusType2["COMPLETED"] = "COMPLETED";
      JobStatusType2["FAILED"] = "FAILED";
      JobStatusType2["IN_PROGRESS"] = "IN_PROGRESS";
    })(JobStatusType = exports.JobStatusType || (exports.JobStatusType = {}));
    var PolicyOwnerEntityType;
    (function(PolicyOwnerEntityType2) {
      PolicyOwnerEntityType2["GROUP"] = "GROUP";
      PolicyOwnerEntityType2["ROLE"] = "ROLE";
      PolicyOwnerEntityType2["USER"] = "USER";
    })(PolicyOwnerEntityType = exports.PolicyOwnerEntityType || (exports.PolicyOwnerEntityType = {}));
    var DeletionTaskStatusType;
    (function(DeletionTaskStatusType2) {
      DeletionTaskStatusType2["FAILED"] = "FAILED";
      DeletionTaskStatusType2["IN_PROGRESS"] = "IN_PROGRESS";
      DeletionTaskStatusType2["NOT_STARTED"] = "NOT_STARTED";
      DeletionTaskStatusType2["SUCCEEDED"] = "SUCCEEDED";
    })(DeletionTaskStatusType = exports.DeletionTaskStatusType || (exports.DeletionTaskStatusType = {}));
    var EncodingType;
    (function(EncodingType2) {
      EncodingType2["PEM"] = "PEM";
      EncodingType2["SSH"] = "SSH";
    })(EncodingType = exports.EncodingType || (exports.EncodingType = {}));
    var UnrecognizedPublicKeyEncodingException = class extends IAMServiceException_1.IAMServiceException {
      constructor(opts) {
        super({
          name: "UnrecognizedPublicKeyEncodingException",
          $fault: "client",
          ...opts
        });
        this.name = "UnrecognizedPublicKeyEncodingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnrecognizedPublicKeyEncodingException.prototype);
      }
    };
    exports.UnrecognizedPublicKeyEncodingException = UnrecognizedPublicKeyEncodingException;
    var PolicyUsageType;
    (function(PolicyUsageType2) {
      PolicyUsageType2["PermissionsBoundary"] = "PermissionsBoundary";
      PolicyUsageType2["PermissionsPolicy"] = "PermissionsPolicy";
    })(PolicyUsageType = exports.PolicyUsageType || (exports.PolicyUsageType = {}));
    var PolicyScopeType;
    (function(PolicyScopeType2) {
      PolicyScopeType2["AWS"] = "AWS";
      PolicyScopeType2["All"] = "All";
      PolicyScopeType2["Local"] = "Local";
    })(PolicyScopeType = exports.PolicyScopeType || (exports.PolicyScopeType = {}));
    var PolicyType;
    (function(PolicyType2) {
      PolicyType2["INLINE"] = "INLINE";
      PolicyType2["MANAGED"] = "MANAGED";
    })(PolicyType = exports.PolicyType || (exports.PolicyType = {}));
    var GlobalEndpointTokenVersion;
    (function(GlobalEndpointTokenVersion2) {
      GlobalEndpointTokenVersion2["v1Token"] = "v1Token";
      GlobalEndpointTokenVersion2["v2Token"] = "v2Token";
    })(GlobalEndpointTokenVersion = exports.GlobalEndpointTokenVersion || (exports.GlobalEndpointTokenVersion = {}));
    var PolicyEvaluationException = class extends IAMServiceException_1.IAMServiceException {
      constructor(opts) {
        super({
          name: "PolicyEvaluationException",
          $fault: "server",
          ...opts
        });
        this.name = "PolicyEvaluationException";
        this.$fault = "server";
        Object.setPrototypeOf(this, PolicyEvaluationException.prototype);
      }
    };
    exports.PolicyEvaluationException = PolicyEvaluationException;
    var ContextKeyTypeEnum;
    (function(ContextKeyTypeEnum2) {
      ContextKeyTypeEnum2["BINARY"] = "binary";
      ContextKeyTypeEnum2["BINARY_LIST"] = "binaryList";
      ContextKeyTypeEnum2["BOOLEAN"] = "boolean";
      ContextKeyTypeEnum2["BOOLEAN_LIST"] = "booleanList";
      ContextKeyTypeEnum2["DATE"] = "date";
      ContextKeyTypeEnum2["DATE_LIST"] = "dateList";
      ContextKeyTypeEnum2["IP"] = "ip";
      ContextKeyTypeEnum2["IP_LIST"] = "ipList";
      ContextKeyTypeEnum2["NUMERIC"] = "numeric";
      ContextKeyTypeEnum2["NUMERIC_LIST"] = "numericList";
      ContextKeyTypeEnum2["STRING"] = "string";
      ContextKeyTypeEnum2["STRING_LIST"] = "stringList";
    })(ContextKeyTypeEnum = exports.ContextKeyTypeEnum || (exports.ContextKeyTypeEnum = {}));
    var PolicyEvaluationDecisionType;
    (function(PolicyEvaluationDecisionType2) {
      PolicyEvaluationDecisionType2["ALLOWED"] = "allowed";
      PolicyEvaluationDecisionType2["EXPLICIT_DENY"] = "explicitDeny";
      PolicyEvaluationDecisionType2["IMPLICIT_DENY"] = "implicitDeny";
    })(PolicyEvaluationDecisionType = exports.PolicyEvaluationDecisionType || (exports.PolicyEvaluationDecisionType = {}));
    var PolicySourceType;
    (function(PolicySourceType2) {
      PolicySourceType2["AWS_MANAGED"] = "aws-managed";
      PolicySourceType2["GROUP"] = "group";
      PolicySourceType2["NONE"] = "none";
      PolicySourceType2["RESOURCE"] = "resource";
      PolicySourceType2["ROLE"] = "role";
      PolicySourceType2["USER"] = "user";
      PolicySourceType2["USER_MANAGED"] = "user-managed";
    })(PolicySourceType = exports.PolicySourceType || (exports.PolicySourceType = {}));
    var AccessDetailFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AccessDetailFilterSensitiveLog = AccessDetailFilterSensitiveLog;
    var AccessKeyFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SecretAccessKey && { SecretAccessKey: smithy_client_1.SENSITIVE_STRING }
    });
    exports.AccessKeyFilterSensitiveLog = AccessKeyFilterSensitiveLog;
    var AccessKeyLastUsedFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AccessKeyLastUsedFilterSensitiveLog = AccessKeyLastUsedFilterSensitiveLog;
    var AccessKeyMetadataFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AccessKeyMetadataFilterSensitiveLog = AccessKeyMetadataFilterSensitiveLog;
    var AddClientIDToOpenIDConnectProviderRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AddClientIDToOpenIDConnectProviderRequestFilterSensitiveLog = AddClientIDToOpenIDConnectProviderRequestFilterSensitiveLog;
    var AddRoleToInstanceProfileRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AddRoleToInstanceProfileRequestFilterSensitiveLog = AddRoleToInstanceProfileRequestFilterSensitiveLog;
    var AddUserToGroupRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AddUserToGroupRequestFilterSensitiveLog = AddUserToGroupRequestFilterSensitiveLog;
    var AttachedPermissionsBoundaryFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AttachedPermissionsBoundaryFilterSensitiveLog = AttachedPermissionsBoundaryFilterSensitiveLog;
    var AttachedPolicyFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AttachedPolicyFilterSensitiveLog = AttachedPolicyFilterSensitiveLog;
    var AttachGroupPolicyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AttachGroupPolicyRequestFilterSensitiveLog = AttachGroupPolicyRequestFilterSensitiveLog;
    var AttachRolePolicyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AttachRolePolicyRequestFilterSensitiveLog = AttachRolePolicyRequestFilterSensitiveLog;
    var AttachUserPolicyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AttachUserPolicyRequestFilterSensitiveLog = AttachUserPolicyRequestFilterSensitiveLog;
    var ChangePasswordRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.OldPassword && { OldPassword: smithy_client_1.SENSITIVE_STRING },
      ...obj.NewPassword && { NewPassword: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ChangePasswordRequestFilterSensitiveLog = ChangePasswordRequestFilterSensitiveLog;
    var CreateAccessKeyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateAccessKeyRequestFilterSensitiveLog = CreateAccessKeyRequestFilterSensitiveLog;
    var CreateAccessKeyResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AccessKey && { AccessKey: (0, exports.AccessKeyFilterSensitiveLog)(obj.AccessKey) }
    });
    exports.CreateAccessKeyResponseFilterSensitiveLog = CreateAccessKeyResponseFilterSensitiveLog;
    var CreateAccountAliasRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateAccountAliasRequestFilterSensitiveLog = CreateAccountAliasRequestFilterSensitiveLog;
    var CreateGroupRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateGroupRequestFilterSensitiveLog = CreateGroupRequestFilterSensitiveLog;
    var GroupFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GroupFilterSensitiveLog = GroupFilterSensitiveLog;
    var CreateGroupResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateGroupResponseFilterSensitiveLog = CreateGroupResponseFilterSensitiveLog;
    var TagFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.TagFilterSensitiveLog = TagFilterSensitiveLog;
    var CreateInstanceProfileRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateInstanceProfileRequestFilterSensitiveLog = CreateInstanceProfileRequestFilterSensitiveLog;
    var RoleLastUsedFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RoleLastUsedFilterSensitiveLog = RoleLastUsedFilterSensitiveLog;
    var RoleFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RoleFilterSensitiveLog = RoleFilterSensitiveLog;
    var InstanceProfileFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.InstanceProfileFilterSensitiveLog = InstanceProfileFilterSensitiveLog;
    var CreateInstanceProfileResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateInstanceProfileResponseFilterSensitiveLog = CreateInstanceProfileResponseFilterSensitiveLog;
    var CreateLoginProfileRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Password && { Password: smithy_client_1.SENSITIVE_STRING }
    });
    exports.CreateLoginProfileRequestFilterSensitiveLog = CreateLoginProfileRequestFilterSensitiveLog;
    var LoginProfileFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.LoginProfileFilterSensitiveLog = LoginProfileFilterSensitiveLog;
    var CreateLoginProfileResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateLoginProfileResponseFilterSensitiveLog = CreateLoginProfileResponseFilterSensitiveLog;
    var CreateOpenIDConnectProviderRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateOpenIDConnectProviderRequestFilterSensitiveLog = CreateOpenIDConnectProviderRequestFilterSensitiveLog;
    var CreateOpenIDConnectProviderResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateOpenIDConnectProviderResponseFilterSensitiveLog = CreateOpenIDConnectProviderResponseFilterSensitiveLog;
    var CreatePolicyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreatePolicyRequestFilterSensitiveLog = CreatePolicyRequestFilterSensitiveLog;
    var PolicyFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PolicyFilterSensitiveLog = PolicyFilterSensitiveLog;
    var CreatePolicyResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreatePolicyResponseFilterSensitiveLog = CreatePolicyResponseFilterSensitiveLog;
    var CreatePolicyVersionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreatePolicyVersionRequestFilterSensitiveLog = CreatePolicyVersionRequestFilterSensitiveLog;
    var PolicyVersionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PolicyVersionFilterSensitiveLog = PolicyVersionFilterSensitiveLog;
    var CreatePolicyVersionResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreatePolicyVersionResponseFilterSensitiveLog = CreatePolicyVersionResponseFilterSensitiveLog;
    var CreateRoleRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateRoleRequestFilterSensitiveLog = CreateRoleRequestFilterSensitiveLog;
    var CreateRoleResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateRoleResponseFilterSensitiveLog = CreateRoleResponseFilterSensitiveLog;
    var CreateSAMLProviderRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateSAMLProviderRequestFilterSensitiveLog = CreateSAMLProviderRequestFilterSensitiveLog;
    var CreateSAMLProviderResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateSAMLProviderResponseFilterSensitiveLog = CreateSAMLProviderResponseFilterSensitiveLog;
    var CreateServiceLinkedRoleRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateServiceLinkedRoleRequestFilterSensitiveLog = CreateServiceLinkedRoleRequestFilterSensitiveLog;
    var CreateServiceLinkedRoleResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateServiceLinkedRoleResponseFilterSensitiveLog = CreateServiceLinkedRoleResponseFilterSensitiveLog;
    var CreateServiceSpecificCredentialRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateServiceSpecificCredentialRequestFilterSensitiveLog = CreateServiceSpecificCredentialRequestFilterSensitiveLog;
    var ServiceSpecificCredentialFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ServicePassword && { ServicePassword: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ServiceSpecificCredentialFilterSensitiveLog = ServiceSpecificCredentialFilterSensitiveLog;
    var CreateServiceSpecificCredentialResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ServiceSpecificCredential && {
        ServiceSpecificCredential: (0, exports.ServiceSpecificCredentialFilterSensitiveLog)(obj.ServiceSpecificCredential)
      }
    });
    exports.CreateServiceSpecificCredentialResponseFilterSensitiveLog = CreateServiceSpecificCredentialResponseFilterSensitiveLog;
    var CreateUserRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateUserRequestFilterSensitiveLog = CreateUserRequestFilterSensitiveLog;
    var UserFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UserFilterSensitiveLog = UserFilterSensitiveLog;
    var CreateUserResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateUserResponseFilterSensitiveLog = CreateUserResponseFilterSensitiveLog;
    var CreateVirtualMFADeviceRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateVirtualMFADeviceRequestFilterSensitiveLog = CreateVirtualMFADeviceRequestFilterSensitiveLog;
    var VirtualMFADeviceFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Base32StringSeed && { Base32StringSeed: smithy_client_1.SENSITIVE_STRING },
      ...obj.QRCodePNG && { QRCodePNG: smithy_client_1.SENSITIVE_STRING }
    });
    exports.VirtualMFADeviceFilterSensitiveLog = VirtualMFADeviceFilterSensitiveLog;
    var CreateVirtualMFADeviceResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.VirtualMFADevice && { VirtualMFADevice: (0, exports.VirtualMFADeviceFilterSensitiveLog)(obj.VirtualMFADevice) }
    });
    exports.CreateVirtualMFADeviceResponseFilterSensitiveLog = CreateVirtualMFADeviceResponseFilterSensitiveLog;
    var DeactivateMFADeviceRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeactivateMFADeviceRequestFilterSensitiveLog = DeactivateMFADeviceRequestFilterSensitiveLog;
    var DeleteAccessKeyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteAccessKeyRequestFilterSensitiveLog = DeleteAccessKeyRequestFilterSensitiveLog;
    var DeleteAccountAliasRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteAccountAliasRequestFilterSensitiveLog = DeleteAccountAliasRequestFilterSensitiveLog;
    var DeleteGroupRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteGroupRequestFilterSensitiveLog = DeleteGroupRequestFilterSensitiveLog;
    var DeleteGroupPolicyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteGroupPolicyRequestFilterSensitiveLog = DeleteGroupPolicyRequestFilterSensitiveLog;
    var DeleteInstanceProfileRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteInstanceProfileRequestFilterSensitiveLog = DeleteInstanceProfileRequestFilterSensitiveLog;
    var DeleteLoginProfileRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteLoginProfileRequestFilterSensitiveLog = DeleteLoginProfileRequestFilterSensitiveLog;
    var DeleteOpenIDConnectProviderRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteOpenIDConnectProviderRequestFilterSensitiveLog = DeleteOpenIDConnectProviderRequestFilterSensitiveLog;
    var DeletePolicyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeletePolicyRequestFilterSensitiveLog = DeletePolicyRequestFilterSensitiveLog;
    var DeletePolicyVersionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeletePolicyVersionRequestFilterSensitiveLog = DeletePolicyVersionRequestFilterSensitiveLog;
    var DeleteRoleRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteRoleRequestFilterSensitiveLog = DeleteRoleRequestFilterSensitiveLog;
    var DeleteRolePermissionsBoundaryRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteRolePermissionsBoundaryRequestFilterSensitiveLog = DeleteRolePermissionsBoundaryRequestFilterSensitiveLog;
    var DeleteRolePolicyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteRolePolicyRequestFilterSensitiveLog = DeleteRolePolicyRequestFilterSensitiveLog;
    var DeleteSAMLProviderRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteSAMLProviderRequestFilterSensitiveLog = DeleteSAMLProviderRequestFilterSensitiveLog;
    var DeleteServerCertificateRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteServerCertificateRequestFilterSensitiveLog = DeleteServerCertificateRequestFilterSensitiveLog;
    var DeleteServiceLinkedRoleRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteServiceLinkedRoleRequestFilterSensitiveLog = DeleteServiceLinkedRoleRequestFilterSensitiveLog;
    var DeleteServiceLinkedRoleResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteServiceLinkedRoleResponseFilterSensitiveLog = DeleteServiceLinkedRoleResponseFilterSensitiveLog;
    var DeleteServiceSpecificCredentialRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteServiceSpecificCredentialRequestFilterSensitiveLog = DeleteServiceSpecificCredentialRequestFilterSensitiveLog;
    var DeleteSigningCertificateRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteSigningCertificateRequestFilterSensitiveLog = DeleteSigningCertificateRequestFilterSensitiveLog;
    var DeleteSSHPublicKeyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteSSHPublicKeyRequestFilterSensitiveLog = DeleteSSHPublicKeyRequestFilterSensitiveLog;
    var DeleteUserRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteUserRequestFilterSensitiveLog = DeleteUserRequestFilterSensitiveLog;
    var DeleteUserPermissionsBoundaryRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteUserPermissionsBoundaryRequestFilterSensitiveLog = DeleteUserPermissionsBoundaryRequestFilterSensitiveLog;
    var DeleteUserPolicyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteUserPolicyRequestFilterSensitiveLog = DeleteUserPolicyRequestFilterSensitiveLog;
    var DeleteVirtualMFADeviceRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteVirtualMFADeviceRequestFilterSensitiveLog = DeleteVirtualMFADeviceRequestFilterSensitiveLog;
    var DetachGroupPolicyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DetachGroupPolicyRequestFilterSensitiveLog = DetachGroupPolicyRequestFilterSensitiveLog;
    var DetachRolePolicyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DetachRolePolicyRequestFilterSensitiveLog = DetachRolePolicyRequestFilterSensitiveLog;
    var DetachUserPolicyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DetachUserPolicyRequestFilterSensitiveLog = DetachUserPolicyRequestFilterSensitiveLog;
    var EnableMFADeviceRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.EnableMFADeviceRequestFilterSensitiveLog = EnableMFADeviceRequestFilterSensitiveLog;
    var GenerateCredentialReportResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GenerateCredentialReportResponseFilterSensitiveLog = GenerateCredentialReportResponseFilterSensitiveLog;
    var GenerateOrganizationsAccessReportRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GenerateOrganizationsAccessReportRequestFilterSensitiveLog = GenerateOrganizationsAccessReportRequestFilterSensitiveLog;
    var GenerateOrganizationsAccessReportResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GenerateOrganizationsAccessReportResponseFilterSensitiveLog = GenerateOrganizationsAccessReportResponseFilterSensitiveLog;
    var GenerateServiceLastAccessedDetailsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GenerateServiceLastAccessedDetailsRequestFilterSensitiveLog = GenerateServiceLastAccessedDetailsRequestFilterSensitiveLog;
    var GenerateServiceLastAccessedDetailsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GenerateServiceLastAccessedDetailsResponseFilterSensitiveLog = GenerateServiceLastAccessedDetailsResponseFilterSensitiveLog;
    var GetAccessKeyLastUsedRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetAccessKeyLastUsedRequestFilterSensitiveLog = GetAccessKeyLastUsedRequestFilterSensitiveLog;
    var GetAccessKeyLastUsedResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetAccessKeyLastUsedResponseFilterSensitiveLog = GetAccessKeyLastUsedResponseFilterSensitiveLog;
    var GetAccountAuthorizationDetailsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetAccountAuthorizationDetailsRequestFilterSensitiveLog = GetAccountAuthorizationDetailsRequestFilterSensitiveLog;
    var PolicyDetailFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PolicyDetailFilterSensitiveLog = PolicyDetailFilterSensitiveLog;
    var GroupDetailFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GroupDetailFilterSensitiveLog = GroupDetailFilterSensitiveLog;
    var ManagedPolicyDetailFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ManagedPolicyDetailFilterSensitiveLog = ManagedPolicyDetailFilterSensitiveLog;
    var RoleDetailFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RoleDetailFilterSensitiveLog = RoleDetailFilterSensitiveLog;
    var UserDetailFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UserDetailFilterSensitiveLog = UserDetailFilterSensitiveLog;
    var GetAccountAuthorizationDetailsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetAccountAuthorizationDetailsResponseFilterSensitiveLog = GetAccountAuthorizationDetailsResponseFilterSensitiveLog;
    var PasswordPolicyFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PasswordPolicyFilterSensitiveLog = PasswordPolicyFilterSensitiveLog;
    var GetAccountPasswordPolicyResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetAccountPasswordPolicyResponseFilterSensitiveLog = GetAccountPasswordPolicyResponseFilterSensitiveLog;
    var GetAccountSummaryResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetAccountSummaryResponseFilterSensitiveLog = GetAccountSummaryResponseFilterSensitiveLog;
    var GetContextKeysForCustomPolicyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetContextKeysForCustomPolicyRequestFilterSensitiveLog = GetContextKeysForCustomPolicyRequestFilterSensitiveLog;
    var GetContextKeysForPolicyResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetContextKeysForPolicyResponseFilterSensitiveLog = GetContextKeysForPolicyResponseFilterSensitiveLog;
    var GetContextKeysForPrincipalPolicyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetContextKeysForPrincipalPolicyRequestFilterSensitiveLog = GetContextKeysForPrincipalPolicyRequestFilterSensitiveLog;
    var GetCredentialReportResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetCredentialReportResponseFilterSensitiveLog = GetCredentialReportResponseFilterSensitiveLog;
    var GetGroupRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetGroupRequestFilterSensitiveLog = GetGroupRequestFilterSensitiveLog;
    var GetGroupResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetGroupResponseFilterSensitiveLog = GetGroupResponseFilterSensitiveLog;
    var GetGroupPolicyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetGroupPolicyRequestFilterSensitiveLog = GetGroupPolicyRequestFilterSensitiveLog;
    var GetGroupPolicyResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetGroupPolicyResponseFilterSensitiveLog = GetGroupPolicyResponseFilterSensitiveLog;
    var GetInstanceProfileRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetInstanceProfileRequestFilterSensitiveLog = GetInstanceProfileRequestFilterSensitiveLog;
    var GetInstanceProfileResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetInstanceProfileResponseFilterSensitiveLog = GetInstanceProfileResponseFilterSensitiveLog;
    var GetLoginProfileRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetLoginProfileRequestFilterSensitiveLog = GetLoginProfileRequestFilterSensitiveLog;
    var GetLoginProfileResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetLoginProfileResponseFilterSensitiveLog = GetLoginProfileResponseFilterSensitiveLog;
    var GetOpenIDConnectProviderRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetOpenIDConnectProviderRequestFilterSensitiveLog = GetOpenIDConnectProviderRequestFilterSensitiveLog;
    var GetOpenIDConnectProviderResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetOpenIDConnectProviderResponseFilterSensitiveLog = GetOpenIDConnectProviderResponseFilterSensitiveLog;
    var GetOrganizationsAccessReportRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetOrganizationsAccessReportRequestFilterSensitiveLog = GetOrganizationsAccessReportRequestFilterSensitiveLog;
    var ErrorDetailsFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ErrorDetailsFilterSensitiveLog = ErrorDetailsFilterSensitiveLog;
    var GetOrganizationsAccessReportResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetOrganizationsAccessReportResponseFilterSensitiveLog = GetOrganizationsAccessReportResponseFilterSensitiveLog;
    var GetPolicyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetPolicyRequestFilterSensitiveLog = GetPolicyRequestFilterSensitiveLog;
    var GetPolicyResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetPolicyResponseFilterSensitiveLog = GetPolicyResponseFilterSensitiveLog;
    var GetPolicyVersionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetPolicyVersionRequestFilterSensitiveLog = GetPolicyVersionRequestFilterSensitiveLog;
    var GetPolicyVersionResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetPolicyVersionResponseFilterSensitiveLog = GetPolicyVersionResponseFilterSensitiveLog;
    var GetRoleRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetRoleRequestFilterSensitiveLog = GetRoleRequestFilterSensitiveLog;
    var GetRoleResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetRoleResponseFilterSensitiveLog = GetRoleResponseFilterSensitiveLog;
    var GetRolePolicyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetRolePolicyRequestFilterSensitiveLog = GetRolePolicyRequestFilterSensitiveLog;
    var GetRolePolicyResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetRolePolicyResponseFilterSensitiveLog = GetRolePolicyResponseFilterSensitiveLog;
    var GetSAMLProviderRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetSAMLProviderRequestFilterSensitiveLog = GetSAMLProviderRequestFilterSensitiveLog;
    var GetSAMLProviderResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetSAMLProviderResponseFilterSensitiveLog = GetSAMLProviderResponseFilterSensitiveLog;
    var GetServerCertificateRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetServerCertificateRequestFilterSensitiveLog = GetServerCertificateRequestFilterSensitiveLog;
    var ServerCertificateMetadataFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ServerCertificateMetadataFilterSensitiveLog = ServerCertificateMetadataFilterSensitiveLog;
    var ServerCertificateFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ServerCertificateFilterSensitiveLog = ServerCertificateFilterSensitiveLog;
    var GetServerCertificateResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetServerCertificateResponseFilterSensitiveLog = GetServerCertificateResponseFilterSensitiveLog;
    var GetServiceLastAccessedDetailsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetServiceLastAccessedDetailsRequestFilterSensitiveLog = GetServiceLastAccessedDetailsRequestFilterSensitiveLog;
    var TrackedActionLastAccessedFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.TrackedActionLastAccessedFilterSensitiveLog = TrackedActionLastAccessedFilterSensitiveLog;
    var ServiceLastAccessedFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ServiceLastAccessedFilterSensitiveLog = ServiceLastAccessedFilterSensitiveLog;
    var GetServiceLastAccessedDetailsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetServiceLastAccessedDetailsResponseFilterSensitiveLog = GetServiceLastAccessedDetailsResponseFilterSensitiveLog;
    var GetServiceLastAccessedDetailsWithEntitiesRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetServiceLastAccessedDetailsWithEntitiesRequestFilterSensitiveLog = GetServiceLastAccessedDetailsWithEntitiesRequestFilterSensitiveLog;
    var EntityInfoFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.EntityInfoFilterSensitiveLog = EntityInfoFilterSensitiveLog;
    var EntityDetailsFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.EntityDetailsFilterSensitiveLog = EntityDetailsFilterSensitiveLog;
    var GetServiceLastAccessedDetailsWithEntitiesResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetServiceLastAccessedDetailsWithEntitiesResponseFilterSensitiveLog = GetServiceLastAccessedDetailsWithEntitiesResponseFilterSensitiveLog;
    var GetServiceLinkedRoleDeletionStatusRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetServiceLinkedRoleDeletionStatusRequestFilterSensitiveLog = GetServiceLinkedRoleDeletionStatusRequestFilterSensitiveLog;
    var RoleUsageTypeFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RoleUsageTypeFilterSensitiveLog = RoleUsageTypeFilterSensitiveLog;
    var DeletionTaskFailureReasonTypeFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeletionTaskFailureReasonTypeFilterSensitiveLog = DeletionTaskFailureReasonTypeFilterSensitiveLog;
    var GetServiceLinkedRoleDeletionStatusResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetServiceLinkedRoleDeletionStatusResponseFilterSensitiveLog = GetServiceLinkedRoleDeletionStatusResponseFilterSensitiveLog;
    var GetSSHPublicKeyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetSSHPublicKeyRequestFilterSensitiveLog = GetSSHPublicKeyRequestFilterSensitiveLog;
    var SSHPublicKeyFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.SSHPublicKeyFilterSensitiveLog = SSHPublicKeyFilterSensitiveLog;
    var GetSSHPublicKeyResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetSSHPublicKeyResponseFilterSensitiveLog = GetSSHPublicKeyResponseFilterSensitiveLog;
    var GetUserRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetUserRequestFilterSensitiveLog = GetUserRequestFilterSensitiveLog;
    var GetUserResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetUserResponseFilterSensitiveLog = GetUserResponseFilterSensitiveLog;
    var GetUserPolicyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetUserPolicyRequestFilterSensitiveLog = GetUserPolicyRequestFilterSensitiveLog;
    var GetUserPolicyResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetUserPolicyResponseFilterSensitiveLog = GetUserPolicyResponseFilterSensitiveLog;
    var ListAccessKeysRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListAccessKeysRequestFilterSensitiveLog = ListAccessKeysRequestFilterSensitiveLog;
    var ListAccessKeysResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListAccessKeysResponseFilterSensitiveLog = ListAccessKeysResponseFilterSensitiveLog;
    var ListAccountAliasesRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListAccountAliasesRequestFilterSensitiveLog = ListAccountAliasesRequestFilterSensitiveLog;
    var ListAccountAliasesResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListAccountAliasesResponseFilterSensitiveLog = ListAccountAliasesResponseFilterSensitiveLog;
    var ListAttachedGroupPoliciesRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListAttachedGroupPoliciesRequestFilterSensitiveLog = ListAttachedGroupPoliciesRequestFilterSensitiveLog;
    var ListAttachedGroupPoliciesResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListAttachedGroupPoliciesResponseFilterSensitiveLog = ListAttachedGroupPoliciesResponseFilterSensitiveLog;
    var ListAttachedRolePoliciesRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListAttachedRolePoliciesRequestFilterSensitiveLog = ListAttachedRolePoliciesRequestFilterSensitiveLog;
    var ListAttachedRolePoliciesResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListAttachedRolePoliciesResponseFilterSensitiveLog = ListAttachedRolePoliciesResponseFilterSensitiveLog;
    var ListAttachedUserPoliciesRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListAttachedUserPoliciesRequestFilterSensitiveLog = ListAttachedUserPoliciesRequestFilterSensitiveLog;
    var ListAttachedUserPoliciesResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListAttachedUserPoliciesResponseFilterSensitiveLog = ListAttachedUserPoliciesResponseFilterSensitiveLog;
    var ListEntitiesForPolicyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListEntitiesForPolicyRequestFilterSensitiveLog = ListEntitiesForPolicyRequestFilterSensitiveLog;
    var PolicyGroupFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PolicyGroupFilterSensitiveLog = PolicyGroupFilterSensitiveLog;
    var PolicyRoleFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PolicyRoleFilterSensitiveLog = PolicyRoleFilterSensitiveLog;
    var PolicyUserFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PolicyUserFilterSensitiveLog = PolicyUserFilterSensitiveLog;
    var ListEntitiesForPolicyResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListEntitiesForPolicyResponseFilterSensitiveLog = ListEntitiesForPolicyResponseFilterSensitiveLog;
    var ListGroupPoliciesRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListGroupPoliciesRequestFilterSensitiveLog = ListGroupPoliciesRequestFilterSensitiveLog;
    var ListGroupPoliciesResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListGroupPoliciesResponseFilterSensitiveLog = ListGroupPoliciesResponseFilterSensitiveLog;
    var ListGroupsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListGroupsRequestFilterSensitiveLog = ListGroupsRequestFilterSensitiveLog;
    var ListGroupsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListGroupsResponseFilterSensitiveLog = ListGroupsResponseFilterSensitiveLog;
    var ListGroupsForUserRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListGroupsForUserRequestFilterSensitiveLog = ListGroupsForUserRequestFilterSensitiveLog;
    var ListGroupsForUserResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListGroupsForUserResponseFilterSensitiveLog = ListGroupsForUserResponseFilterSensitiveLog;
    var ListInstanceProfilesRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListInstanceProfilesRequestFilterSensitiveLog = ListInstanceProfilesRequestFilterSensitiveLog;
    var ListInstanceProfilesResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListInstanceProfilesResponseFilterSensitiveLog = ListInstanceProfilesResponseFilterSensitiveLog;
    var ListInstanceProfilesForRoleRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListInstanceProfilesForRoleRequestFilterSensitiveLog = ListInstanceProfilesForRoleRequestFilterSensitiveLog;
    var ListInstanceProfilesForRoleResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListInstanceProfilesForRoleResponseFilterSensitiveLog = ListInstanceProfilesForRoleResponseFilterSensitiveLog;
    var ListInstanceProfileTagsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListInstanceProfileTagsRequestFilterSensitiveLog = ListInstanceProfileTagsRequestFilterSensitiveLog;
    var ListInstanceProfileTagsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListInstanceProfileTagsResponseFilterSensitiveLog = ListInstanceProfileTagsResponseFilterSensitiveLog;
    var ListMFADevicesRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListMFADevicesRequestFilterSensitiveLog = ListMFADevicesRequestFilterSensitiveLog;
    var MFADeviceFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.MFADeviceFilterSensitiveLog = MFADeviceFilterSensitiveLog;
    var ListMFADevicesResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListMFADevicesResponseFilterSensitiveLog = ListMFADevicesResponseFilterSensitiveLog;
    var ListMFADeviceTagsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListMFADeviceTagsRequestFilterSensitiveLog = ListMFADeviceTagsRequestFilterSensitiveLog;
    var ListMFADeviceTagsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListMFADeviceTagsResponseFilterSensitiveLog = ListMFADeviceTagsResponseFilterSensitiveLog;
    var ListOpenIDConnectProvidersRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListOpenIDConnectProvidersRequestFilterSensitiveLog = ListOpenIDConnectProvidersRequestFilterSensitiveLog;
    var OpenIDConnectProviderListEntryFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.OpenIDConnectProviderListEntryFilterSensitiveLog = OpenIDConnectProviderListEntryFilterSensitiveLog;
    var ListOpenIDConnectProvidersResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListOpenIDConnectProvidersResponseFilterSensitiveLog = ListOpenIDConnectProvidersResponseFilterSensitiveLog;
    var ListOpenIDConnectProviderTagsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListOpenIDConnectProviderTagsRequestFilterSensitiveLog = ListOpenIDConnectProviderTagsRequestFilterSensitiveLog;
    var ListOpenIDConnectProviderTagsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListOpenIDConnectProviderTagsResponseFilterSensitiveLog = ListOpenIDConnectProviderTagsResponseFilterSensitiveLog;
    var ListPoliciesRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListPoliciesRequestFilterSensitiveLog = ListPoliciesRequestFilterSensitiveLog;
    var ListPoliciesResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListPoliciesResponseFilterSensitiveLog = ListPoliciesResponseFilterSensitiveLog;
    var ListPoliciesGrantingServiceAccessRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListPoliciesGrantingServiceAccessRequestFilterSensitiveLog = ListPoliciesGrantingServiceAccessRequestFilterSensitiveLog;
    var PolicyGrantingServiceAccessFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PolicyGrantingServiceAccessFilterSensitiveLog = PolicyGrantingServiceAccessFilterSensitiveLog;
    var ListPoliciesGrantingServiceAccessEntryFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListPoliciesGrantingServiceAccessEntryFilterSensitiveLog = ListPoliciesGrantingServiceAccessEntryFilterSensitiveLog;
    var ListPoliciesGrantingServiceAccessResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListPoliciesGrantingServiceAccessResponseFilterSensitiveLog = ListPoliciesGrantingServiceAccessResponseFilterSensitiveLog;
    var ListPolicyTagsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListPolicyTagsRequestFilterSensitiveLog = ListPolicyTagsRequestFilterSensitiveLog;
    var ListPolicyTagsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListPolicyTagsResponseFilterSensitiveLog = ListPolicyTagsResponseFilterSensitiveLog;
    var ListPolicyVersionsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListPolicyVersionsRequestFilterSensitiveLog = ListPolicyVersionsRequestFilterSensitiveLog;
    var ListPolicyVersionsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListPolicyVersionsResponseFilterSensitiveLog = ListPolicyVersionsResponseFilterSensitiveLog;
    var ListRolePoliciesRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListRolePoliciesRequestFilterSensitiveLog = ListRolePoliciesRequestFilterSensitiveLog;
    var ListRolePoliciesResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListRolePoliciesResponseFilterSensitiveLog = ListRolePoliciesResponseFilterSensitiveLog;
    var ListRolesRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListRolesRequestFilterSensitiveLog = ListRolesRequestFilterSensitiveLog;
    var ListRolesResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListRolesResponseFilterSensitiveLog = ListRolesResponseFilterSensitiveLog;
    var ListRoleTagsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListRoleTagsRequestFilterSensitiveLog = ListRoleTagsRequestFilterSensitiveLog;
    var ListRoleTagsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListRoleTagsResponseFilterSensitiveLog = ListRoleTagsResponseFilterSensitiveLog;
    var ListSAMLProvidersRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListSAMLProvidersRequestFilterSensitiveLog = ListSAMLProvidersRequestFilterSensitiveLog;
    var SAMLProviderListEntryFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.SAMLProviderListEntryFilterSensitiveLog = SAMLProviderListEntryFilterSensitiveLog;
    var ListSAMLProvidersResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListSAMLProvidersResponseFilterSensitiveLog = ListSAMLProvidersResponseFilterSensitiveLog;
    var ListSAMLProviderTagsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListSAMLProviderTagsRequestFilterSensitiveLog = ListSAMLProviderTagsRequestFilterSensitiveLog;
    var ListSAMLProviderTagsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListSAMLProviderTagsResponseFilterSensitiveLog = ListSAMLProviderTagsResponseFilterSensitiveLog;
    var ListServerCertificatesRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListServerCertificatesRequestFilterSensitiveLog = ListServerCertificatesRequestFilterSensitiveLog;
    var ListServerCertificatesResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListServerCertificatesResponseFilterSensitiveLog = ListServerCertificatesResponseFilterSensitiveLog;
    var ListServerCertificateTagsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListServerCertificateTagsRequestFilterSensitiveLog = ListServerCertificateTagsRequestFilterSensitiveLog;
    var ListServerCertificateTagsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListServerCertificateTagsResponseFilterSensitiveLog = ListServerCertificateTagsResponseFilterSensitiveLog;
    var ListServiceSpecificCredentialsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListServiceSpecificCredentialsRequestFilterSensitiveLog = ListServiceSpecificCredentialsRequestFilterSensitiveLog;
    var ServiceSpecificCredentialMetadataFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ServiceSpecificCredentialMetadataFilterSensitiveLog = ServiceSpecificCredentialMetadataFilterSensitiveLog;
    var ListServiceSpecificCredentialsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListServiceSpecificCredentialsResponseFilterSensitiveLog = ListServiceSpecificCredentialsResponseFilterSensitiveLog;
    var ListSigningCertificatesRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListSigningCertificatesRequestFilterSensitiveLog = ListSigningCertificatesRequestFilterSensitiveLog;
    var SigningCertificateFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.SigningCertificateFilterSensitiveLog = SigningCertificateFilterSensitiveLog;
    var ListSigningCertificatesResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListSigningCertificatesResponseFilterSensitiveLog = ListSigningCertificatesResponseFilterSensitiveLog;
    var ListSSHPublicKeysRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListSSHPublicKeysRequestFilterSensitiveLog = ListSSHPublicKeysRequestFilterSensitiveLog;
    var SSHPublicKeyMetadataFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.SSHPublicKeyMetadataFilterSensitiveLog = SSHPublicKeyMetadataFilterSensitiveLog;
    var ListSSHPublicKeysResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListSSHPublicKeysResponseFilterSensitiveLog = ListSSHPublicKeysResponseFilterSensitiveLog;
    var ListUserPoliciesRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListUserPoliciesRequestFilterSensitiveLog = ListUserPoliciesRequestFilterSensitiveLog;
    var ListUserPoliciesResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListUserPoliciesResponseFilterSensitiveLog = ListUserPoliciesResponseFilterSensitiveLog;
    var ListUsersRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListUsersRequestFilterSensitiveLog = ListUsersRequestFilterSensitiveLog;
    var ListUsersResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListUsersResponseFilterSensitiveLog = ListUsersResponseFilterSensitiveLog;
    var ListUserTagsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListUserTagsRequestFilterSensitiveLog = ListUserTagsRequestFilterSensitiveLog;
    var ListUserTagsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListUserTagsResponseFilterSensitiveLog = ListUserTagsResponseFilterSensitiveLog;
    var ListVirtualMFADevicesRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListVirtualMFADevicesRequestFilterSensitiveLog = ListVirtualMFADevicesRequestFilterSensitiveLog;
    var ListVirtualMFADevicesResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.VirtualMFADevices && {
        VirtualMFADevices: obj.VirtualMFADevices.map((item) => (0, exports.VirtualMFADeviceFilterSensitiveLog)(item))
      }
    });
    exports.ListVirtualMFADevicesResponseFilterSensitiveLog = ListVirtualMFADevicesResponseFilterSensitiveLog;
    var PutGroupPolicyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PutGroupPolicyRequestFilterSensitiveLog = PutGroupPolicyRequestFilterSensitiveLog;
    var PutRolePermissionsBoundaryRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PutRolePermissionsBoundaryRequestFilterSensitiveLog = PutRolePermissionsBoundaryRequestFilterSensitiveLog;
    var PutRolePolicyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PutRolePolicyRequestFilterSensitiveLog = PutRolePolicyRequestFilterSensitiveLog;
    var PutUserPermissionsBoundaryRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PutUserPermissionsBoundaryRequestFilterSensitiveLog = PutUserPermissionsBoundaryRequestFilterSensitiveLog;
    var PutUserPolicyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PutUserPolicyRequestFilterSensitiveLog = PutUserPolicyRequestFilterSensitiveLog;
    var RemoveClientIDFromOpenIDConnectProviderRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RemoveClientIDFromOpenIDConnectProviderRequestFilterSensitiveLog = RemoveClientIDFromOpenIDConnectProviderRequestFilterSensitiveLog;
    var RemoveRoleFromInstanceProfileRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RemoveRoleFromInstanceProfileRequestFilterSensitiveLog = RemoveRoleFromInstanceProfileRequestFilterSensitiveLog;
    var RemoveUserFromGroupRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RemoveUserFromGroupRequestFilterSensitiveLog = RemoveUserFromGroupRequestFilterSensitiveLog;
    var ResetServiceSpecificCredentialRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ResetServiceSpecificCredentialRequestFilterSensitiveLog = ResetServiceSpecificCredentialRequestFilterSensitiveLog;
    var ResetServiceSpecificCredentialResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ServiceSpecificCredential && {
        ServiceSpecificCredential: (0, exports.ServiceSpecificCredentialFilterSensitiveLog)(obj.ServiceSpecificCredential)
      }
    });
    exports.ResetServiceSpecificCredentialResponseFilterSensitiveLog = ResetServiceSpecificCredentialResponseFilterSensitiveLog;
    var ResyncMFADeviceRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ResyncMFADeviceRequestFilterSensitiveLog = ResyncMFADeviceRequestFilterSensitiveLog;
    var SetDefaultPolicyVersionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.SetDefaultPolicyVersionRequestFilterSensitiveLog = SetDefaultPolicyVersionRequestFilterSensitiveLog;
    var SetSecurityTokenServicePreferencesRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.SetSecurityTokenServicePreferencesRequestFilterSensitiveLog = SetSecurityTokenServicePreferencesRequestFilterSensitiveLog;
    var ContextEntryFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ContextEntryFilterSensitiveLog = ContextEntryFilterSensitiveLog;
    var SimulateCustomPolicyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.SimulateCustomPolicyRequestFilterSensitiveLog = SimulateCustomPolicyRequestFilterSensitiveLog;
    var PositionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PositionFilterSensitiveLog = PositionFilterSensitiveLog;
    var StatementFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StatementFilterSensitiveLog = StatementFilterSensitiveLog;
    var OrganizationsDecisionDetailFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.OrganizationsDecisionDetailFilterSensitiveLog = OrganizationsDecisionDetailFilterSensitiveLog;
    var PermissionsBoundaryDecisionDetailFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PermissionsBoundaryDecisionDetailFilterSensitiveLog = PermissionsBoundaryDecisionDetailFilterSensitiveLog;
    var ResourceSpecificResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ResourceSpecificResultFilterSensitiveLog = ResourceSpecificResultFilterSensitiveLog;
    var EvaluationResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.EvaluationResultFilterSensitiveLog = EvaluationResultFilterSensitiveLog;
    var SimulatePolicyResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.SimulatePolicyResponseFilterSensitiveLog = SimulatePolicyResponseFilterSensitiveLog;
    var SimulatePrincipalPolicyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.SimulatePrincipalPolicyRequestFilterSensitiveLog = SimulatePrincipalPolicyRequestFilterSensitiveLog;
    var TagInstanceProfileRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.TagInstanceProfileRequestFilterSensitiveLog = TagInstanceProfileRequestFilterSensitiveLog;
    var TagMFADeviceRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.TagMFADeviceRequestFilterSensitiveLog = TagMFADeviceRequestFilterSensitiveLog;
    var TagOpenIDConnectProviderRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.TagOpenIDConnectProviderRequestFilterSensitiveLog = TagOpenIDConnectProviderRequestFilterSensitiveLog;
    var TagPolicyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.TagPolicyRequestFilterSensitiveLog = TagPolicyRequestFilterSensitiveLog;
    var TagRoleRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.TagRoleRequestFilterSensitiveLog = TagRoleRequestFilterSensitiveLog;
    var TagSAMLProviderRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.TagSAMLProviderRequestFilterSensitiveLog = TagSAMLProviderRequestFilterSensitiveLog;
    var TagServerCertificateRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.TagServerCertificateRequestFilterSensitiveLog = TagServerCertificateRequestFilterSensitiveLog;
    var TagUserRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.TagUserRequestFilterSensitiveLog = TagUserRequestFilterSensitiveLog;
    var UntagInstanceProfileRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UntagInstanceProfileRequestFilterSensitiveLog = UntagInstanceProfileRequestFilterSensitiveLog;
    var UntagMFADeviceRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UntagMFADeviceRequestFilterSensitiveLog = UntagMFADeviceRequestFilterSensitiveLog;
    var UntagOpenIDConnectProviderRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UntagOpenIDConnectProviderRequestFilterSensitiveLog = UntagOpenIDConnectProviderRequestFilterSensitiveLog;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+protocol-http@3.272.0/node_modules/@aws-sdk/protocol-http/dist-cjs/FieldPosition.js
var require_FieldPosition = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+protocol-http@3.272.0/node_modules/@aws-sdk/protocol-http/dist-cjs/FieldPosition.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FieldPosition = void 0;
    var FieldPosition;
    (function(FieldPosition2) {
      FieldPosition2[FieldPosition2["HEADER"] = 0] = "HEADER";
      FieldPosition2[FieldPosition2["TRAILER"] = 1] = "TRAILER";
    })(FieldPosition = exports.FieldPosition || (exports.FieldPosition = {}));
  }
});

// ../../node_modules/.pnpm/@aws-sdk+protocol-http@3.272.0/node_modules/@aws-sdk/protocol-http/dist-cjs/Field.js
var require_Field = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+protocol-http@3.272.0/node_modules/@aws-sdk/protocol-http/dist-cjs/Field.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Field = void 0;
    var FieldPosition_1 = require_FieldPosition();
    var Field = class {
      constructor({ name, kind = FieldPosition_1.FieldPosition.HEADER, values = [] }) {
        this.name = name;
        this.kind = kind;
        this.values = values;
      }
      add(value) {
        this.values.push(value);
      }
      set(values) {
        this.values = values;
      }
      remove(value) {
        this.values = this.values.filter((v) => v !== value);
      }
      toString() {
        return this.values.map((v) => v.includes(",") || v.includes(" ") ? `"${v}"` : v).join(", ");
      }
      get() {
        return this.values;
      }
    };
    exports.Field = Field;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+protocol-http@3.272.0/node_modules/@aws-sdk/protocol-http/dist-cjs/Fields.js
var require_Fields = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+protocol-http@3.272.0/node_modules/@aws-sdk/protocol-http/dist-cjs/Fields.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Fields = void 0;
    var Fields = class {
      constructor({ fields = [], encoding = "utf-8" }) {
        this.entries = {};
        fields.forEach(this.setField.bind(this));
        this.encoding = encoding;
      }
      setField(field) {
        this.entries[field.name] = field;
      }
      getField(name) {
        return this.entries[name];
      }
      removeField(name) {
        delete this.entries[name];
      }
      getByType(kind) {
        return Object.values(this.entries).filter((field) => field.kind === kind);
      }
    };
    exports.Fields = Fields;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+protocol-http@3.272.0/node_modules/@aws-sdk/protocol-http/dist-cjs/httpHandler.js
var require_httpHandler = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+protocol-http@3.272.0/node_modules/@aws-sdk/protocol-http/dist-cjs/httpHandler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+protocol-http@3.272.0/node_modules/@aws-sdk/protocol-http/dist-cjs/httpRequest.js
var require_httpRequest = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+protocol-http@3.272.0/node_modules/@aws-sdk/protocol-http/dist-cjs/httpRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HttpRequest = void 0;
    var HttpRequest = class {
      constructor(options) {
        this.method = options.method || "GET";
        this.hostname = options.hostname || "localhost";
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol ? options.protocol.slice(-1) !== ":" ? `${options.protocol}:` : options.protocol : "https:";
        this.path = options.path ? options.path.charAt(0) !== "/" ? `/${options.path}` : options.path : "/";
      }
      static isInstance(request) {
        if (!request)
          return false;
        const req = request;
        return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
      }
      clone() {
        const cloned = new HttpRequest({
          ...this,
          headers: { ...this.headers }
        });
        if (cloned.query)
          cloned.query = cloneQuery(cloned.query);
        return cloned;
      }
    };
    exports.HttpRequest = HttpRequest;
    function cloneQuery(query) {
      return Object.keys(query).reduce((carry, paramName) => {
        const param = query[paramName];
        return {
          ...carry,
          [paramName]: Array.isArray(param) ? [...param] : param
        };
      }, {});
    }
  }
});

// ../../node_modules/.pnpm/@aws-sdk+protocol-http@3.272.0/node_modules/@aws-sdk/protocol-http/dist-cjs/httpResponse.js
var require_httpResponse = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+protocol-http@3.272.0/node_modules/@aws-sdk/protocol-http/dist-cjs/httpResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HttpResponse = void 0;
    var HttpResponse = class {
      constructor(options) {
        this.statusCode = options.statusCode;
        this.headers = options.headers || {};
        this.body = options.body;
      }
      static isInstance(response) {
        if (!response)
          return false;
        const resp = response;
        return typeof resp.statusCode === "number" && typeof resp.headers === "object";
      }
    };
    exports.HttpResponse = HttpResponse;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+protocol-http@3.272.0/node_modules/@aws-sdk/protocol-http/dist-cjs/isValidHostname.js
var require_isValidHostname = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+protocol-http@3.272.0/node_modules/@aws-sdk/protocol-http/dist-cjs/isValidHostname.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isValidHostname = void 0;
    function isValidHostname(hostname) {
      const hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
      return hostPattern.test(hostname);
    }
    exports.isValidHostname = isValidHostname;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+protocol-http@3.272.0/node_modules/@aws-sdk/protocol-http/dist-cjs/index.js
var require_dist_cjs7 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+protocol-http@3.272.0/node_modules/@aws-sdk/protocol-http/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Field(), exports);
    tslib_1.__exportStar(require_FieldPosition(), exports);
    tslib_1.__exportStar(require_Fields(), exports);
    tslib_1.__exportStar(require_httpHandler(), exports);
    tslib_1.__exportStar(require_httpRequest(), exports);
    tslib_1.__exportStar(require_httpResponse(), exports);
    tslib_1.__exportStar(require_isValidHostname(), exports);
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/util.js
var require_util2 = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/util.js"(exports) {
    "use strict";
    var nameStartChar = ":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    var nameChar = nameStartChar + "\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var nameRegexp = "[" + nameStartChar + "][" + nameChar + "]*";
    var regexName = new RegExp("^" + nameRegexp + "$");
    var getAllMatches = function(string, regex) {
      const matches = [];
      let match = regex.exec(string);
      while (match) {
        const allmatches = [];
        allmatches.startIndex = regex.lastIndex - match[0].length;
        const len = match.length;
        for (let index = 0; index < len; index++) {
          allmatches.push(match[index]);
        }
        matches.push(allmatches);
        match = regex.exec(string);
      }
      return matches;
    };
    var isName = function(string) {
      const match = regexName.exec(string);
      return !(match === null || typeof match === "undefined");
    };
    exports.isExist = function(v) {
      return typeof v !== "undefined";
    };
    exports.isEmptyObject = function(obj) {
      return Object.keys(obj).length === 0;
    };
    exports.merge = function(target, a, arrayMode) {
      if (a) {
        const keys = Object.keys(a);
        const len = keys.length;
        for (let i = 0; i < len; i++) {
          if (arrayMode === "strict") {
            target[keys[i]] = [a[keys[i]]];
          } else {
            target[keys[i]] = a[keys[i]];
          }
        }
      }
    };
    exports.getValue = function(v) {
      if (exports.isExist(v)) {
        return v;
      } else {
        return "";
      }
    };
    exports.isName = isName;
    exports.getAllMatches = getAllMatches;
    exports.nameRegexp = nameRegexp;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/validator.js
var require_validator = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/validator.js"(exports) {
    "use strict";
    var util = require_util2();
    var defaultOptions = {
      allowBooleanAttributes: false,
      unpairedTags: []
    };
    exports.validate = function(xmlData, options) {
      options = Object.assign({}, defaultOptions, options);
      const tags = [];
      let tagFound = false;
      let reachedRoot = false;
      if (xmlData[0] === "\uFEFF") {
        xmlData = xmlData.substr(1);
      }
      for (let i = 0; i < xmlData.length; i++) {
        if (xmlData[i] === "<" && xmlData[i + 1] === "?") {
          i += 2;
          i = readPI(xmlData, i);
          if (i.err)
            return i;
        } else if (xmlData[i] === "<") {
          let tagStartPos = i;
          i++;
          if (xmlData[i] === "!") {
            i = readCommentAndCDATA(xmlData, i);
            continue;
          } else {
            let closingTag = false;
            if (xmlData[i] === "/") {
              closingTag = true;
              i++;
            }
            let tagName = "";
            for (; i < xmlData.length && xmlData[i] !== ">" && xmlData[i] !== " " && xmlData[i] !== "	" && xmlData[i] !== "\n" && xmlData[i] !== "\r"; i++) {
              tagName += xmlData[i];
            }
            tagName = tagName.trim();
            if (tagName[tagName.length - 1] === "/") {
              tagName = tagName.substring(0, tagName.length - 1);
              i--;
            }
            if (!validateTagName(tagName)) {
              let msg;
              if (tagName.trim().length === 0) {
                msg = "Invalid space after '<'.";
              } else {
                msg = "Tag '" + tagName + "' is an invalid name.";
              }
              return getErrorObject("InvalidTag", msg, getLineNumberForPosition(xmlData, i));
            }
            const result = readAttributeStr(xmlData, i);
            if (result === false) {
              return getErrorObject("InvalidAttr", "Attributes for '" + tagName + "' have open quote.", getLineNumberForPosition(xmlData, i));
            }
            let attrStr = result.value;
            i = result.index;
            if (attrStr[attrStr.length - 1] === "/") {
              const attrStrStart = i - attrStr.length;
              attrStr = attrStr.substring(0, attrStr.length - 1);
              const isValid = validateAttributeString(attrStr, options);
              if (isValid === true) {
                tagFound = true;
              } else {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));
              }
            } else if (closingTag) {
              if (!result.tagClosed) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' doesn't have proper closing.", getLineNumberForPosition(xmlData, i));
              } else if (attrStr.trim().length > 0) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' can't have attributes or invalid starting.", getLineNumberForPosition(xmlData, tagStartPos));
              } else {
                const otg = tags.pop();
                if (tagName !== otg.tagName) {
                  let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);
                  return getErrorObject(
                    "InvalidTag",
                    "Expected closing tag '" + otg.tagName + "' (opened in line " + openPos.line + ", col " + openPos.col + ") instead of closing tag '" + tagName + "'.",
                    getLineNumberForPosition(xmlData, tagStartPos)
                  );
                }
                if (tags.length == 0) {
                  reachedRoot = true;
                }
              }
            } else {
              const isValid = validateAttributeString(attrStr, options);
              if (isValid !== true) {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));
              }
              if (reachedRoot === true) {
                return getErrorObject("InvalidXml", "Multiple possible root nodes found.", getLineNumberForPosition(xmlData, i));
              } else if (options.unpairedTags.indexOf(tagName) !== -1) {
              } else {
                tags.push({ tagName, tagStartPos });
              }
              tagFound = true;
            }
            for (i++; i < xmlData.length; i++) {
              if (xmlData[i] === "<") {
                if (xmlData[i + 1] === "!") {
                  i++;
                  i = readCommentAndCDATA(xmlData, i);
                  continue;
                } else if (xmlData[i + 1] === "?") {
                  i = readPI(xmlData, ++i);
                  if (i.err)
                    return i;
                } else {
                  break;
                }
              } else if (xmlData[i] === "&") {
                const afterAmp = validateAmpersand(xmlData, i);
                if (afterAmp == -1)
                  return getErrorObject("InvalidChar", "char '&' is not expected.", getLineNumberForPosition(xmlData, i));
                i = afterAmp;
              } else {
                if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {
                  return getErrorObject("InvalidXml", "Extra text at the end", getLineNumberForPosition(xmlData, i));
                }
              }
            }
            if (xmlData[i] === "<") {
              i--;
            }
          }
        } else {
          if (isWhiteSpace(xmlData[i])) {
            continue;
          }
          return getErrorObject("InvalidChar", "char '" + xmlData[i] + "' is not expected.", getLineNumberForPosition(xmlData, i));
        }
      }
      if (!tagFound) {
        return getErrorObject("InvalidXml", "Start tag expected.", 1);
      } else if (tags.length == 1) {
        return getErrorObject("InvalidTag", "Unclosed tag '" + tags[0].tagName + "'.", getLineNumberForPosition(xmlData, tags[0].tagStartPos));
      } else if (tags.length > 0) {
        return getErrorObject("InvalidXml", "Invalid '" + JSON.stringify(tags.map((t) => t.tagName), null, 4).replace(/\r?\n/g, "") + "' found.", { line: 1, col: 1 });
      }
      return true;
    };
    function isWhiteSpace(char) {
      return char === " " || char === "	" || char === "\n" || char === "\r";
    }
    function readPI(xmlData, i) {
      const start = i;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] == "?" || xmlData[i] == " ") {
          const tagname = xmlData.substr(start, i - start);
          if (i > 5 && tagname === "xml") {
            return getErrorObject("InvalidXml", "XML declaration allowed only at the start of the document.", getLineNumberForPosition(xmlData, i));
          } else if (xmlData[i] == "?" && xmlData[i + 1] == ">") {
            i++;
            break;
          } else {
            continue;
          }
        }
      }
      return i;
    }
    function readCommentAndCDATA(xmlData, i) {
      if (xmlData.length > i + 5 && xmlData[i + 1] === "-" && xmlData[i + 2] === "-") {
        for (i += 3; i < xmlData.length; i++) {
          if (xmlData[i] === "-" && xmlData[i + 1] === "-" && xmlData[i + 2] === ">") {
            i += 2;
            break;
          }
        }
      } else if (xmlData.length > i + 8 && xmlData[i + 1] === "D" && xmlData[i + 2] === "O" && xmlData[i + 3] === "C" && xmlData[i + 4] === "T" && xmlData[i + 5] === "Y" && xmlData[i + 6] === "P" && xmlData[i + 7] === "E") {
        let angleBracketsCount = 1;
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === "<") {
            angleBracketsCount++;
          } else if (xmlData[i] === ">") {
            angleBracketsCount--;
            if (angleBracketsCount === 0) {
              break;
            }
          }
        }
      } else if (xmlData.length > i + 9 && xmlData[i + 1] === "[" && xmlData[i + 2] === "C" && xmlData[i + 3] === "D" && xmlData[i + 4] === "A" && xmlData[i + 5] === "T" && xmlData[i + 6] === "A" && xmlData[i + 7] === "[") {
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === "]" && xmlData[i + 1] === "]" && xmlData[i + 2] === ">") {
            i += 2;
            break;
          }
        }
      }
      return i;
    }
    var doubleQuote = '"';
    var singleQuote = "'";
    function readAttributeStr(xmlData, i) {
      let attrStr = "";
      let startChar = "";
      let tagClosed = false;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {
          if (startChar === "") {
            startChar = xmlData[i];
          } else if (startChar !== xmlData[i]) {
          } else {
            startChar = "";
          }
        } else if (xmlData[i] === ">") {
          if (startChar === "") {
            tagClosed = true;
            break;
          }
        }
        attrStr += xmlData[i];
      }
      if (startChar !== "") {
        return false;
      }
      return {
        value: attrStr,
        index: i,
        tagClosed
      };
    }
    var validAttrStrRegxp = new RegExp(`(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['"])(([\\s\\S])*?)\\5)?`, "g");
    function validateAttributeString(attrStr, options) {
      const matches = util.getAllMatches(attrStr, validAttrStrRegxp);
      const attrNames = {};
      for (let i = 0; i < matches.length; i++) {
        if (matches[i][1].length === 0) {
          return getErrorObject("InvalidAttr", "Attribute '" + matches[i][2] + "' has no space in starting.", getPositionFromMatch(matches[i]));
        } else if (matches[i][3] !== void 0 && matches[i][4] === void 0) {
          return getErrorObject("InvalidAttr", "Attribute '" + matches[i][2] + "' is without value.", getPositionFromMatch(matches[i]));
        } else if (matches[i][3] === void 0 && !options.allowBooleanAttributes) {
          return getErrorObject("InvalidAttr", "boolean attribute '" + matches[i][2] + "' is not allowed.", getPositionFromMatch(matches[i]));
        }
        const attrName = matches[i][2];
        if (!validateAttrName(attrName)) {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is an invalid name.", getPositionFromMatch(matches[i]));
        }
        if (!attrNames.hasOwnProperty(attrName)) {
          attrNames[attrName] = 1;
        } else {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is repeated.", getPositionFromMatch(matches[i]));
        }
      }
      return true;
    }
    function validateNumberAmpersand(xmlData, i) {
      let re = /\d/;
      if (xmlData[i] === "x") {
        i++;
        re = /[\da-fA-F]/;
      }
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === ";")
          return i;
        if (!xmlData[i].match(re))
          break;
      }
      return -1;
    }
    function validateAmpersand(xmlData, i) {
      i++;
      if (xmlData[i] === ";")
        return -1;
      if (xmlData[i] === "#") {
        i++;
        return validateNumberAmpersand(xmlData, i);
      }
      let count = 0;
      for (; i < xmlData.length; i++, count++) {
        if (xmlData[i].match(/\w/) && count < 20)
          continue;
        if (xmlData[i] === ";")
          break;
        return -1;
      }
      return i;
    }
    function getErrorObject(code, message, lineNumber) {
      return {
        err: {
          code,
          msg: message,
          line: lineNumber.line || lineNumber,
          col: lineNumber.col
        }
      };
    }
    function validateAttrName(attrName) {
      return util.isName(attrName);
    }
    function validateTagName(tagname) {
      return util.isName(tagname);
    }
    function getLineNumberForPosition(xmlData, index) {
      const lines = xmlData.substring(0, index).split(/\r?\n/);
      return {
        line: lines.length,
        col: lines[lines.length - 1].length + 1
      };
    }
    function getPositionFromMatch(match) {
      return match.startIndex + match[1].length;
    }
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js
var require_OptionsBuilder = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js"(exports) {
    var defaultOptions = {
      preserveOrder: false,
      attributeNamePrefix: "@_",
      attributesGroupName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      removeNSPrefix: false,
      allowBooleanAttributes: false,
      parseTagValue: true,
      parseAttributeValue: false,
      trimValues: true,
      cdataPropName: false,
      numberParseOptions: {
        hex: true,
        leadingZeros: true,
        eNotation: true
      },
      tagValueProcessor: function(tagName, val) {
        return val;
      },
      attributeValueProcessor: function(attrName, val) {
        return val;
      },
      stopNodes: [],
      alwaysCreateTextNode: false,
      isArray: () => false,
      commentPropName: false,
      unpairedTags: [],
      processEntities: true,
      htmlEntities: false,
      ignoreDeclaration: false,
      ignorePiTags: false,
      transformTagName: false,
      transformAttributeName: false
    };
    var buildOptions = function(options) {
      return Object.assign({}, defaultOptions, options);
    };
    exports.buildOptions = buildOptions;
    exports.defaultOptions = defaultOptions;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/xmlparser/xmlNode.js
var require_xmlNode = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/xmlparser/xmlNode.js"(exports, module) {
    "use strict";
    var XmlNode = class {
      constructor(tagname) {
        this.tagname = tagname;
        this.child = [];
        this[":@"] = {};
      }
      add(key, val) {
        if (key === "__proto__")
          key = "#__proto__";
        this.child.push({ [key]: val });
      }
      addChild(node) {
        if (node.tagname === "__proto__")
          node.tagname = "#__proto__";
        if (node[":@"] && Object.keys(node[":@"]).length > 0) {
          this.child.push({ [node.tagname]: node.child, [":@"]: node[":@"] });
        } else {
          this.child.push({ [node.tagname]: node.child });
        }
      }
    };
    module.exports = XmlNode;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js
var require_DocTypeReader = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js"(exports, module) {
    function readDocType(xmlData, i) {
      const entities = {};
      if (xmlData[i + 3] === "O" && xmlData[i + 4] === "C" && xmlData[i + 5] === "T" && xmlData[i + 6] === "Y" && xmlData[i + 7] === "P" && xmlData[i + 8] === "E") {
        i = i + 9;
        let angleBracketsCount = 1;
        let hasBody = false, entity = false, comment = false;
        let exp = "";
        for (; i < xmlData.length; i++) {
          if (xmlData[i] === "<" && !comment) {
            if (hasBody && xmlData[i + 1] === "!" && xmlData[i + 2] === "E" && xmlData[i + 3] === "N" && xmlData[i + 4] === "T" && xmlData[i + 5] === "I" && xmlData[i + 6] === "T" && xmlData[i + 7] === "Y") {
              i += 7;
              entity = true;
            } else if (hasBody && xmlData[i + 1] === "!" && xmlData[i + 2] === "E" && xmlData[i + 3] === "L" && xmlData[i + 4] === "E" && xmlData[i + 5] === "M" && xmlData[i + 6] === "E" && xmlData[i + 7] === "N" && xmlData[i + 8] === "T") {
              i += 8;
            } else if (hasBody && xmlData[i + 1] === "!" && xmlData[i + 2] === "A" && xmlData[i + 3] === "T" && xmlData[i + 4] === "T" && xmlData[i + 5] === "L" && xmlData[i + 6] === "I" && xmlData[i + 7] === "S" && xmlData[i + 8] === "T") {
              i += 8;
            } else if (hasBody && xmlData[i + 1] === "!" && xmlData[i + 2] === "N" && xmlData[i + 3] === "O" && xmlData[i + 4] === "T" && xmlData[i + 5] === "A" && xmlData[i + 6] === "T" && xmlData[i + 7] === "I" && xmlData[i + 8] === "O" && xmlData[i + 9] === "N") {
              i += 9;
            } else if (xmlData[i + 1] === "!" && xmlData[i + 2] === "-" && xmlData[i + 3] === "-") {
              comment = true;
            } else {
              throw new Error("Invalid DOCTYPE");
            }
            angleBracketsCount++;
            exp = "";
          } else if (xmlData[i] === ">") {
            if (comment) {
              if (xmlData[i - 1] === "-" && xmlData[i - 2] === "-") {
                comment = false;
                angleBracketsCount--;
              }
            } else {
              if (entity) {
                parseEntityExp(exp, entities);
                entity = false;
              }
              angleBracketsCount--;
            }
            if (angleBracketsCount === 0) {
              break;
            }
          } else if (xmlData[i] === "[") {
            hasBody = true;
          } else {
            exp += xmlData[i];
          }
        }
        if (angleBracketsCount !== 0) {
          throw new Error(`Unclosed DOCTYPE`);
        }
      } else {
        throw new Error(`Invalid Tag instead of DOCTYPE`);
      }
      return { entities, i };
    }
    var entityRegex = RegExp(`^\\s([a-zA-z0-0]+)[ 	](['"])([^&]+)\\2`);
    function parseEntityExp(exp, entities) {
      const match = entityRegex.exec(exp);
      if (match) {
        entities[match[1]] = {
          regx: RegExp(`&${match[1]};`, "g"),
          val: match[3]
        };
      }
    }
    module.exports = readDocType;
  }
});

// ../../node_modules/.pnpm/strnum@1.0.5/node_modules/strnum/strnum.js
var require_strnum = __commonJS({
  "../../node_modules/.pnpm/strnum@1.0.5/node_modules/strnum/strnum.js"(exports, module) {
    var hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;
    var numRegex = /^([\-\+])?(0*)(\.[0-9]+([eE]\-?[0-9]+)?|[0-9]+(\.[0-9]+([eE]\-?[0-9]+)?)?)$/;
    if (!Number.parseInt && window.parseInt) {
      Number.parseInt = window.parseInt;
    }
    if (!Number.parseFloat && window.parseFloat) {
      Number.parseFloat = window.parseFloat;
    }
    var consider = {
      hex: true,
      leadingZeros: true,
      decimalPoint: ".",
      eNotation: true
    };
    function toNumber(str, options = {}) {
      options = Object.assign({}, consider, options);
      if (!str || typeof str !== "string")
        return str;
      let trimmedStr = str.trim();
      if (options.skipLike !== void 0 && options.skipLike.test(trimmedStr))
        return str;
      else if (options.hex && hexRegex.test(trimmedStr)) {
        return Number.parseInt(trimmedStr, 16);
      } else {
        const match = numRegex.exec(trimmedStr);
        if (match) {
          const sign = match[1];
          const leadingZeros = match[2];
          let numTrimmedByZeros = trimZeros(match[3]);
          const eNotation = match[4] || match[6];
          if (!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== ".")
            return str;
          else if (!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== ".")
            return str;
          else {
            const num = Number(trimmedStr);
            const numStr = "" + num;
            if (numStr.search(/[eE]/) !== -1) {
              if (options.eNotation)
                return num;
              else
                return str;
            } else if (eNotation) {
              if (options.eNotation)
                return num;
              else
                return str;
            } else if (trimmedStr.indexOf(".") !== -1) {
              if (numStr === "0" && numTrimmedByZeros === "")
                return num;
              else if (numStr === numTrimmedByZeros)
                return num;
              else if (sign && numStr === "-" + numTrimmedByZeros)
                return num;
              else
                return str;
            }
            if (leadingZeros) {
              if (numTrimmedByZeros === numStr)
                return num;
              else if (sign + numTrimmedByZeros === numStr)
                return num;
              else
                return str;
            }
            if (trimmedStr === numStr)
              return num;
            else if (trimmedStr === sign + numStr)
              return num;
            return str;
          }
        } else {
          return str;
        }
      }
    }
    function trimZeros(numStr) {
      if (numStr && numStr.indexOf(".") !== -1) {
        numStr = numStr.replace(/0+$/, "");
        if (numStr === ".")
          numStr = "0";
        else if (numStr[0] === ".")
          numStr = "0" + numStr;
        else if (numStr[numStr.length - 1] === ".")
          numStr = numStr.substr(0, numStr.length - 1);
        return numStr;
      }
      return numStr;
    }
    module.exports = toNumber;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js
var require_OrderedObjParser = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js"(exports, module) {
    "use strict";
    var util = require_util2();
    var xmlNode = require_xmlNode();
    var readDocType = require_DocTypeReader();
    var toNumber = require_strnum();
    var regx = "<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)".replace(/NAME/g, util.nameRegexp);
    var OrderedObjParser = class {
      constructor(options) {
        this.options = options;
        this.currentNode = null;
        this.tagsNodeStack = [];
        this.docTypeEntities = {};
        this.lastEntities = {
          "apos": { regex: /&(apos|#39|#x27);/g, val: "'" },
          "gt": { regex: /&(gt|#62|#x3E);/g, val: ">" },
          "lt": { regex: /&(lt|#60|#x3C);/g, val: "<" },
          "quot": { regex: /&(quot|#34|#x22);/g, val: '"' }
        };
        this.ampEntity = { regex: /&(amp|#38|#x26);/g, val: "&" };
        this.htmlEntities = {
          "space": { regex: /&(nbsp|#160);/g, val: " " },
          "cent": { regex: /&(cent|#162);/g, val: "\xA2" },
          "pound": { regex: /&(pound|#163);/g, val: "\xA3" },
          "yen": { regex: /&(yen|#165);/g, val: "\xA5" },
          "euro": { regex: /&(euro|#8364);/g, val: "\u20AC" },
          "copyright": { regex: /&(copy|#169);/g, val: "\xA9" },
          "reg": { regex: /&(reg|#174);/g, val: "\xAE" },
          "inr": { regex: /&(inr|#8377);/g, val: "\u20B9" }
        };
        this.addExternalEntities = addExternalEntities;
        this.parseXml = parseXml;
        this.parseTextData = parseTextData;
        this.resolveNameSpace = resolveNameSpace;
        this.buildAttributesMap = buildAttributesMap;
        this.isItStopNode = isItStopNode;
        this.replaceEntitiesValue = replaceEntitiesValue;
        this.readStopNodeData = readStopNodeData;
        this.saveTextToParentTag = saveTextToParentTag;
      }
    };
    function addExternalEntities(externalEntities) {
      const entKeys = Object.keys(externalEntities);
      for (let i = 0; i < entKeys.length; i++) {
        const ent = entKeys[i];
        this.lastEntities[ent] = {
          regex: new RegExp("&" + ent + ";", "g"),
          val: externalEntities[ent]
        };
      }
    }
    function parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {
      if (val !== void 0) {
        if (this.options.trimValues && !dontTrim) {
          val = val.trim();
        }
        if (val.length > 0) {
          if (!escapeEntities)
            val = this.replaceEntitiesValue(val);
          const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);
          if (newval === null || newval === void 0) {
            return val;
          } else if (typeof newval !== typeof val || newval !== val) {
            return newval;
          } else if (this.options.trimValues) {
            return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);
          } else {
            const trimmedVal = val.trim();
            if (trimmedVal === val) {
              return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);
            } else {
              return val;
            }
          }
        }
      }
    }
    function resolveNameSpace(tagname) {
      if (this.options.removeNSPrefix) {
        const tags = tagname.split(":");
        const prefix = tagname.charAt(0) === "/" ? "/" : "";
        if (tags[0] === "xmlns") {
          return "";
        }
        if (tags.length === 2) {
          tagname = prefix + tags[1];
        }
      }
      return tagname;
    }
    var attrsRegx = new RegExp(`([^\\s=]+)\\s*(=\\s*(['"])([\\s\\S]*?)\\3)?`, "gm");
    function buildAttributesMap(attrStr, jPath) {
      if (!this.options.ignoreAttributes && typeof attrStr === "string") {
        const matches = util.getAllMatches(attrStr, attrsRegx);
        const len = matches.length;
        const attrs = {};
        for (let i = 0; i < len; i++) {
          const attrName = this.resolveNameSpace(matches[i][1]);
          let oldVal = matches[i][4];
          let aName = this.options.attributeNamePrefix + attrName;
          if (attrName.length) {
            if (this.options.transformAttributeName) {
              aName = this.options.transformAttributeName(aName);
            }
            if (aName === "__proto__")
              aName = "#__proto__";
            if (oldVal !== void 0) {
              if (this.options.trimValues) {
                oldVal = oldVal.trim();
              }
              oldVal = this.replaceEntitiesValue(oldVal);
              const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);
              if (newVal === null || newVal === void 0) {
                attrs[aName] = oldVal;
              } else if (typeof newVal !== typeof oldVal || newVal !== oldVal) {
                attrs[aName] = newVal;
              } else {
                attrs[aName] = parseValue(
                  oldVal,
                  this.options.parseAttributeValue,
                  this.options.numberParseOptions
                );
              }
            } else if (this.options.allowBooleanAttributes) {
              attrs[aName] = true;
            }
          }
        }
        if (!Object.keys(attrs).length) {
          return;
        }
        if (this.options.attributesGroupName) {
          const attrCollection = {};
          attrCollection[this.options.attributesGroupName] = attrs;
          return attrCollection;
        }
        return attrs;
      }
    }
    var parseXml = function(xmlData) {
      xmlData = xmlData.replace(/\r\n?/g, "\n");
      const xmlObj = new xmlNode("!xml");
      let currentNode = xmlObj;
      let textData = "";
      let jPath = "";
      for (let i = 0; i < xmlData.length; i++) {
        const ch = xmlData[i];
        if (ch === "<") {
          if (xmlData[i + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i, "Closing Tag is not closed.");
            let tagName = xmlData.substring(i + 2, closeIndex).trim();
            if (this.options.removeNSPrefix) {
              const colonIndex = tagName.indexOf(":");
              if (colonIndex !== -1) {
                tagName = tagName.substr(colonIndex + 1);
              }
            }
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode) {
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
            }
            jPath = jPath.substr(0, jPath.lastIndexOf("."));
            currentNode = this.tagsNodeStack.pop();
            textData = "";
            i = closeIndex;
          } else if (xmlData[i + 1] === "?") {
            let tagData = readTagExp(xmlData, i, false, "?>");
            if (!tagData)
              throw new Error("Pi Tag is not closed.");
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            if (this.options.ignoreDeclaration && tagData.tagName === "?xml" || this.options.ignorePiTags) {
            } else {
              const childNode = new xmlNode(tagData.tagName);
              childNode.add(this.options.textNodeName, "");
              if (tagData.tagName !== tagData.tagExp && tagData.attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagData.tagExp, jPath);
              }
              currentNode.addChild(childNode);
            }
            i = tagData.closeIndex + 1;
          } else if (xmlData.substr(i + 1, 3) === "!--") {
            const endIndex = findClosingIndex(xmlData, "-->", i + 4, "Comment is not closed.");
            if (this.options.commentPropName) {
              const comment = xmlData.substring(i + 4, endIndex - 2);
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
              currentNode.add(this.options.commentPropName, [{ [this.options.textNodeName]: comment }]);
            }
            i = endIndex;
          } else if (xmlData.substr(i + 1, 2) === "!D") {
            const result = readDocType(xmlData, i);
            this.docTypeEntities = result.entities;
            i = result.i;
          } else if (xmlData.substr(i + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i, "CDATA is not closed.") - 2;
            const tagExp = xmlData.substring(i + 9, closeIndex);
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            if (this.options.cdataPropName) {
              currentNode.add(this.options.cdataPropName, [{ [this.options.textNodeName]: tagExp }]);
            } else {
              let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true);
              if (val == void 0)
                val = "";
              currentNode.add(this.options.textNodeName, val);
            }
            i = closeIndex + 2;
          } else {
            let result = readTagExp(xmlData, i, this.options.removeNSPrefix);
            let tagName = result.tagName;
            let tagExp = result.tagExp;
            let attrExpPresent = result.attrExpPresent;
            let closeIndex = result.closeIndex;
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode && textData) {
              if (currentNode.tagname !== "!xml") {
                textData = this.saveTextToParentTag(textData, currentNode, jPath, false);
              }
            }
            if (tagName !== xmlObj.tagname) {
              jPath += jPath ? "." + tagName : tagName;
            }
            const lastTag = currentNode;
            if (lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1) {
              currentNode = this.tagsNodeStack.pop();
            }
            if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {
              let tagContent = "";
              if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                i = result.closeIndex;
              } else if (this.options.unpairedTags.indexOf(tagName) !== -1) {
                i = result.closeIndex;
              } else {
                const result2 = this.readStopNodeData(xmlData, tagName, closeIndex + 1);
                if (!result2)
                  throw new Error(`Unexpected end of ${tagName}`);
                i = result2.i;
                tagContent = result2.tagContent;
              }
              const childNode = new xmlNode(tagName);
              if (tagName !== tagExp && attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagExp, jPath);
              }
              if (tagContent) {
                tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);
              }
              jPath = jPath.substr(0, jPath.lastIndexOf("."));
              childNode.add(this.options.textNodeName, tagContent);
              currentNode.addChild(childNode);
            } else {
              if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                if (tagName[tagName.length - 1] === "/") {
                  tagName = tagName.substr(0, tagName.length - 1);
                  tagExp = tagName;
                } else {
                  tagExp = tagExp.substr(0, tagExp.length - 1);
                }
                if (this.options.transformTagName) {
                  tagName = this.options.transformTagName(tagName);
                }
                const childNode = new xmlNode(tagName);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[":@"] = this.buildAttributesMap(tagExp, jPath);
                }
                jPath = jPath.substr(0, jPath.lastIndexOf("."));
                currentNode.addChild(childNode);
              } else {
                const childNode = new xmlNode(tagName);
                this.tagsNodeStack.push(currentNode);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[":@"] = this.buildAttributesMap(tagExp, jPath);
                }
                currentNode.addChild(childNode);
                currentNode = childNode;
              }
              textData = "";
              i = closeIndex;
            }
          }
        } else {
          textData += xmlData[i];
        }
      }
      return xmlObj.child;
    };
    var replaceEntitiesValue = function(val) {
      if (this.options.processEntities) {
        for (let entityName in this.docTypeEntities) {
          const entity = this.docTypeEntities[entityName];
          val = val.replace(entity.regx, entity.val);
        }
        for (let entityName in this.lastEntities) {
          const entity = this.lastEntities[entityName];
          val = val.replace(entity.regex, entity.val);
        }
        if (this.options.htmlEntities) {
          for (let entityName in this.htmlEntities) {
            const entity = this.htmlEntities[entityName];
            val = val.replace(entity.regex, entity.val);
          }
        }
        val = val.replace(this.ampEntity.regex, this.ampEntity.val);
      }
      return val;
    };
    function saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {
      if (textData) {
        if (isLeafNode === void 0)
          isLeafNode = Object.keys(currentNode.child).length === 0;
        textData = this.parseTextData(
          textData,
          currentNode.tagname,
          jPath,
          false,
          currentNode[":@"] ? Object.keys(currentNode[":@"]).length !== 0 : false,
          isLeafNode
        );
        if (textData !== void 0 && textData !== "")
          currentNode.add(this.options.textNodeName, textData);
        textData = "";
      }
      return textData;
    }
    function isItStopNode(stopNodes, jPath, currentTagName) {
      const allNodesExp = "*." + currentTagName;
      for (const stopNodePath in stopNodes) {
        const stopNodeExp = stopNodes[stopNodePath];
        if (allNodesExp === stopNodeExp || jPath === stopNodeExp)
          return true;
      }
      return false;
    }
    function tagExpWithClosingIndex(xmlData, i, closingChar = ">") {
      let attrBoundary;
      let tagExp = "";
      for (let index = i; index < xmlData.length; index++) {
        let ch = xmlData[index];
        if (attrBoundary) {
          if (ch === attrBoundary)
            attrBoundary = "";
        } else if (ch === '"' || ch === "'") {
          attrBoundary = ch;
        } else if (ch === closingChar[0]) {
          if (closingChar[1]) {
            if (xmlData[index + 1] === closingChar[1]) {
              return {
                data: tagExp,
                index
              };
            }
          } else {
            return {
              data: tagExp,
              index
            };
          }
        } else if (ch === "	") {
          ch = " ";
        }
        tagExp += ch;
      }
    }
    function findClosingIndex(xmlData, str, i, errMsg) {
      const closingIndex = xmlData.indexOf(str, i);
      if (closingIndex === -1) {
        throw new Error(errMsg);
      } else {
        return closingIndex + str.length - 1;
      }
    }
    function readTagExp(xmlData, i, removeNSPrefix, closingChar = ">") {
      const result = tagExpWithClosingIndex(xmlData, i + 1, closingChar);
      if (!result)
        return;
      let tagExp = result.data;
      const closeIndex = result.index;
      const separatorIndex = tagExp.search(/\s/);
      let tagName = tagExp;
      let attrExpPresent = true;
      if (separatorIndex !== -1) {
        tagName = tagExp.substr(0, separatorIndex).replace(/\s\s*$/, "");
        tagExp = tagExp.substr(separatorIndex + 1);
      }
      if (removeNSPrefix) {
        const colonIndex = tagName.indexOf(":");
        if (colonIndex !== -1) {
          tagName = tagName.substr(colonIndex + 1);
          attrExpPresent = tagName !== result.data.substr(colonIndex + 1);
        }
      }
      return {
        tagName,
        tagExp,
        closeIndex,
        attrExpPresent
      };
    }
    function readStopNodeData(xmlData, tagName, i) {
      const startIndex = i;
      let openTagCount = 1;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === "<") {
          if (xmlData[i + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i, `${tagName} is not closed`);
            let closeTagName = xmlData.substring(i + 2, closeIndex).trim();
            if (closeTagName === tagName) {
              openTagCount--;
              if (openTagCount === 0) {
                return {
                  tagContent: xmlData.substring(startIndex, i),
                  i: closeIndex
                };
              }
            }
            i = closeIndex;
          } else if (xmlData[i + 1] === "?") {
            const closeIndex = findClosingIndex(xmlData, "?>", i + 1, "StopNode is not closed.");
            i = closeIndex;
          } else if (xmlData.substr(i + 1, 3) === "!--") {
            const closeIndex = findClosingIndex(xmlData, "-->", i + 3, "StopNode is not closed.");
            i = closeIndex;
          } else if (xmlData.substr(i + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i, "StopNode is not closed.") - 2;
            i = closeIndex;
          } else {
            const tagData = readTagExp(xmlData, i, ">");
            if (tagData) {
              const openTagName = tagData && tagData.tagName;
              if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length - 1] !== "/") {
                openTagCount++;
              }
              i = tagData.closeIndex;
            }
          }
        }
      }
    }
    function parseValue(val, shouldParse, options) {
      if (shouldParse && typeof val === "string") {
        const newval = val.trim();
        if (newval === "true")
          return true;
        else if (newval === "false")
          return false;
        else
          return toNumber(val, options);
      } else {
        if (util.isExist(val)) {
          return val;
        } else {
          return "";
        }
      }
    }
    module.exports = OrderedObjParser;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/xmlparser/node2json.js
var require_node2json = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/xmlparser/node2json.js"(exports) {
    "use strict";
    function prettify(node, options) {
      return compress(node, options);
    }
    function compress(arr, options, jPath) {
      let text;
      const compressedObj = {};
      for (let i = 0; i < arr.length; i++) {
        const tagObj = arr[i];
        const property = propName(tagObj);
        let newJpath = "";
        if (jPath === void 0)
          newJpath = property;
        else
          newJpath = jPath + "." + property;
        if (property === options.textNodeName) {
          if (text === void 0)
            text = tagObj[property];
          else
            text += "" + tagObj[property];
        } else if (property === void 0) {
          continue;
        } else if (tagObj[property]) {
          let val = compress(tagObj[property], options, newJpath);
          const isLeaf = isLeafTag(val, options);
          if (tagObj[":@"]) {
            assignAttributes(val, tagObj[":@"], newJpath, options);
          } else if (Object.keys(val).length === 1 && val[options.textNodeName] !== void 0 && !options.alwaysCreateTextNode) {
            val = val[options.textNodeName];
          } else if (Object.keys(val).length === 0) {
            if (options.alwaysCreateTextNode)
              val[options.textNodeName] = "";
            else
              val = "";
          }
          if (compressedObj[property] !== void 0 && compressedObj.hasOwnProperty(property)) {
            if (!Array.isArray(compressedObj[property])) {
              compressedObj[property] = [compressedObj[property]];
            }
            compressedObj[property].push(val);
          } else {
            if (options.isArray(property, newJpath, isLeaf)) {
              compressedObj[property] = [val];
            } else {
              compressedObj[property] = val;
            }
          }
        }
      }
      if (typeof text === "string") {
        if (text.length > 0)
          compressedObj[options.textNodeName] = text;
      } else if (text !== void 0)
        compressedObj[options.textNodeName] = text;
      return compressedObj;
    }
    function propName(obj) {
      const keys = Object.keys(obj);
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        if (key !== ":@")
          return key;
      }
    }
    function assignAttributes(obj, attrMap, jpath, options) {
      if (attrMap) {
        const keys = Object.keys(attrMap);
        const len = keys.length;
        for (let i = 0; i < len; i++) {
          const atrrName = keys[i];
          if (options.isArray(atrrName, jpath + "." + atrrName, true, true)) {
            obj[atrrName] = [attrMap[atrrName]];
          } else {
            obj[atrrName] = attrMap[atrrName];
          }
        }
      }
    }
    function isLeafTag(obj, options) {
      const propCount = Object.keys(obj).length;
      if (propCount === 0 || propCount === 1 && obj[options.textNodeName])
        return true;
      return false;
    }
    exports.prettify = prettify;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/xmlparser/XMLParser.js
var require_XMLParser = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/xmlparser/XMLParser.js"(exports, module) {
    var { buildOptions } = require_OptionsBuilder();
    var OrderedObjParser = require_OrderedObjParser();
    var { prettify } = require_node2json();
    var validator = require_validator();
    var XMLParser = class {
      constructor(options) {
        this.externalEntities = {};
        this.options = buildOptions(options);
      }
      parse(xmlData, validationOption) {
        if (typeof xmlData === "string") {
        } else if (xmlData.toString) {
          xmlData = xmlData.toString();
        } else {
          throw new Error("XML data is accepted in String or Bytes[] form.");
        }
        if (validationOption) {
          if (validationOption === true)
            validationOption = {};
          const result = validator.validate(xmlData, validationOption);
          if (result !== true) {
            throw Error(`${result.err.msg}:${result.err.line}:${result.err.col}`);
          }
        }
        const orderedObjParser = new OrderedObjParser(this.options);
        orderedObjParser.addExternalEntities(this.externalEntities);
        const orderedResult = orderedObjParser.parseXml(xmlData);
        if (this.options.preserveOrder || orderedResult === void 0)
          return orderedResult;
        else
          return prettify(orderedResult, this.options);
      }
      addEntity(key, value) {
        if (value.indexOf("&") !== -1) {
          throw new Error("Entity value can't have '&'");
        } else if (key.indexOf("&") !== -1 || key.indexOf(";") !== -1) {
          throw new Error("An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'");
        } else if (value === "&") {
          throw new Error("An entity with value '&' is not permitted");
        } else {
          this.externalEntities[key] = value;
        }
      }
    };
    module.exports = XMLParser;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js
var require_orderedJs2Xml = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js"(exports, module) {
    var EOL = "\n";
    function toXml(jArray, options) {
      let indentation = "";
      if (options.format && options.indentBy.length > 0) {
        indentation = EOL;
      }
      return arrToStr(jArray, options, "", indentation);
    }
    function arrToStr(arr, options, jPath, indentation) {
      let xmlStr = "";
      let isPreviousElementTag = false;
      for (let i = 0; i < arr.length; i++) {
        const tagObj = arr[i];
        const tagName = propName(tagObj);
        let newJPath = "";
        if (jPath.length === 0)
          newJPath = tagName;
        else
          newJPath = `${jPath}.${tagName}`;
        if (tagName === options.textNodeName) {
          let tagText = tagObj[tagName];
          if (!isStopNode(newJPath, options)) {
            tagText = options.tagValueProcessor(tagName, tagText);
            tagText = replaceEntitiesValue(tagText, options);
          }
          if (isPreviousElementTag) {
            xmlStr += indentation;
          }
          xmlStr += tagText;
          isPreviousElementTag = false;
          continue;
        } else if (tagName === options.cdataPropName) {
          if (isPreviousElementTag) {
            xmlStr += indentation;
          }
          xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;
          isPreviousElementTag = false;
          continue;
        } else if (tagName === options.commentPropName) {
          xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;
          isPreviousElementTag = true;
          continue;
        } else if (tagName[0] === "?") {
          const attStr2 = attr_to_str(tagObj[":@"], options);
          const tempInd = tagName === "?xml" ? "" : indentation;
          let piTextNodeName = tagObj[tagName][0][options.textNodeName];
          piTextNodeName = piTextNodeName.length !== 0 ? " " + piTextNodeName : "";
          xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr2}?>`;
          isPreviousElementTag = true;
          continue;
        }
        let newIdentation = indentation;
        if (newIdentation !== "") {
          newIdentation += options.indentBy;
        }
        const attStr = attr_to_str(tagObj[":@"], options);
        const tagStart = indentation + `<${tagName}${attStr}`;
        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);
        if (options.unpairedTags.indexOf(tagName) !== -1) {
          if (options.suppressUnpairedNode)
            xmlStr += tagStart + ">";
          else
            xmlStr += tagStart + "/>";
        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {
          xmlStr += tagStart + "/>";
        } else if (tagValue && tagValue.endsWith(">")) {
          xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;
        } else {
          xmlStr += tagStart + ">";
          if (tagValue && indentation !== "" && (tagValue.includes("/>") || tagValue.includes("</"))) {
            xmlStr += indentation + options.indentBy + tagValue + indentation;
          } else {
            xmlStr += tagValue;
          }
          xmlStr += `</${tagName}>`;
        }
        isPreviousElementTag = true;
      }
      return xmlStr;
    }
    function propName(obj) {
      const keys = Object.keys(obj);
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        if (key !== ":@")
          return key;
      }
    }
    function attr_to_str(attrMap, options) {
      let attrStr = "";
      if (attrMap && !options.ignoreAttributes) {
        for (let attr in attrMap) {
          let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);
          attrVal = replaceEntitiesValue(attrVal, options);
          if (attrVal === true && options.suppressBooleanAttributes) {
            attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;
          } else {
            attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}="${attrVal}"`;
          }
        }
      }
      return attrStr;
    }
    function isStopNode(jPath, options) {
      jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);
      let tagName = jPath.substr(jPath.lastIndexOf(".") + 1);
      for (let index in options.stopNodes) {
        if (options.stopNodes[index] === jPath || options.stopNodes[index] === "*." + tagName)
          return true;
      }
      return false;
    }
    function replaceEntitiesValue(textValue, options) {
      if (textValue && textValue.length > 0 && options.processEntities) {
        for (let i = 0; i < options.entities.length; i++) {
          const entity = options.entities[i];
          textValue = textValue.replace(entity.regex, entity.val);
        }
      }
      return textValue;
    }
    module.exports = toXml;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js
var require_json2xml = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js"(exports, module) {
    "use strict";
    var buildFromOrderedJs = require_orderedJs2Xml();
    var defaultOptions = {
      attributeNamePrefix: "@_",
      attributesGroupName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      cdataPropName: false,
      format: false,
      indentBy: "  ",
      suppressEmptyNode: false,
      suppressUnpairedNode: true,
      suppressBooleanAttributes: true,
      tagValueProcessor: function(key, a) {
        return a;
      },
      attributeValueProcessor: function(attrName, a) {
        return a;
      },
      preserveOrder: false,
      commentPropName: false,
      unpairedTags: [],
      entities: [
        { regex: new RegExp("&", "g"), val: "&amp;" },
        { regex: new RegExp(">", "g"), val: "&gt;" },
        { regex: new RegExp("<", "g"), val: "&lt;" },
        { regex: new RegExp("'", "g"), val: "&apos;" },
        { regex: new RegExp('"', "g"), val: "&quot;" }
      ],
      processEntities: true,
      stopNodes: []
    };
    function Builder(options) {
      this.options = Object.assign({}, defaultOptions, options);
      if (this.options.ignoreAttributes || this.options.attributesGroupName) {
        this.isAttribute = function() {
          return false;
        };
      } else {
        this.attrPrefixLen = this.options.attributeNamePrefix.length;
        this.isAttribute = isAttribute;
      }
      this.processTextOrObjNode = processTextOrObjNode;
      if (this.options.format) {
        this.indentate = indentate;
        this.tagEndChar = ">\n";
        this.newLine = "\n";
      } else {
        this.indentate = function() {
          return "";
        };
        this.tagEndChar = ">";
        this.newLine = "";
      }
    }
    Builder.prototype.build = function(jObj) {
      if (this.options.preserveOrder) {
        return buildFromOrderedJs(jObj, this.options);
      } else {
        if (Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1) {
          jObj = {
            [this.options.arrayNodeName]: jObj
          };
        }
        return this.j2x(jObj, 0).val;
      }
    };
    Builder.prototype.j2x = function(jObj, level) {
      let attrStr = "";
      let val = "";
      for (let key in jObj) {
        if (typeof jObj[key] === "undefined") {
        } else if (jObj[key] === null) {
          if (key[0] === "?")
            val += this.indentate(level) + "<" + key + "?" + this.tagEndChar;
          else
            val += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
        } else if (jObj[key] instanceof Date) {
          val += this.buildTextValNode(jObj[key], key, "", level);
        } else if (typeof jObj[key] !== "object") {
          const attr = this.isAttribute(key);
          if (attr) {
            attrStr += this.buildAttrPairStr(attr, "" + jObj[key]);
          } else {
            if (key === this.options.textNodeName) {
              let newval = this.options.tagValueProcessor(key, "" + jObj[key]);
              val += this.replaceEntitiesValue(newval);
            } else {
              val += this.buildTextValNode(jObj[key], key, "", level);
            }
          }
        } else if (Array.isArray(jObj[key])) {
          const arrLen = jObj[key].length;
          for (let j = 0; j < arrLen; j++) {
            const item = jObj[key][j];
            if (typeof item === "undefined") {
            } else if (item === null) {
              if (key[0] === "?")
                val += this.indentate(level) + "<" + key + "?" + this.tagEndChar;
              else
                val += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
            } else if (typeof item === "object") {
              val += this.processTextOrObjNode(item, key, level);
            } else {
              val += this.buildTextValNode(item, key, "", level);
            }
          }
        } else {
          if (this.options.attributesGroupName && key === this.options.attributesGroupName) {
            const Ks = Object.keys(jObj[key]);
            const L = Ks.length;
            for (let j = 0; j < L; j++) {
              attrStr += this.buildAttrPairStr(Ks[j], "" + jObj[key][Ks[j]]);
            }
          } else {
            val += this.processTextOrObjNode(jObj[key], key, level);
          }
        }
      }
      return { attrStr, val };
    };
    Builder.prototype.buildAttrPairStr = function(attrName, val) {
      val = this.options.attributeValueProcessor(attrName, "" + val);
      val = this.replaceEntitiesValue(val);
      if (this.options.suppressBooleanAttributes && val === "true") {
        return " " + attrName;
      } else
        return " " + attrName + '="' + val + '"';
    };
    function processTextOrObjNode(object, key, level) {
      const result = this.j2x(object, level + 1);
      if (object[this.options.textNodeName] !== void 0 && Object.keys(object).length === 1) {
        return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);
      } else {
        return this.buildObjectNode(result.val, key, result.attrStr, level);
      }
    }
    Builder.prototype.buildObjectNode = function(val, key, attrStr, level) {
      if (val === "") {
        if (key[0] === "?")
          return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
        else {
          return this.indentate(level) + "<" + key + attrStr + this.closeTag(key) + this.tagEndChar;
        }
      } else {
        let tagEndExp = "</" + key + this.tagEndChar;
        let piClosingChar = "";
        if (key[0] === "?") {
          piClosingChar = "?";
          tagEndExp = "";
        }
        if (attrStr && val.indexOf("<") === -1) {
          return this.indentate(level) + "<" + key + attrStr + piClosingChar + ">" + val + tagEndExp;
        } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {
          return this.indentate(level) + `<!--${val}-->` + this.newLine;
        } else {
          return this.indentate(level) + "<" + key + attrStr + piClosingChar + this.tagEndChar + val + this.indentate(level) + tagEndExp;
        }
      }
    };
    Builder.prototype.closeTag = function(key) {
      let closeTag = "";
      if (this.options.unpairedTags.indexOf(key) !== -1) {
        if (!this.options.suppressUnpairedNode)
          closeTag = "/";
      } else if (this.options.suppressEmptyNode) {
        closeTag = "/";
      } else {
        closeTag = `></${key}`;
      }
      return closeTag;
    };
    Builder.prototype.buildTextValNode = function(val, key, attrStr, level) {
      if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {
        return this.indentate(level) + `<![CDATA[${val}]]>` + this.newLine;
      } else if (this.options.commentPropName !== false && key === this.options.commentPropName) {
        return this.indentate(level) + `<!--${val}-->` + this.newLine;
      } else if (key[0] === "?") {
        return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
      } else {
        let textValue = this.options.tagValueProcessor(key, val);
        textValue = this.replaceEntitiesValue(textValue);
        if (textValue === "") {
          return this.indentate(level) + "<" + key + attrStr + this.closeTag(key) + this.tagEndChar;
        } else {
          return this.indentate(level) + "<" + key + attrStr + ">" + textValue + "</" + key + this.tagEndChar;
        }
      }
    };
    Builder.prototype.replaceEntitiesValue = function(textValue) {
      if (textValue && textValue.length > 0 && this.options.processEntities) {
        for (let i = 0; i < this.options.entities.length; i++) {
          const entity = this.options.entities[i];
          textValue = textValue.replace(entity.regex, entity.val);
        }
      }
      return textValue;
    };
    function indentate(level) {
      return this.options.indentBy.repeat(level);
    }
    function isAttribute(name) {
      if (name.startsWith(this.options.attributeNamePrefix)) {
        return name.substr(this.attrPrefixLen);
      } else {
        return false;
      }
    }
    module.exports = Builder;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/fxp.js
var require_fxp = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/fxp.js"(exports, module) {
    "use strict";
    var validator = require_validator();
    var XMLParser = require_XMLParser();
    var XMLBuilder = require_json2xml();
    module.exports = {
      XMLParser,
      XMLValidator: validator,
      XMLBuilder
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/models/models_1.js
var require_models_1 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/models/models_1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UploadSSHPublicKeyResponseFilterSensitiveLog = exports.UploadSSHPublicKeyRequestFilterSensitiveLog = exports.UploadSigningCertificateResponseFilterSensitiveLog = exports.UploadSigningCertificateRequestFilterSensitiveLog = exports.UploadServerCertificateResponseFilterSensitiveLog = exports.UploadServerCertificateRequestFilterSensitiveLog = exports.UpdateUserRequestFilterSensitiveLog = exports.UpdateSSHPublicKeyRequestFilterSensitiveLog = exports.UpdateSigningCertificateRequestFilterSensitiveLog = exports.UpdateServiceSpecificCredentialRequestFilterSensitiveLog = exports.UpdateServerCertificateRequestFilterSensitiveLog = exports.UpdateSAMLProviderResponseFilterSensitiveLog = exports.UpdateSAMLProviderRequestFilterSensitiveLog = exports.UpdateRoleDescriptionResponseFilterSensitiveLog = exports.UpdateRoleDescriptionRequestFilterSensitiveLog = exports.UpdateRoleResponseFilterSensitiveLog = exports.UpdateRoleRequestFilterSensitiveLog = exports.UpdateOpenIDConnectProviderThumbprintRequestFilterSensitiveLog = exports.UpdateLoginProfileRequestFilterSensitiveLog = exports.UpdateGroupRequestFilterSensitiveLog = exports.UpdateAssumeRolePolicyRequestFilterSensitiveLog = exports.UpdateAccountPasswordPolicyRequestFilterSensitiveLog = exports.UpdateAccessKeyRequestFilterSensitiveLog = exports.UntagUserRequestFilterSensitiveLog = exports.UntagServerCertificateRequestFilterSensitiveLog = exports.UntagSAMLProviderRequestFilterSensitiveLog = exports.UntagRoleRequestFilterSensitiveLog = exports.UntagPolicyRequestFilterSensitiveLog = exports.InvalidPublicKeyException = exports.DuplicateSSHPublicKeyException = exports.InvalidCertificateException = exports.DuplicateCertificateException = exports.MalformedCertificateException = exports.KeyPairMismatchException = void 0;
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var IAMServiceException_1 = require_IAMServiceException();
    var KeyPairMismatchException = class extends IAMServiceException_1.IAMServiceException {
      constructor(opts) {
        super({
          name: "KeyPairMismatchException",
          $fault: "client",
          ...opts
        });
        this.name = "KeyPairMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, KeyPairMismatchException.prototype);
      }
    };
    exports.KeyPairMismatchException = KeyPairMismatchException;
    var MalformedCertificateException = class extends IAMServiceException_1.IAMServiceException {
      constructor(opts) {
        super({
          name: "MalformedCertificateException",
          $fault: "client",
          ...opts
        });
        this.name = "MalformedCertificateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MalformedCertificateException.prototype);
      }
    };
    exports.MalformedCertificateException = MalformedCertificateException;
    var DuplicateCertificateException = class extends IAMServiceException_1.IAMServiceException {
      constructor(opts) {
        super({
          name: "DuplicateCertificateException",
          $fault: "client",
          ...opts
        });
        this.name = "DuplicateCertificateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DuplicateCertificateException.prototype);
      }
    };
    exports.DuplicateCertificateException = DuplicateCertificateException;
    var InvalidCertificateException = class extends IAMServiceException_1.IAMServiceException {
      constructor(opts) {
        super({
          name: "InvalidCertificateException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidCertificateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidCertificateException.prototype);
      }
    };
    exports.InvalidCertificateException = InvalidCertificateException;
    var DuplicateSSHPublicKeyException = class extends IAMServiceException_1.IAMServiceException {
      constructor(opts) {
        super({
          name: "DuplicateSSHPublicKeyException",
          $fault: "client",
          ...opts
        });
        this.name = "DuplicateSSHPublicKeyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DuplicateSSHPublicKeyException.prototype);
      }
    };
    exports.DuplicateSSHPublicKeyException = DuplicateSSHPublicKeyException;
    var InvalidPublicKeyException = class extends IAMServiceException_1.IAMServiceException {
      constructor(opts) {
        super({
          name: "InvalidPublicKeyException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidPublicKeyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidPublicKeyException.prototype);
      }
    };
    exports.InvalidPublicKeyException = InvalidPublicKeyException;
    var UntagPolicyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UntagPolicyRequestFilterSensitiveLog = UntagPolicyRequestFilterSensitiveLog;
    var UntagRoleRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UntagRoleRequestFilterSensitiveLog = UntagRoleRequestFilterSensitiveLog;
    var UntagSAMLProviderRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UntagSAMLProviderRequestFilterSensitiveLog = UntagSAMLProviderRequestFilterSensitiveLog;
    var UntagServerCertificateRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UntagServerCertificateRequestFilterSensitiveLog = UntagServerCertificateRequestFilterSensitiveLog;
    var UntagUserRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UntagUserRequestFilterSensitiveLog = UntagUserRequestFilterSensitiveLog;
    var UpdateAccessKeyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateAccessKeyRequestFilterSensitiveLog = UpdateAccessKeyRequestFilterSensitiveLog;
    var UpdateAccountPasswordPolicyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateAccountPasswordPolicyRequestFilterSensitiveLog = UpdateAccountPasswordPolicyRequestFilterSensitiveLog;
    var UpdateAssumeRolePolicyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateAssumeRolePolicyRequestFilterSensitiveLog = UpdateAssumeRolePolicyRequestFilterSensitiveLog;
    var UpdateGroupRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateGroupRequestFilterSensitiveLog = UpdateGroupRequestFilterSensitiveLog;
    var UpdateLoginProfileRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Password && { Password: smithy_client_1.SENSITIVE_STRING }
    });
    exports.UpdateLoginProfileRequestFilterSensitiveLog = UpdateLoginProfileRequestFilterSensitiveLog;
    var UpdateOpenIDConnectProviderThumbprintRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateOpenIDConnectProviderThumbprintRequestFilterSensitiveLog = UpdateOpenIDConnectProviderThumbprintRequestFilterSensitiveLog;
    var UpdateRoleRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateRoleRequestFilterSensitiveLog = UpdateRoleRequestFilterSensitiveLog;
    var UpdateRoleResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateRoleResponseFilterSensitiveLog = UpdateRoleResponseFilterSensitiveLog;
    var UpdateRoleDescriptionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateRoleDescriptionRequestFilterSensitiveLog = UpdateRoleDescriptionRequestFilterSensitiveLog;
    var UpdateRoleDescriptionResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateRoleDescriptionResponseFilterSensitiveLog = UpdateRoleDescriptionResponseFilterSensitiveLog;
    var UpdateSAMLProviderRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateSAMLProviderRequestFilterSensitiveLog = UpdateSAMLProviderRequestFilterSensitiveLog;
    var UpdateSAMLProviderResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateSAMLProviderResponseFilterSensitiveLog = UpdateSAMLProviderResponseFilterSensitiveLog;
    var UpdateServerCertificateRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateServerCertificateRequestFilterSensitiveLog = UpdateServerCertificateRequestFilterSensitiveLog;
    var UpdateServiceSpecificCredentialRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateServiceSpecificCredentialRequestFilterSensitiveLog = UpdateServiceSpecificCredentialRequestFilterSensitiveLog;
    var UpdateSigningCertificateRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateSigningCertificateRequestFilterSensitiveLog = UpdateSigningCertificateRequestFilterSensitiveLog;
    var UpdateSSHPublicKeyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateSSHPublicKeyRequestFilterSensitiveLog = UpdateSSHPublicKeyRequestFilterSensitiveLog;
    var UpdateUserRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateUserRequestFilterSensitiveLog = UpdateUserRequestFilterSensitiveLog;
    var UploadServerCertificateRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.PrivateKey && { PrivateKey: smithy_client_1.SENSITIVE_STRING }
    });
    exports.UploadServerCertificateRequestFilterSensitiveLog = UploadServerCertificateRequestFilterSensitiveLog;
    var UploadServerCertificateResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UploadServerCertificateResponseFilterSensitiveLog = UploadServerCertificateResponseFilterSensitiveLog;
    var UploadSigningCertificateRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UploadSigningCertificateRequestFilterSensitiveLog = UploadSigningCertificateRequestFilterSensitiveLog;
    var UploadSigningCertificateResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UploadSigningCertificateResponseFilterSensitiveLog = UploadSigningCertificateResponseFilterSensitiveLog;
    var UploadSSHPublicKeyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UploadSSHPublicKeyRequestFilterSensitiveLog = UploadSSHPublicKeyRequestFilterSensitiveLog;
    var UploadSSHPublicKeyResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UploadSSHPublicKeyResponseFilterSensitiveLog = UploadSSHPublicKeyResponseFilterSensitiveLog;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/protocols/Aws_query.js
var require_Aws_query = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/protocols/Aws_query.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.serializeAws_queryGenerateCredentialReportCommand = exports.serializeAws_queryEnableMFADeviceCommand = exports.serializeAws_queryDetachUserPolicyCommand = exports.serializeAws_queryDetachRolePolicyCommand = exports.serializeAws_queryDetachGroupPolicyCommand = exports.serializeAws_queryDeleteVirtualMFADeviceCommand = exports.serializeAws_queryDeleteUserPolicyCommand = exports.serializeAws_queryDeleteUserPermissionsBoundaryCommand = exports.serializeAws_queryDeleteUserCommand = exports.serializeAws_queryDeleteSSHPublicKeyCommand = exports.serializeAws_queryDeleteSigningCertificateCommand = exports.serializeAws_queryDeleteServiceSpecificCredentialCommand = exports.serializeAws_queryDeleteServiceLinkedRoleCommand = exports.serializeAws_queryDeleteServerCertificateCommand = exports.serializeAws_queryDeleteSAMLProviderCommand = exports.serializeAws_queryDeleteRolePolicyCommand = exports.serializeAws_queryDeleteRolePermissionsBoundaryCommand = exports.serializeAws_queryDeleteRoleCommand = exports.serializeAws_queryDeletePolicyVersionCommand = exports.serializeAws_queryDeletePolicyCommand = exports.serializeAws_queryDeleteOpenIDConnectProviderCommand = exports.serializeAws_queryDeleteLoginProfileCommand = exports.serializeAws_queryDeleteInstanceProfileCommand = exports.serializeAws_queryDeleteGroupPolicyCommand = exports.serializeAws_queryDeleteGroupCommand = exports.serializeAws_queryDeleteAccountPasswordPolicyCommand = exports.serializeAws_queryDeleteAccountAliasCommand = exports.serializeAws_queryDeleteAccessKeyCommand = exports.serializeAws_queryDeactivateMFADeviceCommand = exports.serializeAws_queryCreateVirtualMFADeviceCommand = exports.serializeAws_queryCreateUserCommand = exports.serializeAws_queryCreateServiceSpecificCredentialCommand = exports.serializeAws_queryCreateServiceLinkedRoleCommand = exports.serializeAws_queryCreateSAMLProviderCommand = exports.serializeAws_queryCreateRoleCommand = exports.serializeAws_queryCreatePolicyVersionCommand = exports.serializeAws_queryCreatePolicyCommand = exports.serializeAws_queryCreateOpenIDConnectProviderCommand = exports.serializeAws_queryCreateLoginProfileCommand = exports.serializeAws_queryCreateInstanceProfileCommand = exports.serializeAws_queryCreateGroupCommand = exports.serializeAws_queryCreateAccountAliasCommand = exports.serializeAws_queryCreateAccessKeyCommand = exports.serializeAws_queryChangePasswordCommand = exports.serializeAws_queryAttachUserPolicyCommand = exports.serializeAws_queryAttachRolePolicyCommand = exports.serializeAws_queryAttachGroupPolicyCommand = exports.serializeAws_queryAddUserToGroupCommand = exports.serializeAws_queryAddRoleToInstanceProfileCommand = exports.serializeAws_queryAddClientIDToOpenIDConnectProviderCommand = void 0;
    exports.serializeAws_queryListRoleTagsCommand = exports.serializeAws_queryListRolesCommand = exports.serializeAws_queryListRolePoliciesCommand = exports.serializeAws_queryListPolicyVersionsCommand = exports.serializeAws_queryListPolicyTagsCommand = exports.serializeAws_queryListPoliciesGrantingServiceAccessCommand = exports.serializeAws_queryListPoliciesCommand = exports.serializeAws_queryListOpenIDConnectProviderTagsCommand = exports.serializeAws_queryListOpenIDConnectProvidersCommand = exports.serializeAws_queryListMFADeviceTagsCommand = exports.serializeAws_queryListMFADevicesCommand = exports.serializeAws_queryListInstanceProfileTagsCommand = exports.serializeAws_queryListInstanceProfilesForRoleCommand = exports.serializeAws_queryListInstanceProfilesCommand = exports.serializeAws_queryListGroupsForUserCommand = exports.serializeAws_queryListGroupsCommand = exports.serializeAws_queryListGroupPoliciesCommand = exports.serializeAws_queryListEntitiesForPolicyCommand = exports.serializeAws_queryListAttachedUserPoliciesCommand = exports.serializeAws_queryListAttachedRolePoliciesCommand = exports.serializeAws_queryListAttachedGroupPoliciesCommand = exports.serializeAws_queryListAccountAliasesCommand = exports.serializeAws_queryListAccessKeysCommand = exports.serializeAws_queryGetUserPolicyCommand = exports.serializeAws_queryGetUserCommand = exports.serializeAws_queryGetSSHPublicKeyCommand = exports.serializeAws_queryGetServiceLinkedRoleDeletionStatusCommand = exports.serializeAws_queryGetServiceLastAccessedDetailsWithEntitiesCommand = exports.serializeAws_queryGetServiceLastAccessedDetailsCommand = exports.serializeAws_queryGetServerCertificateCommand = exports.serializeAws_queryGetSAMLProviderCommand = exports.serializeAws_queryGetRolePolicyCommand = exports.serializeAws_queryGetRoleCommand = exports.serializeAws_queryGetPolicyVersionCommand = exports.serializeAws_queryGetPolicyCommand = exports.serializeAws_queryGetOrganizationsAccessReportCommand = exports.serializeAws_queryGetOpenIDConnectProviderCommand = exports.serializeAws_queryGetLoginProfileCommand = exports.serializeAws_queryGetInstanceProfileCommand = exports.serializeAws_queryGetGroupPolicyCommand = exports.serializeAws_queryGetGroupCommand = exports.serializeAws_queryGetCredentialReportCommand = exports.serializeAws_queryGetContextKeysForPrincipalPolicyCommand = exports.serializeAws_queryGetContextKeysForCustomPolicyCommand = exports.serializeAws_queryGetAccountSummaryCommand = exports.serializeAws_queryGetAccountPasswordPolicyCommand = exports.serializeAws_queryGetAccountAuthorizationDetailsCommand = exports.serializeAws_queryGetAccessKeyLastUsedCommand = exports.serializeAws_queryGenerateServiceLastAccessedDetailsCommand = exports.serializeAws_queryGenerateOrganizationsAccessReportCommand = void 0;
    exports.serializeAws_queryUpdateSAMLProviderCommand = exports.serializeAws_queryUpdateRoleDescriptionCommand = exports.serializeAws_queryUpdateRoleCommand = exports.serializeAws_queryUpdateOpenIDConnectProviderThumbprintCommand = exports.serializeAws_queryUpdateLoginProfileCommand = exports.serializeAws_queryUpdateGroupCommand = exports.serializeAws_queryUpdateAssumeRolePolicyCommand = exports.serializeAws_queryUpdateAccountPasswordPolicyCommand = exports.serializeAws_queryUpdateAccessKeyCommand = exports.serializeAws_queryUntagUserCommand = exports.serializeAws_queryUntagServerCertificateCommand = exports.serializeAws_queryUntagSAMLProviderCommand = exports.serializeAws_queryUntagRoleCommand = exports.serializeAws_queryUntagPolicyCommand = exports.serializeAws_queryUntagOpenIDConnectProviderCommand = exports.serializeAws_queryUntagMFADeviceCommand = exports.serializeAws_queryUntagInstanceProfileCommand = exports.serializeAws_queryTagUserCommand = exports.serializeAws_queryTagServerCertificateCommand = exports.serializeAws_queryTagSAMLProviderCommand = exports.serializeAws_queryTagRoleCommand = exports.serializeAws_queryTagPolicyCommand = exports.serializeAws_queryTagOpenIDConnectProviderCommand = exports.serializeAws_queryTagMFADeviceCommand = exports.serializeAws_queryTagInstanceProfileCommand = exports.serializeAws_querySimulatePrincipalPolicyCommand = exports.serializeAws_querySimulateCustomPolicyCommand = exports.serializeAws_querySetSecurityTokenServicePreferencesCommand = exports.serializeAws_querySetDefaultPolicyVersionCommand = exports.serializeAws_queryResyncMFADeviceCommand = exports.serializeAws_queryResetServiceSpecificCredentialCommand = exports.serializeAws_queryRemoveUserFromGroupCommand = exports.serializeAws_queryRemoveRoleFromInstanceProfileCommand = exports.serializeAws_queryRemoveClientIDFromOpenIDConnectProviderCommand = exports.serializeAws_queryPutUserPolicyCommand = exports.serializeAws_queryPutUserPermissionsBoundaryCommand = exports.serializeAws_queryPutRolePolicyCommand = exports.serializeAws_queryPutRolePermissionsBoundaryCommand = exports.serializeAws_queryPutGroupPolicyCommand = exports.serializeAws_queryListVirtualMFADevicesCommand = exports.serializeAws_queryListUserTagsCommand = exports.serializeAws_queryListUsersCommand = exports.serializeAws_queryListUserPoliciesCommand = exports.serializeAws_queryListSSHPublicKeysCommand = exports.serializeAws_queryListSigningCertificatesCommand = exports.serializeAws_queryListServiceSpecificCredentialsCommand = exports.serializeAws_queryListServerCertificateTagsCommand = exports.serializeAws_queryListServerCertificatesCommand = exports.serializeAws_queryListSAMLProviderTagsCommand = exports.serializeAws_queryListSAMLProvidersCommand = void 0;
    exports.deserializeAws_queryDeleteUserCommand = exports.deserializeAws_queryDeleteSSHPublicKeyCommand = exports.deserializeAws_queryDeleteSigningCertificateCommand = exports.deserializeAws_queryDeleteServiceSpecificCredentialCommand = exports.deserializeAws_queryDeleteServiceLinkedRoleCommand = exports.deserializeAws_queryDeleteServerCertificateCommand = exports.deserializeAws_queryDeleteSAMLProviderCommand = exports.deserializeAws_queryDeleteRolePolicyCommand = exports.deserializeAws_queryDeleteRolePermissionsBoundaryCommand = exports.deserializeAws_queryDeleteRoleCommand = exports.deserializeAws_queryDeletePolicyVersionCommand = exports.deserializeAws_queryDeletePolicyCommand = exports.deserializeAws_queryDeleteOpenIDConnectProviderCommand = exports.deserializeAws_queryDeleteLoginProfileCommand = exports.deserializeAws_queryDeleteInstanceProfileCommand = exports.deserializeAws_queryDeleteGroupPolicyCommand = exports.deserializeAws_queryDeleteGroupCommand = exports.deserializeAws_queryDeleteAccountPasswordPolicyCommand = exports.deserializeAws_queryDeleteAccountAliasCommand = exports.deserializeAws_queryDeleteAccessKeyCommand = exports.deserializeAws_queryDeactivateMFADeviceCommand = exports.deserializeAws_queryCreateVirtualMFADeviceCommand = exports.deserializeAws_queryCreateUserCommand = exports.deserializeAws_queryCreateServiceSpecificCredentialCommand = exports.deserializeAws_queryCreateServiceLinkedRoleCommand = exports.deserializeAws_queryCreateSAMLProviderCommand = exports.deserializeAws_queryCreateRoleCommand = exports.deserializeAws_queryCreatePolicyVersionCommand = exports.deserializeAws_queryCreatePolicyCommand = exports.deserializeAws_queryCreateOpenIDConnectProviderCommand = exports.deserializeAws_queryCreateLoginProfileCommand = exports.deserializeAws_queryCreateInstanceProfileCommand = exports.deserializeAws_queryCreateGroupCommand = exports.deserializeAws_queryCreateAccountAliasCommand = exports.deserializeAws_queryCreateAccessKeyCommand = exports.deserializeAws_queryChangePasswordCommand = exports.deserializeAws_queryAttachUserPolicyCommand = exports.deserializeAws_queryAttachRolePolicyCommand = exports.deserializeAws_queryAttachGroupPolicyCommand = exports.deserializeAws_queryAddUserToGroupCommand = exports.deserializeAws_queryAddRoleToInstanceProfileCommand = exports.deserializeAws_queryAddClientIDToOpenIDConnectProviderCommand = exports.serializeAws_queryUploadSSHPublicKeyCommand = exports.serializeAws_queryUploadSigningCertificateCommand = exports.serializeAws_queryUploadServerCertificateCommand = exports.serializeAws_queryUpdateUserCommand = exports.serializeAws_queryUpdateSSHPublicKeyCommand = exports.serializeAws_queryUpdateSigningCertificateCommand = exports.serializeAws_queryUpdateServiceSpecificCredentialCommand = exports.serializeAws_queryUpdateServerCertificateCommand = void 0;
    exports.deserializeAws_queryListOpenIDConnectProvidersCommand = exports.deserializeAws_queryListMFADeviceTagsCommand = exports.deserializeAws_queryListMFADevicesCommand = exports.deserializeAws_queryListInstanceProfileTagsCommand = exports.deserializeAws_queryListInstanceProfilesForRoleCommand = exports.deserializeAws_queryListInstanceProfilesCommand = exports.deserializeAws_queryListGroupsForUserCommand = exports.deserializeAws_queryListGroupsCommand = exports.deserializeAws_queryListGroupPoliciesCommand = exports.deserializeAws_queryListEntitiesForPolicyCommand = exports.deserializeAws_queryListAttachedUserPoliciesCommand = exports.deserializeAws_queryListAttachedRolePoliciesCommand = exports.deserializeAws_queryListAttachedGroupPoliciesCommand = exports.deserializeAws_queryListAccountAliasesCommand = exports.deserializeAws_queryListAccessKeysCommand = exports.deserializeAws_queryGetUserPolicyCommand = exports.deserializeAws_queryGetUserCommand = exports.deserializeAws_queryGetSSHPublicKeyCommand = exports.deserializeAws_queryGetServiceLinkedRoleDeletionStatusCommand = exports.deserializeAws_queryGetServiceLastAccessedDetailsWithEntitiesCommand = exports.deserializeAws_queryGetServiceLastAccessedDetailsCommand = exports.deserializeAws_queryGetServerCertificateCommand = exports.deserializeAws_queryGetSAMLProviderCommand = exports.deserializeAws_queryGetRolePolicyCommand = exports.deserializeAws_queryGetRoleCommand = exports.deserializeAws_queryGetPolicyVersionCommand = exports.deserializeAws_queryGetPolicyCommand = exports.deserializeAws_queryGetOrganizationsAccessReportCommand = exports.deserializeAws_queryGetOpenIDConnectProviderCommand = exports.deserializeAws_queryGetLoginProfileCommand = exports.deserializeAws_queryGetInstanceProfileCommand = exports.deserializeAws_queryGetGroupPolicyCommand = exports.deserializeAws_queryGetGroupCommand = exports.deserializeAws_queryGetCredentialReportCommand = exports.deserializeAws_queryGetContextKeysForPrincipalPolicyCommand = exports.deserializeAws_queryGetContextKeysForCustomPolicyCommand = exports.deserializeAws_queryGetAccountSummaryCommand = exports.deserializeAws_queryGetAccountPasswordPolicyCommand = exports.deserializeAws_queryGetAccountAuthorizationDetailsCommand = exports.deserializeAws_queryGetAccessKeyLastUsedCommand = exports.deserializeAws_queryGenerateServiceLastAccessedDetailsCommand = exports.deserializeAws_queryGenerateOrganizationsAccessReportCommand = exports.deserializeAws_queryGenerateCredentialReportCommand = exports.deserializeAws_queryEnableMFADeviceCommand = exports.deserializeAws_queryDetachUserPolicyCommand = exports.deserializeAws_queryDetachRolePolicyCommand = exports.deserializeAws_queryDetachGroupPolicyCommand = exports.deserializeAws_queryDeleteVirtualMFADeviceCommand = exports.deserializeAws_queryDeleteUserPolicyCommand = exports.deserializeAws_queryDeleteUserPermissionsBoundaryCommand = void 0;
    exports.deserializeAws_queryUpdateAccessKeyCommand = exports.deserializeAws_queryUntagUserCommand = exports.deserializeAws_queryUntagServerCertificateCommand = exports.deserializeAws_queryUntagSAMLProviderCommand = exports.deserializeAws_queryUntagRoleCommand = exports.deserializeAws_queryUntagPolicyCommand = exports.deserializeAws_queryUntagOpenIDConnectProviderCommand = exports.deserializeAws_queryUntagMFADeviceCommand = exports.deserializeAws_queryUntagInstanceProfileCommand = exports.deserializeAws_queryTagUserCommand = exports.deserializeAws_queryTagServerCertificateCommand = exports.deserializeAws_queryTagSAMLProviderCommand = exports.deserializeAws_queryTagRoleCommand = exports.deserializeAws_queryTagPolicyCommand = exports.deserializeAws_queryTagOpenIDConnectProviderCommand = exports.deserializeAws_queryTagMFADeviceCommand = exports.deserializeAws_queryTagInstanceProfileCommand = exports.deserializeAws_querySimulatePrincipalPolicyCommand = exports.deserializeAws_querySimulateCustomPolicyCommand = exports.deserializeAws_querySetSecurityTokenServicePreferencesCommand = exports.deserializeAws_querySetDefaultPolicyVersionCommand = exports.deserializeAws_queryResyncMFADeviceCommand = exports.deserializeAws_queryResetServiceSpecificCredentialCommand = exports.deserializeAws_queryRemoveUserFromGroupCommand = exports.deserializeAws_queryRemoveRoleFromInstanceProfileCommand = exports.deserializeAws_queryRemoveClientIDFromOpenIDConnectProviderCommand = exports.deserializeAws_queryPutUserPolicyCommand = exports.deserializeAws_queryPutUserPermissionsBoundaryCommand = exports.deserializeAws_queryPutRolePolicyCommand = exports.deserializeAws_queryPutRolePermissionsBoundaryCommand = exports.deserializeAws_queryPutGroupPolicyCommand = exports.deserializeAws_queryListVirtualMFADevicesCommand = exports.deserializeAws_queryListUserTagsCommand = exports.deserializeAws_queryListUsersCommand = exports.deserializeAws_queryListUserPoliciesCommand = exports.deserializeAws_queryListSSHPublicKeysCommand = exports.deserializeAws_queryListSigningCertificatesCommand = exports.deserializeAws_queryListServiceSpecificCredentialsCommand = exports.deserializeAws_queryListServerCertificateTagsCommand = exports.deserializeAws_queryListServerCertificatesCommand = exports.deserializeAws_queryListSAMLProviderTagsCommand = exports.deserializeAws_queryListSAMLProvidersCommand = exports.deserializeAws_queryListRoleTagsCommand = exports.deserializeAws_queryListRolesCommand = exports.deserializeAws_queryListRolePoliciesCommand = exports.deserializeAws_queryListPolicyVersionsCommand = exports.deserializeAws_queryListPolicyTagsCommand = exports.deserializeAws_queryListPoliciesGrantingServiceAccessCommand = exports.deserializeAws_queryListPoliciesCommand = exports.deserializeAws_queryListOpenIDConnectProviderTagsCommand = void 0;
    exports.deserializeAws_queryUploadSSHPublicKeyCommand = exports.deserializeAws_queryUploadSigningCertificateCommand = exports.deserializeAws_queryUploadServerCertificateCommand = exports.deserializeAws_queryUpdateUserCommand = exports.deserializeAws_queryUpdateSSHPublicKeyCommand = exports.deserializeAws_queryUpdateSigningCertificateCommand = exports.deserializeAws_queryUpdateServiceSpecificCredentialCommand = exports.deserializeAws_queryUpdateServerCertificateCommand = exports.deserializeAws_queryUpdateSAMLProviderCommand = exports.deserializeAws_queryUpdateRoleDescriptionCommand = exports.deserializeAws_queryUpdateRoleCommand = exports.deserializeAws_queryUpdateOpenIDConnectProviderThumbprintCommand = exports.deserializeAws_queryUpdateLoginProfileCommand = exports.deserializeAws_queryUpdateGroupCommand = exports.deserializeAws_queryUpdateAssumeRolePolicyCommand = exports.deserializeAws_queryUpdateAccountPasswordPolicyCommand = void 0;
    var protocol_http_1 = require_dist_cjs7();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var fast_xml_parser_1 = require_fxp();
    var IAMServiceException_1 = require_IAMServiceException();
    var models_0_1 = require_models_0();
    var models_1_1 = require_models_1();
    var serializeAws_queryAddClientIDToOpenIDConnectProviderCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryAddClientIDToOpenIDConnectProviderRequest(input, context),
        Action: "AddClientIDToOpenIDConnectProvider",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryAddClientIDToOpenIDConnectProviderCommand = serializeAws_queryAddClientIDToOpenIDConnectProviderCommand;
    var serializeAws_queryAddRoleToInstanceProfileCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryAddRoleToInstanceProfileRequest(input, context),
        Action: "AddRoleToInstanceProfile",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryAddRoleToInstanceProfileCommand = serializeAws_queryAddRoleToInstanceProfileCommand;
    var serializeAws_queryAddUserToGroupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryAddUserToGroupRequest(input, context),
        Action: "AddUserToGroup",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryAddUserToGroupCommand = serializeAws_queryAddUserToGroupCommand;
    var serializeAws_queryAttachGroupPolicyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryAttachGroupPolicyRequest(input, context),
        Action: "AttachGroupPolicy",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryAttachGroupPolicyCommand = serializeAws_queryAttachGroupPolicyCommand;
    var serializeAws_queryAttachRolePolicyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryAttachRolePolicyRequest(input, context),
        Action: "AttachRolePolicy",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryAttachRolePolicyCommand = serializeAws_queryAttachRolePolicyCommand;
    var serializeAws_queryAttachUserPolicyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryAttachUserPolicyRequest(input, context),
        Action: "AttachUserPolicy",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryAttachUserPolicyCommand = serializeAws_queryAttachUserPolicyCommand;
    var serializeAws_queryChangePasswordCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryChangePasswordRequest(input, context),
        Action: "ChangePassword",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryChangePasswordCommand = serializeAws_queryChangePasswordCommand;
    var serializeAws_queryCreateAccessKeyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryCreateAccessKeyRequest(input, context),
        Action: "CreateAccessKey",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryCreateAccessKeyCommand = serializeAws_queryCreateAccessKeyCommand;
    var serializeAws_queryCreateAccountAliasCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryCreateAccountAliasRequest(input, context),
        Action: "CreateAccountAlias",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryCreateAccountAliasCommand = serializeAws_queryCreateAccountAliasCommand;
    var serializeAws_queryCreateGroupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryCreateGroupRequest(input, context),
        Action: "CreateGroup",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryCreateGroupCommand = serializeAws_queryCreateGroupCommand;
    var serializeAws_queryCreateInstanceProfileCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryCreateInstanceProfileRequest(input, context),
        Action: "CreateInstanceProfile",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryCreateInstanceProfileCommand = serializeAws_queryCreateInstanceProfileCommand;
    var serializeAws_queryCreateLoginProfileCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryCreateLoginProfileRequest(input, context),
        Action: "CreateLoginProfile",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryCreateLoginProfileCommand = serializeAws_queryCreateLoginProfileCommand;
    var serializeAws_queryCreateOpenIDConnectProviderCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryCreateOpenIDConnectProviderRequest(input, context),
        Action: "CreateOpenIDConnectProvider",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryCreateOpenIDConnectProviderCommand = serializeAws_queryCreateOpenIDConnectProviderCommand;
    var serializeAws_queryCreatePolicyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryCreatePolicyRequest(input, context),
        Action: "CreatePolicy",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryCreatePolicyCommand = serializeAws_queryCreatePolicyCommand;
    var serializeAws_queryCreatePolicyVersionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryCreatePolicyVersionRequest(input, context),
        Action: "CreatePolicyVersion",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryCreatePolicyVersionCommand = serializeAws_queryCreatePolicyVersionCommand;
    var serializeAws_queryCreateRoleCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryCreateRoleRequest(input, context),
        Action: "CreateRole",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryCreateRoleCommand = serializeAws_queryCreateRoleCommand;
    var serializeAws_queryCreateSAMLProviderCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryCreateSAMLProviderRequest(input, context),
        Action: "CreateSAMLProvider",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryCreateSAMLProviderCommand = serializeAws_queryCreateSAMLProviderCommand;
    var serializeAws_queryCreateServiceLinkedRoleCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryCreateServiceLinkedRoleRequest(input, context),
        Action: "CreateServiceLinkedRole",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryCreateServiceLinkedRoleCommand = serializeAws_queryCreateServiceLinkedRoleCommand;
    var serializeAws_queryCreateServiceSpecificCredentialCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryCreateServiceSpecificCredentialRequest(input, context),
        Action: "CreateServiceSpecificCredential",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryCreateServiceSpecificCredentialCommand = serializeAws_queryCreateServiceSpecificCredentialCommand;
    var serializeAws_queryCreateUserCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryCreateUserRequest(input, context),
        Action: "CreateUser",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryCreateUserCommand = serializeAws_queryCreateUserCommand;
    var serializeAws_queryCreateVirtualMFADeviceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryCreateVirtualMFADeviceRequest(input, context),
        Action: "CreateVirtualMFADevice",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryCreateVirtualMFADeviceCommand = serializeAws_queryCreateVirtualMFADeviceCommand;
    var serializeAws_queryDeactivateMFADeviceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDeactivateMFADeviceRequest(input, context),
        Action: "DeactivateMFADevice",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeactivateMFADeviceCommand = serializeAws_queryDeactivateMFADeviceCommand;
    var serializeAws_queryDeleteAccessKeyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteAccessKeyRequest(input, context),
        Action: "DeleteAccessKey",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeleteAccessKeyCommand = serializeAws_queryDeleteAccessKeyCommand;
    var serializeAws_queryDeleteAccountAliasCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteAccountAliasRequest(input, context),
        Action: "DeleteAccountAlias",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeleteAccountAliasCommand = serializeAws_queryDeleteAccountAliasCommand;
    var serializeAws_queryDeleteAccountPasswordPolicyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      const body = buildFormUrlencodedString({
        Action: "DeleteAccountPasswordPolicy",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeleteAccountPasswordPolicyCommand = serializeAws_queryDeleteAccountPasswordPolicyCommand;
    var serializeAws_queryDeleteGroupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteGroupRequest(input, context),
        Action: "DeleteGroup",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeleteGroupCommand = serializeAws_queryDeleteGroupCommand;
    var serializeAws_queryDeleteGroupPolicyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteGroupPolicyRequest(input, context),
        Action: "DeleteGroupPolicy",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeleteGroupPolicyCommand = serializeAws_queryDeleteGroupPolicyCommand;
    var serializeAws_queryDeleteInstanceProfileCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteInstanceProfileRequest(input, context),
        Action: "DeleteInstanceProfile",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeleteInstanceProfileCommand = serializeAws_queryDeleteInstanceProfileCommand;
    var serializeAws_queryDeleteLoginProfileCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteLoginProfileRequest(input, context),
        Action: "DeleteLoginProfile",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeleteLoginProfileCommand = serializeAws_queryDeleteLoginProfileCommand;
    var serializeAws_queryDeleteOpenIDConnectProviderCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteOpenIDConnectProviderRequest(input, context),
        Action: "DeleteOpenIDConnectProvider",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeleteOpenIDConnectProviderCommand = serializeAws_queryDeleteOpenIDConnectProviderCommand;
    var serializeAws_queryDeletePolicyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDeletePolicyRequest(input, context),
        Action: "DeletePolicy",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeletePolicyCommand = serializeAws_queryDeletePolicyCommand;
    var serializeAws_queryDeletePolicyVersionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDeletePolicyVersionRequest(input, context),
        Action: "DeletePolicyVersion",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeletePolicyVersionCommand = serializeAws_queryDeletePolicyVersionCommand;
    var serializeAws_queryDeleteRoleCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteRoleRequest(input, context),
        Action: "DeleteRole",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeleteRoleCommand = serializeAws_queryDeleteRoleCommand;
    var serializeAws_queryDeleteRolePermissionsBoundaryCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteRolePermissionsBoundaryRequest(input, context),
        Action: "DeleteRolePermissionsBoundary",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeleteRolePermissionsBoundaryCommand = serializeAws_queryDeleteRolePermissionsBoundaryCommand;
    var serializeAws_queryDeleteRolePolicyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteRolePolicyRequest(input, context),
        Action: "DeleteRolePolicy",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeleteRolePolicyCommand = serializeAws_queryDeleteRolePolicyCommand;
    var serializeAws_queryDeleteSAMLProviderCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteSAMLProviderRequest(input, context),
        Action: "DeleteSAMLProvider",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeleteSAMLProviderCommand = serializeAws_queryDeleteSAMLProviderCommand;
    var serializeAws_queryDeleteServerCertificateCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteServerCertificateRequest(input, context),
        Action: "DeleteServerCertificate",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeleteServerCertificateCommand = serializeAws_queryDeleteServerCertificateCommand;
    var serializeAws_queryDeleteServiceLinkedRoleCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteServiceLinkedRoleRequest(input, context),
        Action: "DeleteServiceLinkedRole",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeleteServiceLinkedRoleCommand = serializeAws_queryDeleteServiceLinkedRoleCommand;
    var serializeAws_queryDeleteServiceSpecificCredentialCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteServiceSpecificCredentialRequest(input, context),
        Action: "DeleteServiceSpecificCredential",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeleteServiceSpecificCredentialCommand = serializeAws_queryDeleteServiceSpecificCredentialCommand;
    var serializeAws_queryDeleteSigningCertificateCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteSigningCertificateRequest(input, context),
        Action: "DeleteSigningCertificate",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeleteSigningCertificateCommand = serializeAws_queryDeleteSigningCertificateCommand;
    var serializeAws_queryDeleteSSHPublicKeyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteSSHPublicKeyRequest(input, context),
        Action: "DeleteSSHPublicKey",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeleteSSHPublicKeyCommand = serializeAws_queryDeleteSSHPublicKeyCommand;
    var serializeAws_queryDeleteUserCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteUserRequest(input, context),
        Action: "DeleteUser",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeleteUserCommand = serializeAws_queryDeleteUserCommand;
    var serializeAws_queryDeleteUserPermissionsBoundaryCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteUserPermissionsBoundaryRequest(input, context),
        Action: "DeleteUserPermissionsBoundary",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeleteUserPermissionsBoundaryCommand = serializeAws_queryDeleteUserPermissionsBoundaryCommand;
    var serializeAws_queryDeleteUserPolicyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteUserPolicyRequest(input, context),
        Action: "DeleteUserPolicy",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeleteUserPolicyCommand = serializeAws_queryDeleteUserPolicyCommand;
    var serializeAws_queryDeleteVirtualMFADeviceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteVirtualMFADeviceRequest(input, context),
        Action: "DeleteVirtualMFADevice",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeleteVirtualMFADeviceCommand = serializeAws_queryDeleteVirtualMFADeviceCommand;
    var serializeAws_queryDetachGroupPolicyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDetachGroupPolicyRequest(input, context),
        Action: "DetachGroupPolicy",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDetachGroupPolicyCommand = serializeAws_queryDetachGroupPolicyCommand;
    var serializeAws_queryDetachRolePolicyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDetachRolePolicyRequest(input, context),
        Action: "DetachRolePolicy",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDetachRolePolicyCommand = serializeAws_queryDetachRolePolicyCommand;
    var serializeAws_queryDetachUserPolicyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDetachUserPolicyRequest(input, context),
        Action: "DetachUserPolicy",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDetachUserPolicyCommand = serializeAws_queryDetachUserPolicyCommand;
    var serializeAws_queryEnableMFADeviceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryEnableMFADeviceRequest(input, context),
        Action: "EnableMFADevice",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryEnableMFADeviceCommand = serializeAws_queryEnableMFADeviceCommand;
    var serializeAws_queryGenerateCredentialReportCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      const body = buildFormUrlencodedString({
        Action: "GenerateCredentialReport",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGenerateCredentialReportCommand = serializeAws_queryGenerateCredentialReportCommand;
    var serializeAws_queryGenerateOrganizationsAccessReportCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGenerateOrganizationsAccessReportRequest(input, context),
        Action: "GenerateOrganizationsAccessReport",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGenerateOrganizationsAccessReportCommand = serializeAws_queryGenerateOrganizationsAccessReportCommand;
    var serializeAws_queryGenerateServiceLastAccessedDetailsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGenerateServiceLastAccessedDetailsRequest(input, context),
        Action: "GenerateServiceLastAccessedDetails",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGenerateServiceLastAccessedDetailsCommand = serializeAws_queryGenerateServiceLastAccessedDetailsCommand;
    var serializeAws_queryGetAccessKeyLastUsedCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetAccessKeyLastUsedRequest(input, context),
        Action: "GetAccessKeyLastUsed",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetAccessKeyLastUsedCommand = serializeAws_queryGetAccessKeyLastUsedCommand;
    var serializeAws_queryGetAccountAuthorizationDetailsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetAccountAuthorizationDetailsRequest(input, context),
        Action: "GetAccountAuthorizationDetails",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetAccountAuthorizationDetailsCommand = serializeAws_queryGetAccountAuthorizationDetailsCommand;
    var serializeAws_queryGetAccountPasswordPolicyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      const body = buildFormUrlencodedString({
        Action: "GetAccountPasswordPolicy",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetAccountPasswordPolicyCommand = serializeAws_queryGetAccountPasswordPolicyCommand;
    var serializeAws_queryGetAccountSummaryCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      const body = buildFormUrlencodedString({
        Action: "GetAccountSummary",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetAccountSummaryCommand = serializeAws_queryGetAccountSummaryCommand;
    var serializeAws_queryGetContextKeysForCustomPolicyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetContextKeysForCustomPolicyRequest(input, context),
        Action: "GetContextKeysForCustomPolicy",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetContextKeysForCustomPolicyCommand = serializeAws_queryGetContextKeysForCustomPolicyCommand;
    var serializeAws_queryGetContextKeysForPrincipalPolicyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetContextKeysForPrincipalPolicyRequest(input, context),
        Action: "GetContextKeysForPrincipalPolicy",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetContextKeysForPrincipalPolicyCommand = serializeAws_queryGetContextKeysForPrincipalPolicyCommand;
    var serializeAws_queryGetCredentialReportCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      const body = buildFormUrlencodedString({
        Action: "GetCredentialReport",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetCredentialReportCommand = serializeAws_queryGetCredentialReportCommand;
    var serializeAws_queryGetGroupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetGroupRequest(input, context),
        Action: "GetGroup",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetGroupCommand = serializeAws_queryGetGroupCommand;
    var serializeAws_queryGetGroupPolicyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetGroupPolicyRequest(input, context),
        Action: "GetGroupPolicy",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetGroupPolicyCommand = serializeAws_queryGetGroupPolicyCommand;
    var serializeAws_queryGetInstanceProfileCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetInstanceProfileRequest(input, context),
        Action: "GetInstanceProfile",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetInstanceProfileCommand = serializeAws_queryGetInstanceProfileCommand;
    var serializeAws_queryGetLoginProfileCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetLoginProfileRequest(input, context),
        Action: "GetLoginProfile",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetLoginProfileCommand = serializeAws_queryGetLoginProfileCommand;
    var serializeAws_queryGetOpenIDConnectProviderCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetOpenIDConnectProviderRequest(input, context),
        Action: "GetOpenIDConnectProvider",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetOpenIDConnectProviderCommand = serializeAws_queryGetOpenIDConnectProviderCommand;
    var serializeAws_queryGetOrganizationsAccessReportCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetOrganizationsAccessReportRequest(input, context),
        Action: "GetOrganizationsAccessReport",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetOrganizationsAccessReportCommand = serializeAws_queryGetOrganizationsAccessReportCommand;
    var serializeAws_queryGetPolicyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetPolicyRequest(input, context),
        Action: "GetPolicy",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetPolicyCommand = serializeAws_queryGetPolicyCommand;
    var serializeAws_queryGetPolicyVersionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetPolicyVersionRequest(input, context),
        Action: "GetPolicyVersion",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetPolicyVersionCommand = serializeAws_queryGetPolicyVersionCommand;
    var serializeAws_queryGetRoleCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetRoleRequest(input, context),
        Action: "GetRole",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetRoleCommand = serializeAws_queryGetRoleCommand;
    var serializeAws_queryGetRolePolicyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetRolePolicyRequest(input, context),
        Action: "GetRolePolicy",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetRolePolicyCommand = serializeAws_queryGetRolePolicyCommand;
    var serializeAws_queryGetSAMLProviderCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetSAMLProviderRequest(input, context),
        Action: "GetSAMLProvider",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetSAMLProviderCommand = serializeAws_queryGetSAMLProviderCommand;
    var serializeAws_queryGetServerCertificateCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetServerCertificateRequest(input, context),
        Action: "GetServerCertificate",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetServerCertificateCommand = serializeAws_queryGetServerCertificateCommand;
    var serializeAws_queryGetServiceLastAccessedDetailsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetServiceLastAccessedDetailsRequest(input, context),
        Action: "GetServiceLastAccessedDetails",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetServiceLastAccessedDetailsCommand = serializeAws_queryGetServiceLastAccessedDetailsCommand;
    var serializeAws_queryGetServiceLastAccessedDetailsWithEntitiesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetServiceLastAccessedDetailsWithEntitiesRequest(input, context),
        Action: "GetServiceLastAccessedDetailsWithEntities",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetServiceLastAccessedDetailsWithEntitiesCommand = serializeAws_queryGetServiceLastAccessedDetailsWithEntitiesCommand;
    var serializeAws_queryGetServiceLinkedRoleDeletionStatusCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetServiceLinkedRoleDeletionStatusRequest(input, context),
        Action: "GetServiceLinkedRoleDeletionStatus",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetServiceLinkedRoleDeletionStatusCommand = serializeAws_queryGetServiceLinkedRoleDeletionStatusCommand;
    var serializeAws_queryGetSSHPublicKeyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetSSHPublicKeyRequest(input, context),
        Action: "GetSSHPublicKey",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetSSHPublicKeyCommand = serializeAws_queryGetSSHPublicKeyCommand;
    var serializeAws_queryGetUserCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetUserRequest(input, context),
        Action: "GetUser",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetUserCommand = serializeAws_queryGetUserCommand;
    var serializeAws_queryGetUserPolicyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetUserPolicyRequest(input, context),
        Action: "GetUserPolicy",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetUserPolicyCommand = serializeAws_queryGetUserPolicyCommand;
    var serializeAws_queryListAccessKeysCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListAccessKeysRequest(input, context),
        Action: "ListAccessKeys",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListAccessKeysCommand = serializeAws_queryListAccessKeysCommand;
    var serializeAws_queryListAccountAliasesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListAccountAliasesRequest(input, context),
        Action: "ListAccountAliases",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListAccountAliasesCommand = serializeAws_queryListAccountAliasesCommand;
    var serializeAws_queryListAttachedGroupPoliciesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListAttachedGroupPoliciesRequest(input, context),
        Action: "ListAttachedGroupPolicies",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListAttachedGroupPoliciesCommand = serializeAws_queryListAttachedGroupPoliciesCommand;
    var serializeAws_queryListAttachedRolePoliciesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListAttachedRolePoliciesRequest(input, context),
        Action: "ListAttachedRolePolicies",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListAttachedRolePoliciesCommand = serializeAws_queryListAttachedRolePoliciesCommand;
    var serializeAws_queryListAttachedUserPoliciesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListAttachedUserPoliciesRequest(input, context),
        Action: "ListAttachedUserPolicies",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListAttachedUserPoliciesCommand = serializeAws_queryListAttachedUserPoliciesCommand;
    var serializeAws_queryListEntitiesForPolicyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListEntitiesForPolicyRequest(input, context),
        Action: "ListEntitiesForPolicy",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListEntitiesForPolicyCommand = serializeAws_queryListEntitiesForPolicyCommand;
    var serializeAws_queryListGroupPoliciesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListGroupPoliciesRequest(input, context),
        Action: "ListGroupPolicies",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListGroupPoliciesCommand = serializeAws_queryListGroupPoliciesCommand;
    var serializeAws_queryListGroupsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListGroupsRequest(input, context),
        Action: "ListGroups",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListGroupsCommand = serializeAws_queryListGroupsCommand;
    var serializeAws_queryListGroupsForUserCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListGroupsForUserRequest(input, context),
        Action: "ListGroupsForUser",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListGroupsForUserCommand = serializeAws_queryListGroupsForUserCommand;
    var serializeAws_queryListInstanceProfilesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListInstanceProfilesRequest(input, context),
        Action: "ListInstanceProfiles",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListInstanceProfilesCommand = serializeAws_queryListInstanceProfilesCommand;
    var serializeAws_queryListInstanceProfilesForRoleCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListInstanceProfilesForRoleRequest(input, context),
        Action: "ListInstanceProfilesForRole",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListInstanceProfilesForRoleCommand = serializeAws_queryListInstanceProfilesForRoleCommand;
    var serializeAws_queryListInstanceProfileTagsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListInstanceProfileTagsRequest(input, context),
        Action: "ListInstanceProfileTags",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListInstanceProfileTagsCommand = serializeAws_queryListInstanceProfileTagsCommand;
    var serializeAws_queryListMFADevicesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListMFADevicesRequest(input, context),
        Action: "ListMFADevices",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListMFADevicesCommand = serializeAws_queryListMFADevicesCommand;
    var serializeAws_queryListMFADeviceTagsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListMFADeviceTagsRequest(input, context),
        Action: "ListMFADeviceTags",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListMFADeviceTagsCommand = serializeAws_queryListMFADeviceTagsCommand;
    var serializeAws_queryListOpenIDConnectProvidersCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListOpenIDConnectProvidersRequest(input, context),
        Action: "ListOpenIDConnectProviders",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListOpenIDConnectProvidersCommand = serializeAws_queryListOpenIDConnectProvidersCommand;
    var serializeAws_queryListOpenIDConnectProviderTagsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListOpenIDConnectProviderTagsRequest(input, context),
        Action: "ListOpenIDConnectProviderTags",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListOpenIDConnectProviderTagsCommand = serializeAws_queryListOpenIDConnectProviderTagsCommand;
    var serializeAws_queryListPoliciesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListPoliciesRequest(input, context),
        Action: "ListPolicies",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListPoliciesCommand = serializeAws_queryListPoliciesCommand;
    var serializeAws_queryListPoliciesGrantingServiceAccessCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListPoliciesGrantingServiceAccessRequest(input, context),
        Action: "ListPoliciesGrantingServiceAccess",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListPoliciesGrantingServiceAccessCommand = serializeAws_queryListPoliciesGrantingServiceAccessCommand;
    var serializeAws_queryListPolicyTagsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListPolicyTagsRequest(input, context),
        Action: "ListPolicyTags",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListPolicyTagsCommand = serializeAws_queryListPolicyTagsCommand;
    var serializeAws_queryListPolicyVersionsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListPolicyVersionsRequest(input, context),
        Action: "ListPolicyVersions",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListPolicyVersionsCommand = serializeAws_queryListPolicyVersionsCommand;
    var serializeAws_queryListRolePoliciesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListRolePoliciesRequest(input, context),
        Action: "ListRolePolicies",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListRolePoliciesCommand = serializeAws_queryListRolePoliciesCommand;
    var serializeAws_queryListRolesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListRolesRequest(input, context),
        Action: "ListRoles",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListRolesCommand = serializeAws_queryListRolesCommand;
    var serializeAws_queryListRoleTagsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListRoleTagsRequest(input, context),
        Action: "ListRoleTags",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListRoleTagsCommand = serializeAws_queryListRoleTagsCommand;
    var serializeAws_queryListSAMLProvidersCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListSAMLProvidersRequest(input, context),
        Action: "ListSAMLProviders",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListSAMLProvidersCommand = serializeAws_queryListSAMLProvidersCommand;
    var serializeAws_queryListSAMLProviderTagsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListSAMLProviderTagsRequest(input, context),
        Action: "ListSAMLProviderTags",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListSAMLProviderTagsCommand = serializeAws_queryListSAMLProviderTagsCommand;
    var serializeAws_queryListServerCertificatesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListServerCertificatesRequest(input, context),
        Action: "ListServerCertificates",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListServerCertificatesCommand = serializeAws_queryListServerCertificatesCommand;
    var serializeAws_queryListServerCertificateTagsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListServerCertificateTagsRequest(input, context),
        Action: "ListServerCertificateTags",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListServerCertificateTagsCommand = serializeAws_queryListServerCertificateTagsCommand;
    var serializeAws_queryListServiceSpecificCredentialsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListServiceSpecificCredentialsRequest(input, context),
        Action: "ListServiceSpecificCredentials",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListServiceSpecificCredentialsCommand = serializeAws_queryListServiceSpecificCredentialsCommand;
    var serializeAws_queryListSigningCertificatesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListSigningCertificatesRequest(input, context),
        Action: "ListSigningCertificates",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListSigningCertificatesCommand = serializeAws_queryListSigningCertificatesCommand;
    var serializeAws_queryListSSHPublicKeysCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListSSHPublicKeysRequest(input, context),
        Action: "ListSSHPublicKeys",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListSSHPublicKeysCommand = serializeAws_queryListSSHPublicKeysCommand;
    var serializeAws_queryListUserPoliciesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListUserPoliciesRequest(input, context),
        Action: "ListUserPolicies",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListUserPoliciesCommand = serializeAws_queryListUserPoliciesCommand;
    var serializeAws_queryListUsersCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListUsersRequest(input, context),
        Action: "ListUsers",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListUsersCommand = serializeAws_queryListUsersCommand;
    var serializeAws_queryListUserTagsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListUserTagsRequest(input, context),
        Action: "ListUserTags",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListUserTagsCommand = serializeAws_queryListUserTagsCommand;
    var serializeAws_queryListVirtualMFADevicesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListVirtualMFADevicesRequest(input, context),
        Action: "ListVirtualMFADevices",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListVirtualMFADevicesCommand = serializeAws_queryListVirtualMFADevicesCommand;
    var serializeAws_queryPutGroupPolicyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryPutGroupPolicyRequest(input, context),
        Action: "PutGroupPolicy",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryPutGroupPolicyCommand = serializeAws_queryPutGroupPolicyCommand;
    var serializeAws_queryPutRolePermissionsBoundaryCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryPutRolePermissionsBoundaryRequest(input, context),
        Action: "PutRolePermissionsBoundary",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryPutRolePermissionsBoundaryCommand = serializeAws_queryPutRolePermissionsBoundaryCommand;
    var serializeAws_queryPutRolePolicyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryPutRolePolicyRequest(input, context),
        Action: "PutRolePolicy",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryPutRolePolicyCommand = serializeAws_queryPutRolePolicyCommand;
    var serializeAws_queryPutUserPermissionsBoundaryCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryPutUserPermissionsBoundaryRequest(input, context),
        Action: "PutUserPermissionsBoundary",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryPutUserPermissionsBoundaryCommand = serializeAws_queryPutUserPermissionsBoundaryCommand;
    var serializeAws_queryPutUserPolicyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryPutUserPolicyRequest(input, context),
        Action: "PutUserPolicy",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryPutUserPolicyCommand = serializeAws_queryPutUserPolicyCommand;
    var serializeAws_queryRemoveClientIDFromOpenIDConnectProviderCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryRemoveClientIDFromOpenIDConnectProviderRequest(input, context),
        Action: "RemoveClientIDFromOpenIDConnectProvider",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryRemoveClientIDFromOpenIDConnectProviderCommand = serializeAws_queryRemoveClientIDFromOpenIDConnectProviderCommand;
    var serializeAws_queryRemoveRoleFromInstanceProfileCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryRemoveRoleFromInstanceProfileRequest(input, context),
        Action: "RemoveRoleFromInstanceProfile",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryRemoveRoleFromInstanceProfileCommand = serializeAws_queryRemoveRoleFromInstanceProfileCommand;
    var serializeAws_queryRemoveUserFromGroupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryRemoveUserFromGroupRequest(input, context),
        Action: "RemoveUserFromGroup",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryRemoveUserFromGroupCommand = serializeAws_queryRemoveUserFromGroupCommand;
    var serializeAws_queryResetServiceSpecificCredentialCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryResetServiceSpecificCredentialRequest(input, context),
        Action: "ResetServiceSpecificCredential",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryResetServiceSpecificCredentialCommand = serializeAws_queryResetServiceSpecificCredentialCommand;
    var serializeAws_queryResyncMFADeviceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryResyncMFADeviceRequest(input, context),
        Action: "ResyncMFADevice",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryResyncMFADeviceCommand = serializeAws_queryResyncMFADeviceCommand;
    var serializeAws_querySetDefaultPolicyVersionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_querySetDefaultPolicyVersionRequest(input, context),
        Action: "SetDefaultPolicyVersion",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_querySetDefaultPolicyVersionCommand = serializeAws_querySetDefaultPolicyVersionCommand;
    var serializeAws_querySetSecurityTokenServicePreferencesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_querySetSecurityTokenServicePreferencesRequest(input, context),
        Action: "SetSecurityTokenServicePreferences",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_querySetSecurityTokenServicePreferencesCommand = serializeAws_querySetSecurityTokenServicePreferencesCommand;
    var serializeAws_querySimulateCustomPolicyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_querySimulateCustomPolicyRequest(input, context),
        Action: "SimulateCustomPolicy",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_querySimulateCustomPolicyCommand = serializeAws_querySimulateCustomPolicyCommand;
    var serializeAws_querySimulatePrincipalPolicyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_querySimulatePrincipalPolicyRequest(input, context),
        Action: "SimulatePrincipalPolicy",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_querySimulatePrincipalPolicyCommand = serializeAws_querySimulatePrincipalPolicyCommand;
    var serializeAws_queryTagInstanceProfileCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryTagInstanceProfileRequest(input, context),
        Action: "TagInstanceProfile",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryTagInstanceProfileCommand = serializeAws_queryTagInstanceProfileCommand;
    var serializeAws_queryTagMFADeviceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryTagMFADeviceRequest(input, context),
        Action: "TagMFADevice",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryTagMFADeviceCommand = serializeAws_queryTagMFADeviceCommand;
    var serializeAws_queryTagOpenIDConnectProviderCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryTagOpenIDConnectProviderRequest(input, context),
        Action: "TagOpenIDConnectProvider",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryTagOpenIDConnectProviderCommand = serializeAws_queryTagOpenIDConnectProviderCommand;
    var serializeAws_queryTagPolicyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryTagPolicyRequest(input, context),
        Action: "TagPolicy",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryTagPolicyCommand = serializeAws_queryTagPolicyCommand;
    var serializeAws_queryTagRoleCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryTagRoleRequest(input, context),
        Action: "TagRole",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryTagRoleCommand = serializeAws_queryTagRoleCommand;
    var serializeAws_queryTagSAMLProviderCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryTagSAMLProviderRequest(input, context),
        Action: "TagSAMLProvider",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryTagSAMLProviderCommand = serializeAws_queryTagSAMLProviderCommand;
    var serializeAws_queryTagServerCertificateCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryTagServerCertificateRequest(input, context),
        Action: "TagServerCertificate",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryTagServerCertificateCommand = serializeAws_queryTagServerCertificateCommand;
    var serializeAws_queryTagUserCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryTagUserRequest(input, context),
        Action: "TagUser",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryTagUserCommand = serializeAws_queryTagUserCommand;
    var serializeAws_queryUntagInstanceProfileCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryUntagInstanceProfileRequest(input, context),
        Action: "UntagInstanceProfile",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryUntagInstanceProfileCommand = serializeAws_queryUntagInstanceProfileCommand;
    var serializeAws_queryUntagMFADeviceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryUntagMFADeviceRequest(input, context),
        Action: "UntagMFADevice",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryUntagMFADeviceCommand = serializeAws_queryUntagMFADeviceCommand;
    var serializeAws_queryUntagOpenIDConnectProviderCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryUntagOpenIDConnectProviderRequest(input, context),
        Action: "UntagOpenIDConnectProvider",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryUntagOpenIDConnectProviderCommand = serializeAws_queryUntagOpenIDConnectProviderCommand;
    var serializeAws_queryUntagPolicyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryUntagPolicyRequest(input, context),
        Action: "UntagPolicy",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryUntagPolicyCommand = serializeAws_queryUntagPolicyCommand;
    var serializeAws_queryUntagRoleCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryUntagRoleRequest(input, context),
        Action: "UntagRole",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryUntagRoleCommand = serializeAws_queryUntagRoleCommand;
    var serializeAws_queryUntagSAMLProviderCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryUntagSAMLProviderRequest(input, context),
        Action: "UntagSAMLProvider",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryUntagSAMLProviderCommand = serializeAws_queryUntagSAMLProviderCommand;
    var serializeAws_queryUntagServerCertificateCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryUntagServerCertificateRequest(input, context),
        Action: "UntagServerCertificate",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryUntagServerCertificateCommand = serializeAws_queryUntagServerCertificateCommand;
    var serializeAws_queryUntagUserCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryUntagUserRequest(input, context),
        Action: "UntagUser",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryUntagUserCommand = serializeAws_queryUntagUserCommand;
    var serializeAws_queryUpdateAccessKeyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryUpdateAccessKeyRequest(input, context),
        Action: "UpdateAccessKey",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryUpdateAccessKeyCommand = serializeAws_queryUpdateAccessKeyCommand;
    var serializeAws_queryUpdateAccountPasswordPolicyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryUpdateAccountPasswordPolicyRequest(input, context),
        Action: "UpdateAccountPasswordPolicy",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryUpdateAccountPasswordPolicyCommand = serializeAws_queryUpdateAccountPasswordPolicyCommand;
    var serializeAws_queryUpdateAssumeRolePolicyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryUpdateAssumeRolePolicyRequest(input, context),
        Action: "UpdateAssumeRolePolicy",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryUpdateAssumeRolePolicyCommand = serializeAws_queryUpdateAssumeRolePolicyCommand;
    var serializeAws_queryUpdateGroupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryUpdateGroupRequest(input, context),
        Action: "UpdateGroup",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryUpdateGroupCommand = serializeAws_queryUpdateGroupCommand;
    var serializeAws_queryUpdateLoginProfileCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryUpdateLoginProfileRequest(input, context),
        Action: "UpdateLoginProfile",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryUpdateLoginProfileCommand = serializeAws_queryUpdateLoginProfileCommand;
    var serializeAws_queryUpdateOpenIDConnectProviderThumbprintCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryUpdateOpenIDConnectProviderThumbprintRequest(input, context),
        Action: "UpdateOpenIDConnectProviderThumbprint",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryUpdateOpenIDConnectProviderThumbprintCommand = serializeAws_queryUpdateOpenIDConnectProviderThumbprintCommand;
    var serializeAws_queryUpdateRoleCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryUpdateRoleRequest(input, context),
        Action: "UpdateRole",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryUpdateRoleCommand = serializeAws_queryUpdateRoleCommand;
    var serializeAws_queryUpdateRoleDescriptionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryUpdateRoleDescriptionRequest(input, context),
        Action: "UpdateRoleDescription",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryUpdateRoleDescriptionCommand = serializeAws_queryUpdateRoleDescriptionCommand;
    var serializeAws_queryUpdateSAMLProviderCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryUpdateSAMLProviderRequest(input, context),
        Action: "UpdateSAMLProvider",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryUpdateSAMLProviderCommand = serializeAws_queryUpdateSAMLProviderCommand;
    var serializeAws_queryUpdateServerCertificateCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryUpdateServerCertificateRequest(input, context),
        Action: "UpdateServerCertificate",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryUpdateServerCertificateCommand = serializeAws_queryUpdateServerCertificateCommand;
    var serializeAws_queryUpdateServiceSpecificCredentialCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryUpdateServiceSpecificCredentialRequest(input, context),
        Action: "UpdateServiceSpecificCredential",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryUpdateServiceSpecificCredentialCommand = serializeAws_queryUpdateServiceSpecificCredentialCommand;
    var serializeAws_queryUpdateSigningCertificateCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryUpdateSigningCertificateRequest(input, context),
        Action: "UpdateSigningCertificate",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryUpdateSigningCertificateCommand = serializeAws_queryUpdateSigningCertificateCommand;
    var serializeAws_queryUpdateSSHPublicKeyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryUpdateSSHPublicKeyRequest(input, context),
        Action: "UpdateSSHPublicKey",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryUpdateSSHPublicKeyCommand = serializeAws_queryUpdateSSHPublicKeyCommand;
    var serializeAws_queryUpdateUserCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryUpdateUserRequest(input, context),
        Action: "UpdateUser",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryUpdateUserCommand = serializeAws_queryUpdateUserCommand;
    var serializeAws_queryUploadServerCertificateCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryUploadServerCertificateRequest(input, context),
        Action: "UploadServerCertificate",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryUploadServerCertificateCommand = serializeAws_queryUploadServerCertificateCommand;
    var serializeAws_queryUploadSigningCertificateCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryUploadSigningCertificateRequest(input, context),
        Action: "UploadSigningCertificate",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryUploadSigningCertificateCommand = serializeAws_queryUploadSigningCertificateCommand;
    var serializeAws_queryUploadSSHPublicKeyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryUploadSSHPublicKeyRequest(input, context),
        Action: "UploadSSHPublicKey",
        Version: "2010-05-08"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryUploadSSHPublicKeyCommand = serializeAws_queryUploadSSHPublicKeyCommand;
    var deserializeAws_queryAddClientIDToOpenIDConnectProviderCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAddClientIDToOpenIDConnectProviderCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryAddClientIDToOpenIDConnectProviderCommand = deserializeAws_queryAddClientIDToOpenIDConnectProviderCommand;
    var deserializeAws_queryAddClientIDToOpenIDConnectProviderCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryAddRoleToInstanceProfileCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAddRoleToInstanceProfileCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryAddRoleToInstanceProfileCommand = deserializeAws_queryAddRoleToInstanceProfileCommand;
    var deserializeAws_queryAddRoleToInstanceProfileCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "EntityAlreadyExists":
        case "com.amazonaws.iam#EntityAlreadyExistsException":
          throw await deserializeAws_queryEntityAlreadyExistsExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        case "UnmodifiableEntity":
        case "com.amazonaws.iam#UnmodifiableEntityException":
          throw await deserializeAws_queryUnmodifiableEntityExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryAddUserToGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAddUserToGroupCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryAddUserToGroupCommand = deserializeAws_queryAddUserToGroupCommand;
    var deserializeAws_queryAddUserToGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryAttachGroupPolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAttachGroupPolicyCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryAttachGroupPolicyCommand = deserializeAws_queryAttachGroupPolicyCommand;
    var deserializeAws_queryAttachGroupPolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "PolicyNotAttachable":
        case "com.amazonaws.iam#PolicyNotAttachableException":
          throw await deserializeAws_queryPolicyNotAttachableExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryAttachRolePolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAttachRolePolicyCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryAttachRolePolicyCommand = deserializeAws_queryAttachRolePolicyCommand;
    var deserializeAws_queryAttachRolePolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "PolicyNotAttachable":
        case "com.amazonaws.iam#PolicyNotAttachableException":
          throw await deserializeAws_queryPolicyNotAttachableExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        case "UnmodifiableEntity":
        case "com.amazonaws.iam#UnmodifiableEntityException":
          throw await deserializeAws_queryUnmodifiableEntityExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryAttachUserPolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAttachUserPolicyCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryAttachUserPolicyCommand = deserializeAws_queryAttachUserPolicyCommand;
    var deserializeAws_queryAttachUserPolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "PolicyNotAttachable":
        case "com.amazonaws.iam#PolicyNotAttachableException":
          throw await deserializeAws_queryPolicyNotAttachableExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryChangePasswordCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryChangePasswordCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryChangePasswordCommand = deserializeAws_queryChangePasswordCommand;
    var deserializeAws_queryChangePasswordCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "EntityTemporarilyUnmodifiable":
        case "com.amazonaws.iam#EntityTemporarilyUnmodifiableException":
          throw await deserializeAws_queryEntityTemporarilyUnmodifiableExceptionResponse(parsedOutput, context);
        case "InvalidUserType":
        case "com.amazonaws.iam#InvalidUserTypeException":
          throw await deserializeAws_queryInvalidUserTypeExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "PasswordPolicyViolation":
        case "com.amazonaws.iam#PasswordPolicyViolationException":
          throw await deserializeAws_queryPasswordPolicyViolationExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryCreateAccessKeyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCreateAccessKeyCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCreateAccessKeyResponse(data2.CreateAccessKeyResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryCreateAccessKeyCommand = deserializeAws_queryCreateAccessKeyCommand;
    var deserializeAws_queryCreateAccessKeyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryCreateAccountAliasCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCreateAccountAliasCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryCreateAccountAliasCommand = deserializeAws_queryCreateAccountAliasCommand;
    var deserializeAws_queryCreateAccountAliasCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "EntityAlreadyExists":
        case "com.amazonaws.iam#EntityAlreadyExistsException":
          throw await deserializeAws_queryEntityAlreadyExistsExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryCreateGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCreateGroupCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCreateGroupResponse(data2.CreateGroupResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryCreateGroupCommand = deserializeAws_queryCreateGroupCommand;
    var deserializeAws_queryCreateGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "EntityAlreadyExists":
        case "com.amazonaws.iam#EntityAlreadyExistsException":
          throw await deserializeAws_queryEntityAlreadyExistsExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryCreateInstanceProfileCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCreateInstanceProfileCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCreateInstanceProfileResponse(data2.CreateInstanceProfileResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryCreateInstanceProfileCommand = deserializeAws_queryCreateInstanceProfileCommand;
    var deserializeAws_queryCreateInstanceProfileCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.iam#ConcurrentModificationException":
          throw await deserializeAws_queryConcurrentModificationExceptionResponse(parsedOutput, context);
        case "EntityAlreadyExists":
        case "com.amazonaws.iam#EntityAlreadyExistsException":
          throw await deserializeAws_queryEntityAlreadyExistsExceptionResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryCreateLoginProfileCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCreateLoginProfileCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCreateLoginProfileResponse(data2.CreateLoginProfileResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryCreateLoginProfileCommand = deserializeAws_queryCreateLoginProfileCommand;
    var deserializeAws_queryCreateLoginProfileCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "EntityAlreadyExists":
        case "com.amazonaws.iam#EntityAlreadyExistsException":
          throw await deserializeAws_queryEntityAlreadyExistsExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "PasswordPolicyViolation":
        case "com.amazonaws.iam#PasswordPolicyViolationException":
          throw await deserializeAws_queryPasswordPolicyViolationExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryCreateOpenIDConnectProviderCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCreateOpenIDConnectProviderCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCreateOpenIDConnectProviderResponse(data2.CreateOpenIDConnectProviderResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryCreateOpenIDConnectProviderCommand = deserializeAws_queryCreateOpenIDConnectProviderCommand;
    var deserializeAws_queryCreateOpenIDConnectProviderCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.iam#ConcurrentModificationException":
          throw await deserializeAws_queryConcurrentModificationExceptionResponse(parsedOutput, context);
        case "EntityAlreadyExists":
        case "com.amazonaws.iam#EntityAlreadyExistsException":
          throw await deserializeAws_queryEntityAlreadyExistsExceptionResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryCreatePolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCreatePolicyCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCreatePolicyResponse(data2.CreatePolicyResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryCreatePolicyCommand = deserializeAws_queryCreatePolicyCommand;
    var deserializeAws_queryCreatePolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.iam#ConcurrentModificationException":
          throw await deserializeAws_queryConcurrentModificationExceptionResponse(parsedOutput, context);
        case "EntityAlreadyExists":
        case "com.amazonaws.iam#EntityAlreadyExistsException":
          throw await deserializeAws_queryEntityAlreadyExistsExceptionResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.iam#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryCreatePolicyVersionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCreatePolicyVersionCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCreatePolicyVersionResponse(data2.CreatePolicyVersionResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryCreatePolicyVersionCommand = deserializeAws_queryCreatePolicyVersionCommand;
    var deserializeAws_queryCreatePolicyVersionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.iam#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryCreateRoleCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCreateRoleCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCreateRoleResponse(data2.CreateRoleResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryCreateRoleCommand = deserializeAws_queryCreateRoleCommand;
    var deserializeAws_queryCreateRoleCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.iam#ConcurrentModificationException":
          throw await deserializeAws_queryConcurrentModificationExceptionResponse(parsedOutput, context);
        case "EntityAlreadyExists":
        case "com.amazonaws.iam#EntityAlreadyExistsException":
          throw await deserializeAws_queryEntityAlreadyExistsExceptionResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.iam#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryCreateSAMLProviderCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCreateSAMLProviderCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCreateSAMLProviderResponse(data2.CreateSAMLProviderResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryCreateSAMLProviderCommand = deserializeAws_queryCreateSAMLProviderCommand;
    var deserializeAws_queryCreateSAMLProviderCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.iam#ConcurrentModificationException":
          throw await deserializeAws_queryConcurrentModificationExceptionResponse(parsedOutput, context);
        case "EntityAlreadyExists":
        case "com.amazonaws.iam#EntityAlreadyExistsException":
          throw await deserializeAws_queryEntityAlreadyExistsExceptionResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryCreateServiceLinkedRoleCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCreateServiceLinkedRoleCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCreateServiceLinkedRoleResponse(data2.CreateServiceLinkedRoleResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryCreateServiceLinkedRoleCommand = deserializeAws_queryCreateServiceLinkedRoleCommand;
    var deserializeAws_queryCreateServiceLinkedRoleCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryCreateServiceSpecificCredentialCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCreateServiceSpecificCredentialCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCreateServiceSpecificCredentialResponse(data2.CreateServiceSpecificCredentialResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryCreateServiceSpecificCredentialCommand = deserializeAws_queryCreateServiceSpecificCredentialCommand;
    var deserializeAws_queryCreateServiceSpecificCredentialCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "NotSupportedService":
        case "com.amazonaws.iam#ServiceNotSupportedException":
          throw await deserializeAws_queryServiceNotSupportedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryCreateUserCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCreateUserCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCreateUserResponse(data2.CreateUserResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryCreateUserCommand = deserializeAws_queryCreateUserCommand;
    var deserializeAws_queryCreateUserCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.iam#ConcurrentModificationException":
          throw await deserializeAws_queryConcurrentModificationExceptionResponse(parsedOutput, context);
        case "EntityAlreadyExists":
        case "com.amazonaws.iam#EntityAlreadyExistsException":
          throw await deserializeAws_queryEntityAlreadyExistsExceptionResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryCreateVirtualMFADeviceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCreateVirtualMFADeviceCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCreateVirtualMFADeviceResponse(data2.CreateVirtualMFADeviceResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryCreateVirtualMFADeviceCommand = deserializeAws_queryCreateVirtualMFADeviceCommand;
    var deserializeAws_queryCreateVirtualMFADeviceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.iam#ConcurrentModificationException":
          throw await deserializeAws_queryConcurrentModificationExceptionResponse(parsedOutput, context);
        case "EntityAlreadyExists":
        case "com.amazonaws.iam#EntityAlreadyExistsException":
          throw await deserializeAws_queryEntityAlreadyExistsExceptionResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDeactivateMFADeviceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeactivateMFADeviceCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeactivateMFADeviceCommand = deserializeAws_queryDeactivateMFADeviceCommand;
    var deserializeAws_queryDeactivateMFADeviceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "EntityTemporarilyUnmodifiable":
        case "com.amazonaws.iam#EntityTemporarilyUnmodifiableException":
          throw await deserializeAws_queryEntityTemporarilyUnmodifiableExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDeleteAccessKeyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteAccessKeyCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeleteAccessKeyCommand = deserializeAws_queryDeleteAccessKeyCommand;
    var deserializeAws_queryDeleteAccessKeyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDeleteAccountAliasCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteAccountAliasCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeleteAccountAliasCommand = deserializeAws_queryDeleteAccountAliasCommand;
    var deserializeAws_queryDeleteAccountAliasCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDeleteAccountPasswordPolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteAccountPasswordPolicyCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeleteAccountPasswordPolicyCommand = deserializeAws_queryDeleteAccountPasswordPolicyCommand;
    var deserializeAws_queryDeleteAccountPasswordPolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDeleteGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteGroupCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeleteGroupCommand = deserializeAws_queryDeleteGroupCommand;
    var deserializeAws_queryDeleteGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DeleteConflict":
        case "com.amazonaws.iam#DeleteConflictException":
          throw await deserializeAws_queryDeleteConflictExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDeleteGroupPolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteGroupPolicyCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeleteGroupPolicyCommand = deserializeAws_queryDeleteGroupPolicyCommand;
    var deserializeAws_queryDeleteGroupPolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDeleteInstanceProfileCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteInstanceProfileCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeleteInstanceProfileCommand = deserializeAws_queryDeleteInstanceProfileCommand;
    var deserializeAws_queryDeleteInstanceProfileCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DeleteConflict":
        case "com.amazonaws.iam#DeleteConflictException":
          throw await deserializeAws_queryDeleteConflictExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDeleteLoginProfileCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteLoginProfileCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeleteLoginProfileCommand = deserializeAws_queryDeleteLoginProfileCommand;
    var deserializeAws_queryDeleteLoginProfileCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "EntityTemporarilyUnmodifiable":
        case "com.amazonaws.iam#EntityTemporarilyUnmodifiableException":
          throw await deserializeAws_queryEntityTemporarilyUnmodifiableExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDeleteOpenIDConnectProviderCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteOpenIDConnectProviderCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeleteOpenIDConnectProviderCommand = deserializeAws_queryDeleteOpenIDConnectProviderCommand;
    var deserializeAws_queryDeleteOpenIDConnectProviderCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDeletePolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeletePolicyCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeletePolicyCommand = deserializeAws_queryDeletePolicyCommand;
    var deserializeAws_queryDeletePolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DeleteConflict":
        case "com.amazonaws.iam#DeleteConflictException":
          throw await deserializeAws_queryDeleteConflictExceptionResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDeletePolicyVersionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeletePolicyVersionCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeletePolicyVersionCommand = deserializeAws_queryDeletePolicyVersionCommand;
    var deserializeAws_queryDeletePolicyVersionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DeleteConflict":
        case "com.amazonaws.iam#DeleteConflictException":
          throw await deserializeAws_queryDeleteConflictExceptionResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDeleteRoleCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteRoleCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeleteRoleCommand = deserializeAws_queryDeleteRoleCommand;
    var deserializeAws_queryDeleteRoleCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.iam#ConcurrentModificationException":
          throw await deserializeAws_queryConcurrentModificationExceptionResponse(parsedOutput, context);
        case "DeleteConflict":
        case "com.amazonaws.iam#DeleteConflictException":
          throw await deserializeAws_queryDeleteConflictExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        case "UnmodifiableEntity":
        case "com.amazonaws.iam#UnmodifiableEntityException":
          throw await deserializeAws_queryUnmodifiableEntityExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDeleteRolePermissionsBoundaryCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteRolePermissionsBoundaryCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeleteRolePermissionsBoundaryCommand = deserializeAws_queryDeleteRolePermissionsBoundaryCommand;
    var deserializeAws_queryDeleteRolePermissionsBoundaryCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        case "UnmodifiableEntity":
        case "com.amazonaws.iam#UnmodifiableEntityException":
          throw await deserializeAws_queryUnmodifiableEntityExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDeleteRolePolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteRolePolicyCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeleteRolePolicyCommand = deserializeAws_queryDeleteRolePolicyCommand;
    var deserializeAws_queryDeleteRolePolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        case "UnmodifiableEntity":
        case "com.amazonaws.iam#UnmodifiableEntityException":
          throw await deserializeAws_queryUnmodifiableEntityExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDeleteSAMLProviderCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteSAMLProviderCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeleteSAMLProviderCommand = deserializeAws_queryDeleteSAMLProviderCommand;
    var deserializeAws_queryDeleteSAMLProviderCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDeleteServerCertificateCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteServerCertificateCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeleteServerCertificateCommand = deserializeAws_queryDeleteServerCertificateCommand;
    var deserializeAws_queryDeleteServerCertificateCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DeleteConflict":
        case "com.amazonaws.iam#DeleteConflictException":
          throw await deserializeAws_queryDeleteConflictExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDeleteServiceLinkedRoleCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteServiceLinkedRoleCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDeleteServiceLinkedRoleResponse(data2.DeleteServiceLinkedRoleResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeleteServiceLinkedRoleCommand = deserializeAws_queryDeleteServiceLinkedRoleCommand;
    var deserializeAws_queryDeleteServiceLinkedRoleCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDeleteServiceSpecificCredentialCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteServiceSpecificCredentialCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeleteServiceSpecificCredentialCommand = deserializeAws_queryDeleteServiceSpecificCredentialCommand;
    var deserializeAws_queryDeleteServiceSpecificCredentialCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDeleteSigningCertificateCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteSigningCertificateCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeleteSigningCertificateCommand = deserializeAws_queryDeleteSigningCertificateCommand;
    var deserializeAws_queryDeleteSigningCertificateCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDeleteSSHPublicKeyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteSSHPublicKeyCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeleteSSHPublicKeyCommand = deserializeAws_queryDeleteSSHPublicKeyCommand;
    var deserializeAws_queryDeleteSSHPublicKeyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDeleteUserCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteUserCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeleteUserCommand = deserializeAws_queryDeleteUserCommand;
    var deserializeAws_queryDeleteUserCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.iam#ConcurrentModificationException":
          throw await deserializeAws_queryConcurrentModificationExceptionResponse(parsedOutput, context);
        case "DeleteConflict":
        case "com.amazonaws.iam#DeleteConflictException":
          throw await deserializeAws_queryDeleteConflictExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDeleteUserPermissionsBoundaryCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteUserPermissionsBoundaryCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeleteUserPermissionsBoundaryCommand = deserializeAws_queryDeleteUserPermissionsBoundaryCommand;
    var deserializeAws_queryDeleteUserPermissionsBoundaryCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDeleteUserPolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteUserPolicyCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeleteUserPolicyCommand = deserializeAws_queryDeleteUserPolicyCommand;
    var deserializeAws_queryDeleteUserPolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDeleteVirtualMFADeviceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteVirtualMFADeviceCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeleteVirtualMFADeviceCommand = deserializeAws_queryDeleteVirtualMFADeviceCommand;
    var deserializeAws_queryDeleteVirtualMFADeviceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DeleteConflict":
        case "com.amazonaws.iam#DeleteConflictException":
          throw await deserializeAws_queryDeleteConflictExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDetachGroupPolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDetachGroupPolicyCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDetachGroupPolicyCommand = deserializeAws_queryDetachGroupPolicyCommand;
    var deserializeAws_queryDetachGroupPolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDetachRolePolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDetachRolePolicyCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDetachRolePolicyCommand = deserializeAws_queryDetachRolePolicyCommand;
    var deserializeAws_queryDetachRolePolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        case "UnmodifiableEntity":
        case "com.amazonaws.iam#UnmodifiableEntityException":
          throw await deserializeAws_queryUnmodifiableEntityExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDetachUserPolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDetachUserPolicyCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDetachUserPolicyCommand = deserializeAws_queryDetachUserPolicyCommand;
    var deserializeAws_queryDetachUserPolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryEnableMFADeviceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryEnableMFADeviceCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryEnableMFADeviceCommand = deserializeAws_queryEnableMFADeviceCommand;
    var deserializeAws_queryEnableMFADeviceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "EntityAlreadyExists":
        case "com.amazonaws.iam#EntityAlreadyExistsException":
          throw await deserializeAws_queryEntityAlreadyExistsExceptionResponse(parsedOutput, context);
        case "EntityTemporarilyUnmodifiable":
        case "com.amazonaws.iam#EntityTemporarilyUnmodifiableException":
          throw await deserializeAws_queryEntityTemporarilyUnmodifiableExceptionResponse(parsedOutput, context);
        case "InvalidAuthenticationCode":
        case "com.amazonaws.iam#InvalidAuthenticationCodeException":
          throw await deserializeAws_queryInvalidAuthenticationCodeExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryGenerateCredentialReportCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGenerateCredentialReportCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGenerateCredentialReportResponse(data2.GenerateCredentialReportResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGenerateCredentialReportCommand = deserializeAws_queryGenerateCredentialReportCommand;
    var deserializeAws_queryGenerateCredentialReportCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryGenerateOrganizationsAccessReportCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGenerateOrganizationsAccessReportCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGenerateOrganizationsAccessReportResponse(data2.GenerateOrganizationsAccessReportResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGenerateOrganizationsAccessReportCommand = deserializeAws_queryGenerateOrganizationsAccessReportCommand;
    var deserializeAws_queryGenerateOrganizationsAccessReportCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ReportGenerationLimitExceeded":
        case "com.amazonaws.iam#ReportGenerationLimitExceededException":
          throw await deserializeAws_queryReportGenerationLimitExceededExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryGenerateServiceLastAccessedDetailsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGenerateServiceLastAccessedDetailsCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGenerateServiceLastAccessedDetailsResponse(data2.GenerateServiceLastAccessedDetailsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGenerateServiceLastAccessedDetailsCommand = deserializeAws_queryGenerateServiceLastAccessedDetailsCommand;
    var deserializeAws_queryGenerateServiceLastAccessedDetailsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryGetAccessKeyLastUsedCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetAccessKeyLastUsedCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetAccessKeyLastUsedResponse(data2.GetAccessKeyLastUsedResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetAccessKeyLastUsedCommand = deserializeAws_queryGetAccessKeyLastUsedCommand;
    var deserializeAws_queryGetAccessKeyLastUsedCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryGetAccountAuthorizationDetailsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetAccountAuthorizationDetailsCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetAccountAuthorizationDetailsResponse(data2.GetAccountAuthorizationDetailsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetAccountAuthorizationDetailsCommand = deserializeAws_queryGetAccountAuthorizationDetailsCommand;
    var deserializeAws_queryGetAccountAuthorizationDetailsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryGetAccountPasswordPolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetAccountPasswordPolicyCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetAccountPasswordPolicyResponse(data2.GetAccountPasswordPolicyResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetAccountPasswordPolicyCommand = deserializeAws_queryGetAccountPasswordPolicyCommand;
    var deserializeAws_queryGetAccountPasswordPolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryGetAccountSummaryCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetAccountSummaryCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetAccountSummaryResponse(data2.GetAccountSummaryResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetAccountSummaryCommand = deserializeAws_queryGetAccountSummaryCommand;
    var deserializeAws_queryGetAccountSummaryCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryGetContextKeysForCustomPolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetContextKeysForCustomPolicyCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetContextKeysForPolicyResponse(data2.GetContextKeysForCustomPolicyResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetContextKeysForCustomPolicyCommand = deserializeAws_queryGetContextKeysForCustomPolicyCommand;
    var deserializeAws_queryGetContextKeysForCustomPolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryGetContextKeysForPrincipalPolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetContextKeysForPrincipalPolicyCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetContextKeysForPolicyResponse(data2.GetContextKeysForPrincipalPolicyResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetContextKeysForPrincipalPolicyCommand = deserializeAws_queryGetContextKeysForPrincipalPolicyCommand;
    var deserializeAws_queryGetContextKeysForPrincipalPolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryGetCredentialReportCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetCredentialReportCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetCredentialReportResponse(data2.GetCredentialReportResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetCredentialReportCommand = deserializeAws_queryGetCredentialReportCommand;
    var deserializeAws_queryGetCredentialReportCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ReportExpired":
        case "com.amazonaws.iam#CredentialReportExpiredException":
          throw await deserializeAws_queryCredentialReportExpiredExceptionResponse(parsedOutput, context);
        case "ReportInProgress":
        case "com.amazonaws.iam#CredentialReportNotReadyException":
          throw await deserializeAws_queryCredentialReportNotReadyExceptionResponse(parsedOutput, context);
        case "ReportNotPresent":
        case "com.amazonaws.iam#CredentialReportNotPresentException":
          throw await deserializeAws_queryCredentialReportNotPresentExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryGetGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetGroupCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetGroupResponse(data2.GetGroupResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetGroupCommand = deserializeAws_queryGetGroupCommand;
    var deserializeAws_queryGetGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryGetGroupPolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetGroupPolicyCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetGroupPolicyResponse(data2.GetGroupPolicyResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetGroupPolicyCommand = deserializeAws_queryGetGroupPolicyCommand;
    var deserializeAws_queryGetGroupPolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryGetInstanceProfileCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetInstanceProfileCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetInstanceProfileResponse(data2.GetInstanceProfileResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetInstanceProfileCommand = deserializeAws_queryGetInstanceProfileCommand;
    var deserializeAws_queryGetInstanceProfileCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryGetLoginProfileCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetLoginProfileCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetLoginProfileResponse(data2.GetLoginProfileResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetLoginProfileCommand = deserializeAws_queryGetLoginProfileCommand;
    var deserializeAws_queryGetLoginProfileCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryGetOpenIDConnectProviderCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetOpenIDConnectProviderCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetOpenIDConnectProviderResponse(data2.GetOpenIDConnectProviderResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetOpenIDConnectProviderCommand = deserializeAws_queryGetOpenIDConnectProviderCommand;
    var deserializeAws_queryGetOpenIDConnectProviderCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryGetOrganizationsAccessReportCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetOrganizationsAccessReportCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetOrganizationsAccessReportResponse(data2.GetOrganizationsAccessReportResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetOrganizationsAccessReportCommand = deserializeAws_queryGetOrganizationsAccessReportCommand;
    var deserializeAws_queryGetOrganizationsAccessReportCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryGetPolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetPolicyCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetPolicyResponse(data2.GetPolicyResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetPolicyCommand = deserializeAws_queryGetPolicyCommand;
    var deserializeAws_queryGetPolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryGetPolicyVersionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetPolicyVersionCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetPolicyVersionResponse(data2.GetPolicyVersionResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetPolicyVersionCommand = deserializeAws_queryGetPolicyVersionCommand;
    var deserializeAws_queryGetPolicyVersionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryGetRoleCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetRoleCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetRoleResponse(data2.GetRoleResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetRoleCommand = deserializeAws_queryGetRoleCommand;
    var deserializeAws_queryGetRoleCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryGetRolePolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetRolePolicyCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetRolePolicyResponse(data2.GetRolePolicyResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetRolePolicyCommand = deserializeAws_queryGetRolePolicyCommand;
    var deserializeAws_queryGetRolePolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryGetSAMLProviderCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetSAMLProviderCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetSAMLProviderResponse(data2.GetSAMLProviderResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetSAMLProviderCommand = deserializeAws_queryGetSAMLProviderCommand;
    var deserializeAws_queryGetSAMLProviderCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryGetServerCertificateCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetServerCertificateCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetServerCertificateResponse(data2.GetServerCertificateResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetServerCertificateCommand = deserializeAws_queryGetServerCertificateCommand;
    var deserializeAws_queryGetServerCertificateCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryGetServiceLastAccessedDetailsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetServiceLastAccessedDetailsCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetServiceLastAccessedDetailsResponse(data2.GetServiceLastAccessedDetailsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetServiceLastAccessedDetailsCommand = deserializeAws_queryGetServiceLastAccessedDetailsCommand;
    var deserializeAws_queryGetServiceLastAccessedDetailsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryGetServiceLastAccessedDetailsWithEntitiesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetServiceLastAccessedDetailsWithEntitiesCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetServiceLastAccessedDetailsWithEntitiesResponse(data2.GetServiceLastAccessedDetailsWithEntitiesResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetServiceLastAccessedDetailsWithEntitiesCommand = deserializeAws_queryGetServiceLastAccessedDetailsWithEntitiesCommand;
    var deserializeAws_queryGetServiceLastAccessedDetailsWithEntitiesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryGetServiceLinkedRoleDeletionStatusCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetServiceLinkedRoleDeletionStatusCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetServiceLinkedRoleDeletionStatusResponse(data2.GetServiceLinkedRoleDeletionStatusResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetServiceLinkedRoleDeletionStatusCommand = deserializeAws_queryGetServiceLinkedRoleDeletionStatusCommand;
    var deserializeAws_queryGetServiceLinkedRoleDeletionStatusCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryGetSSHPublicKeyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetSSHPublicKeyCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetSSHPublicKeyResponse(data2.GetSSHPublicKeyResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetSSHPublicKeyCommand = deserializeAws_queryGetSSHPublicKeyCommand;
    var deserializeAws_queryGetSSHPublicKeyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "UnrecognizedPublicKeyEncoding":
        case "com.amazonaws.iam#UnrecognizedPublicKeyEncodingException":
          throw await deserializeAws_queryUnrecognizedPublicKeyEncodingExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryGetUserCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetUserCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetUserResponse(data2.GetUserResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetUserCommand = deserializeAws_queryGetUserCommand;
    var deserializeAws_queryGetUserCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryGetUserPolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetUserPolicyCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetUserPolicyResponse(data2.GetUserPolicyResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetUserPolicyCommand = deserializeAws_queryGetUserPolicyCommand;
    var deserializeAws_queryGetUserPolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryListAccessKeysCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListAccessKeysCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListAccessKeysResponse(data2.ListAccessKeysResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListAccessKeysCommand = deserializeAws_queryListAccessKeysCommand;
    var deserializeAws_queryListAccessKeysCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryListAccountAliasesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListAccountAliasesCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListAccountAliasesResponse(data2.ListAccountAliasesResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListAccountAliasesCommand = deserializeAws_queryListAccountAliasesCommand;
    var deserializeAws_queryListAccountAliasesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryListAttachedGroupPoliciesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListAttachedGroupPoliciesCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListAttachedGroupPoliciesResponse(data2.ListAttachedGroupPoliciesResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListAttachedGroupPoliciesCommand = deserializeAws_queryListAttachedGroupPoliciesCommand;
    var deserializeAws_queryListAttachedGroupPoliciesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryListAttachedRolePoliciesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListAttachedRolePoliciesCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListAttachedRolePoliciesResponse(data2.ListAttachedRolePoliciesResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListAttachedRolePoliciesCommand = deserializeAws_queryListAttachedRolePoliciesCommand;
    var deserializeAws_queryListAttachedRolePoliciesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryListAttachedUserPoliciesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListAttachedUserPoliciesCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListAttachedUserPoliciesResponse(data2.ListAttachedUserPoliciesResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListAttachedUserPoliciesCommand = deserializeAws_queryListAttachedUserPoliciesCommand;
    var deserializeAws_queryListAttachedUserPoliciesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryListEntitiesForPolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListEntitiesForPolicyCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListEntitiesForPolicyResponse(data2.ListEntitiesForPolicyResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListEntitiesForPolicyCommand = deserializeAws_queryListEntitiesForPolicyCommand;
    var deserializeAws_queryListEntitiesForPolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryListGroupPoliciesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListGroupPoliciesCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListGroupPoliciesResponse(data2.ListGroupPoliciesResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListGroupPoliciesCommand = deserializeAws_queryListGroupPoliciesCommand;
    var deserializeAws_queryListGroupPoliciesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryListGroupsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListGroupsCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListGroupsResponse(data2.ListGroupsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListGroupsCommand = deserializeAws_queryListGroupsCommand;
    var deserializeAws_queryListGroupsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryListGroupsForUserCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListGroupsForUserCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListGroupsForUserResponse(data2.ListGroupsForUserResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListGroupsForUserCommand = deserializeAws_queryListGroupsForUserCommand;
    var deserializeAws_queryListGroupsForUserCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryListInstanceProfilesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListInstanceProfilesCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListInstanceProfilesResponse(data2.ListInstanceProfilesResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListInstanceProfilesCommand = deserializeAws_queryListInstanceProfilesCommand;
    var deserializeAws_queryListInstanceProfilesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryListInstanceProfilesForRoleCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListInstanceProfilesForRoleCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListInstanceProfilesForRoleResponse(data2.ListInstanceProfilesForRoleResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListInstanceProfilesForRoleCommand = deserializeAws_queryListInstanceProfilesForRoleCommand;
    var deserializeAws_queryListInstanceProfilesForRoleCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryListInstanceProfileTagsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListInstanceProfileTagsCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListInstanceProfileTagsResponse(data2.ListInstanceProfileTagsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListInstanceProfileTagsCommand = deserializeAws_queryListInstanceProfileTagsCommand;
    var deserializeAws_queryListInstanceProfileTagsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryListMFADevicesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListMFADevicesCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListMFADevicesResponse(data2.ListMFADevicesResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListMFADevicesCommand = deserializeAws_queryListMFADevicesCommand;
    var deserializeAws_queryListMFADevicesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryListMFADeviceTagsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListMFADeviceTagsCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListMFADeviceTagsResponse(data2.ListMFADeviceTagsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListMFADeviceTagsCommand = deserializeAws_queryListMFADeviceTagsCommand;
    var deserializeAws_queryListMFADeviceTagsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryListOpenIDConnectProvidersCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListOpenIDConnectProvidersCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListOpenIDConnectProvidersResponse(data2.ListOpenIDConnectProvidersResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListOpenIDConnectProvidersCommand = deserializeAws_queryListOpenIDConnectProvidersCommand;
    var deserializeAws_queryListOpenIDConnectProvidersCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryListOpenIDConnectProviderTagsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListOpenIDConnectProviderTagsCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListOpenIDConnectProviderTagsResponse(data2.ListOpenIDConnectProviderTagsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListOpenIDConnectProviderTagsCommand = deserializeAws_queryListOpenIDConnectProviderTagsCommand;
    var deserializeAws_queryListOpenIDConnectProviderTagsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryListPoliciesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListPoliciesCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListPoliciesResponse(data2.ListPoliciesResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListPoliciesCommand = deserializeAws_queryListPoliciesCommand;
    var deserializeAws_queryListPoliciesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryListPoliciesGrantingServiceAccessCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListPoliciesGrantingServiceAccessCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListPoliciesGrantingServiceAccessResponse(data2.ListPoliciesGrantingServiceAccessResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListPoliciesGrantingServiceAccessCommand = deserializeAws_queryListPoliciesGrantingServiceAccessCommand;
    var deserializeAws_queryListPoliciesGrantingServiceAccessCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryListPolicyTagsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListPolicyTagsCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListPolicyTagsResponse(data2.ListPolicyTagsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListPolicyTagsCommand = deserializeAws_queryListPolicyTagsCommand;
    var deserializeAws_queryListPolicyTagsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryListPolicyVersionsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListPolicyVersionsCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListPolicyVersionsResponse(data2.ListPolicyVersionsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListPolicyVersionsCommand = deserializeAws_queryListPolicyVersionsCommand;
    var deserializeAws_queryListPolicyVersionsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryListRolePoliciesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListRolePoliciesCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListRolePoliciesResponse(data2.ListRolePoliciesResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListRolePoliciesCommand = deserializeAws_queryListRolePoliciesCommand;
    var deserializeAws_queryListRolePoliciesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryListRolesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListRolesCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListRolesResponse(data2.ListRolesResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListRolesCommand = deserializeAws_queryListRolesCommand;
    var deserializeAws_queryListRolesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryListRoleTagsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListRoleTagsCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListRoleTagsResponse(data2.ListRoleTagsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListRoleTagsCommand = deserializeAws_queryListRoleTagsCommand;
    var deserializeAws_queryListRoleTagsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryListSAMLProvidersCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListSAMLProvidersCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListSAMLProvidersResponse(data2.ListSAMLProvidersResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListSAMLProvidersCommand = deserializeAws_queryListSAMLProvidersCommand;
    var deserializeAws_queryListSAMLProvidersCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryListSAMLProviderTagsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListSAMLProviderTagsCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListSAMLProviderTagsResponse(data2.ListSAMLProviderTagsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListSAMLProviderTagsCommand = deserializeAws_queryListSAMLProviderTagsCommand;
    var deserializeAws_queryListSAMLProviderTagsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryListServerCertificatesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListServerCertificatesCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListServerCertificatesResponse(data2.ListServerCertificatesResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListServerCertificatesCommand = deserializeAws_queryListServerCertificatesCommand;
    var deserializeAws_queryListServerCertificatesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryListServerCertificateTagsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListServerCertificateTagsCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListServerCertificateTagsResponse(data2.ListServerCertificateTagsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListServerCertificateTagsCommand = deserializeAws_queryListServerCertificateTagsCommand;
    var deserializeAws_queryListServerCertificateTagsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryListServiceSpecificCredentialsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListServiceSpecificCredentialsCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListServiceSpecificCredentialsResponse(data2.ListServiceSpecificCredentialsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListServiceSpecificCredentialsCommand = deserializeAws_queryListServiceSpecificCredentialsCommand;
    var deserializeAws_queryListServiceSpecificCredentialsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "NotSupportedService":
        case "com.amazonaws.iam#ServiceNotSupportedException":
          throw await deserializeAws_queryServiceNotSupportedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryListSigningCertificatesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListSigningCertificatesCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListSigningCertificatesResponse(data2.ListSigningCertificatesResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListSigningCertificatesCommand = deserializeAws_queryListSigningCertificatesCommand;
    var deserializeAws_queryListSigningCertificatesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryListSSHPublicKeysCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListSSHPublicKeysCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListSSHPublicKeysResponse(data2.ListSSHPublicKeysResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListSSHPublicKeysCommand = deserializeAws_queryListSSHPublicKeysCommand;
    var deserializeAws_queryListSSHPublicKeysCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryListUserPoliciesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListUserPoliciesCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListUserPoliciesResponse(data2.ListUserPoliciesResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListUserPoliciesCommand = deserializeAws_queryListUserPoliciesCommand;
    var deserializeAws_queryListUserPoliciesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryListUsersCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListUsersCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListUsersResponse(data2.ListUsersResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListUsersCommand = deserializeAws_queryListUsersCommand;
    var deserializeAws_queryListUsersCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryListUserTagsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListUserTagsCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListUserTagsResponse(data2.ListUserTagsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListUserTagsCommand = deserializeAws_queryListUserTagsCommand;
    var deserializeAws_queryListUserTagsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryListVirtualMFADevicesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListVirtualMFADevicesCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListVirtualMFADevicesResponse(data2.ListVirtualMFADevicesResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListVirtualMFADevicesCommand = deserializeAws_queryListVirtualMFADevicesCommand;
    var deserializeAws_queryListVirtualMFADevicesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: IAMServiceException_1.IAMServiceException,
        errorCode
      });
    };
    var deserializeAws_queryPutGroupPolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryPutGroupPolicyCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryPutGroupPolicyCommand = deserializeAws_queryPutGroupPolicyCommand;
    var deserializeAws_queryPutGroupPolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.iam#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryPutRolePermissionsBoundaryCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryPutRolePermissionsBoundaryCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryPutRolePermissionsBoundaryCommand = deserializeAws_queryPutRolePermissionsBoundaryCommand;
    var deserializeAws_queryPutRolePermissionsBoundaryCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "PolicyNotAttachable":
        case "com.amazonaws.iam#PolicyNotAttachableException":
          throw await deserializeAws_queryPolicyNotAttachableExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        case "UnmodifiableEntity":
        case "com.amazonaws.iam#UnmodifiableEntityException":
          throw await deserializeAws_queryUnmodifiableEntityExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryPutRolePolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryPutRolePolicyCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryPutRolePolicyCommand = deserializeAws_queryPutRolePolicyCommand;
    var deserializeAws_queryPutRolePolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.iam#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        case "UnmodifiableEntity":
        case "com.amazonaws.iam#UnmodifiableEntityException":
          throw await deserializeAws_queryUnmodifiableEntityExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryPutUserPermissionsBoundaryCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryPutUserPermissionsBoundaryCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryPutUserPermissionsBoundaryCommand = deserializeAws_queryPutUserPermissionsBoundaryCommand;
    var deserializeAws_queryPutUserPermissionsBoundaryCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "PolicyNotAttachable":
        case "com.amazonaws.iam#PolicyNotAttachableException":
          throw await deserializeAws_queryPolicyNotAttachableExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryPutUserPolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryPutUserPolicyCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryPutUserPolicyCommand = deserializeAws_queryPutUserPolicyCommand;
    var deserializeAws_queryPutUserPolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.iam#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryRemoveClientIDFromOpenIDConnectProviderCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryRemoveClientIDFromOpenIDConnectProviderCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryRemoveClientIDFromOpenIDConnectProviderCommand = deserializeAws_queryRemoveClientIDFromOpenIDConnectProviderCommand;
    var deserializeAws_queryRemoveClientIDFromOpenIDConnectProviderCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryRemoveRoleFromInstanceProfileCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryRemoveRoleFromInstanceProfileCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryRemoveRoleFromInstanceProfileCommand = deserializeAws_queryRemoveRoleFromInstanceProfileCommand;
    var deserializeAws_queryRemoveRoleFromInstanceProfileCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        case "UnmodifiableEntity":
        case "com.amazonaws.iam#UnmodifiableEntityException":
          throw await deserializeAws_queryUnmodifiableEntityExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryRemoveUserFromGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryRemoveUserFromGroupCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryRemoveUserFromGroupCommand = deserializeAws_queryRemoveUserFromGroupCommand;
    var deserializeAws_queryRemoveUserFromGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryResetServiceSpecificCredentialCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryResetServiceSpecificCredentialCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryResetServiceSpecificCredentialResponse(data2.ResetServiceSpecificCredentialResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryResetServiceSpecificCredentialCommand = deserializeAws_queryResetServiceSpecificCredentialCommand;
    var deserializeAws_queryResetServiceSpecificCredentialCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryResyncMFADeviceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryResyncMFADeviceCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryResyncMFADeviceCommand = deserializeAws_queryResyncMFADeviceCommand;
    var deserializeAws_queryResyncMFADeviceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidAuthenticationCode":
        case "com.amazonaws.iam#InvalidAuthenticationCodeException":
          throw await deserializeAws_queryInvalidAuthenticationCodeExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_querySetDefaultPolicyVersionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_querySetDefaultPolicyVersionCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_querySetDefaultPolicyVersionCommand = deserializeAws_querySetDefaultPolicyVersionCommand;
    var deserializeAws_querySetDefaultPolicyVersionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_querySetSecurityTokenServicePreferencesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_querySetSecurityTokenServicePreferencesCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_querySetSecurityTokenServicePreferencesCommand = deserializeAws_querySetSecurityTokenServicePreferencesCommand;
    var deserializeAws_querySetSecurityTokenServicePreferencesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_querySimulateCustomPolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_querySimulateCustomPolicyCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_querySimulatePolicyResponse(data2.SimulateCustomPolicyResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_querySimulateCustomPolicyCommand = deserializeAws_querySimulateCustomPolicyCommand;
    var deserializeAws_querySimulateCustomPolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "PolicyEvaluation":
        case "com.amazonaws.iam#PolicyEvaluationException":
          throw await deserializeAws_queryPolicyEvaluationExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_querySimulatePrincipalPolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_querySimulatePrincipalPolicyCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_querySimulatePolicyResponse(data2.SimulatePrincipalPolicyResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_querySimulatePrincipalPolicyCommand = deserializeAws_querySimulatePrincipalPolicyCommand;
    var deserializeAws_querySimulatePrincipalPolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "PolicyEvaluation":
        case "com.amazonaws.iam#PolicyEvaluationException":
          throw await deserializeAws_queryPolicyEvaluationExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryTagInstanceProfileCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryTagInstanceProfileCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryTagInstanceProfileCommand = deserializeAws_queryTagInstanceProfileCommand;
    var deserializeAws_queryTagInstanceProfileCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.iam#ConcurrentModificationException":
          throw await deserializeAws_queryConcurrentModificationExceptionResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryTagMFADeviceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryTagMFADeviceCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryTagMFADeviceCommand = deserializeAws_queryTagMFADeviceCommand;
    var deserializeAws_queryTagMFADeviceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.iam#ConcurrentModificationException":
          throw await deserializeAws_queryConcurrentModificationExceptionResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryTagOpenIDConnectProviderCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryTagOpenIDConnectProviderCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryTagOpenIDConnectProviderCommand = deserializeAws_queryTagOpenIDConnectProviderCommand;
    var deserializeAws_queryTagOpenIDConnectProviderCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.iam#ConcurrentModificationException":
          throw await deserializeAws_queryConcurrentModificationExceptionResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryTagPolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryTagPolicyCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryTagPolicyCommand = deserializeAws_queryTagPolicyCommand;
    var deserializeAws_queryTagPolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.iam#ConcurrentModificationException":
          throw await deserializeAws_queryConcurrentModificationExceptionResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryTagRoleCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryTagRoleCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryTagRoleCommand = deserializeAws_queryTagRoleCommand;
    var deserializeAws_queryTagRoleCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.iam#ConcurrentModificationException":
          throw await deserializeAws_queryConcurrentModificationExceptionResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryTagSAMLProviderCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryTagSAMLProviderCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryTagSAMLProviderCommand = deserializeAws_queryTagSAMLProviderCommand;
    var deserializeAws_queryTagSAMLProviderCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.iam#ConcurrentModificationException":
          throw await deserializeAws_queryConcurrentModificationExceptionResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryTagServerCertificateCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryTagServerCertificateCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryTagServerCertificateCommand = deserializeAws_queryTagServerCertificateCommand;
    var deserializeAws_queryTagServerCertificateCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.iam#ConcurrentModificationException":
          throw await deserializeAws_queryConcurrentModificationExceptionResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryTagUserCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryTagUserCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryTagUserCommand = deserializeAws_queryTagUserCommand;
    var deserializeAws_queryTagUserCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.iam#ConcurrentModificationException":
          throw await deserializeAws_queryConcurrentModificationExceptionResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryUntagInstanceProfileCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryUntagInstanceProfileCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryUntagInstanceProfileCommand = deserializeAws_queryUntagInstanceProfileCommand;
    var deserializeAws_queryUntagInstanceProfileCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.iam#ConcurrentModificationException":
          throw await deserializeAws_queryConcurrentModificationExceptionResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryUntagMFADeviceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryUntagMFADeviceCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryUntagMFADeviceCommand = deserializeAws_queryUntagMFADeviceCommand;
    var deserializeAws_queryUntagMFADeviceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.iam#ConcurrentModificationException":
          throw await deserializeAws_queryConcurrentModificationExceptionResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryUntagOpenIDConnectProviderCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryUntagOpenIDConnectProviderCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryUntagOpenIDConnectProviderCommand = deserializeAws_queryUntagOpenIDConnectProviderCommand;
    var deserializeAws_queryUntagOpenIDConnectProviderCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.iam#ConcurrentModificationException":
          throw await deserializeAws_queryConcurrentModificationExceptionResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryUntagPolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryUntagPolicyCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryUntagPolicyCommand = deserializeAws_queryUntagPolicyCommand;
    var deserializeAws_queryUntagPolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.iam#ConcurrentModificationException":
          throw await deserializeAws_queryConcurrentModificationExceptionResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryUntagRoleCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryUntagRoleCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryUntagRoleCommand = deserializeAws_queryUntagRoleCommand;
    var deserializeAws_queryUntagRoleCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.iam#ConcurrentModificationException":
          throw await deserializeAws_queryConcurrentModificationExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryUntagSAMLProviderCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryUntagSAMLProviderCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryUntagSAMLProviderCommand = deserializeAws_queryUntagSAMLProviderCommand;
    var deserializeAws_queryUntagSAMLProviderCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.iam#ConcurrentModificationException":
          throw await deserializeAws_queryConcurrentModificationExceptionResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryUntagServerCertificateCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryUntagServerCertificateCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryUntagServerCertificateCommand = deserializeAws_queryUntagServerCertificateCommand;
    var deserializeAws_queryUntagServerCertificateCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.iam#ConcurrentModificationException":
          throw await deserializeAws_queryConcurrentModificationExceptionResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryUntagUserCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryUntagUserCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryUntagUserCommand = deserializeAws_queryUntagUserCommand;
    var deserializeAws_queryUntagUserCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.iam#ConcurrentModificationException":
          throw await deserializeAws_queryConcurrentModificationExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryUpdateAccessKeyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateAccessKeyCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryUpdateAccessKeyCommand = deserializeAws_queryUpdateAccessKeyCommand;
    var deserializeAws_queryUpdateAccessKeyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryUpdateAccountPasswordPolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateAccountPasswordPolicyCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryUpdateAccountPasswordPolicyCommand = deserializeAws_queryUpdateAccountPasswordPolicyCommand;
    var deserializeAws_queryUpdateAccountPasswordPolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.iam#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryUpdateAssumeRolePolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateAssumeRolePolicyCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryUpdateAssumeRolePolicyCommand = deserializeAws_queryUpdateAssumeRolePolicyCommand;
    var deserializeAws_queryUpdateAssumeRolePolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.iam#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        case "UnmodifiableEntity":
        case "com.amazonaws.iam#UnmodifiableEntityException":
          throw await deserializeAws_queryUnmodifiableEntityExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryUpdateGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateGroupCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryUpdateGroupCommand = deserializeAws_queryUpdateGroupCommand;
    var deserializeAws_queryUpdateGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "EntityAlreadyExists":
        case "com.amazonaws.iam#EntityAlreadyExistsException":
          throw await deserializeAws_queryEntityAlreadyExistsExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryUpdateLoginProfileCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateLoginProfileCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryUpdateLoginProfileCommand = deserializeAws_queryUpdateLoginProfileCommand;
    var deserializeAws_queryUpdateLoginProfileCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "EntityTemporarilyUnmodifiable":
        case "com.amazonaws.iam#EntityTemporarilyUnmodifiableException":
          throw await deserializeAws_queryEntityTemporarilyUnmodifiableExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "PasswordPolicyViolation":
        case "com.amazonaws.iam#PasswordPolicyViolationException":
          throw await deserializeAws_queryPasswordPolicyViolationExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryUpdateOpenIDConnectProviderThumbprintCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateOpenIDConnectProviderThumbprintCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryUpdateOpenIDConnectProviderThumbprintCommand = deserializeAws_queryUpdateOpenIDConnectProviderThumbprintCommand;
    var deserializeAws_queryUpdateOpenIDConnectProviderThumbprintCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryUpdateRoleCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateRoleCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryUpdateRoleResponse(data2.UpdateRoleResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryUpdateRoleCommand = deserializeAws_queryUpdateRoleCommand;
    var deserializeAws_queryUpdateRoleCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        case "UnmodifiableEntity":
        case "com.amazonaws.iam#UnmodifiableEntityException":
          throw await deserializeAws_queryUnmodifiableEntityExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryUpdateRoleDescriptionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateRoleDescriptionCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryUpdateRoleDescriptionResponse(data2.UpdateRoleDescriptionResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryUpdateRoleDescriptionCommand = deserializeAws_queryUpdateRoleDescriptionCommand;
    var deserializeAws_queryUpdateRoleDescriptionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        case "UnmodifiableEntity":
        case "com.amazonaws.iam#UnmodifiableEntityException":
          throw await deserializeAws_queryUnmodifiableEntityExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryUpdateSAMLProviderCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateSAMLProviderCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryUpdateSAMLProviderResponse(data2.UpdateSAMLProviderResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryUpdateSAMLProviderCommand = deserializeAws_queryUpdateSAMLProviderCommand;
    var deserializeAws_queryUpdateSAMLProviderCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryUpdateServerCertificateCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateServerCertificateCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryUpdateServerCertificateCommand = deserializeAws_queryUpdateServerCertificateCommand;
    var deserializeAws_queryUpdateServerCertificateCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "EntityAlreadyExists":
        case "com.amazonaws.iam#EntityAlreadyExistsException":
          throw await deserializeAws_queryEntityAlreadyExistsExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryUpdateServiceSpecificCredentialCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateServiceSpecificCredentialCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryUpdateServiceSpecificCredentialCommand = deserializeAws_queryUpdateServiceSpecificCredentialCommand;
    var deserializeAws_queryUpdateServiceSpecificCredentialCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryUpdateSigningCertificateCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateSigningCertificateCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryUpdateSigningCertificateCommand = deserializeAws_queryUpdateSigningCertificateCommand;
    var deserializeAws_queryUpdateSigningCertificateCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryUpdateSSHPublicKeyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateSSHPublicKeyCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryUpdateSSHPublicKeyCommand = deserializeAws_queryUpdateSSHPublicKeyCommand;
    var deserializeAws_queryUpdateSSHPublicKeyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryUpdateUserCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateUserCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryUpdateUserCommand = deserializeAws_queryUpdateUserCommand;
    var deserializeAws_queryUpdateUserCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.iam#ConcurrentModificationException":
          throw await deserializeAws_queryConcurrentModificationExceptionResponse(parsedOutput, context);
        case "EntityAlreadyExists":
        case "com.amazonaws.iam#EntityAlreadyExistsException":
          throw await deserializeAws_queryEntityAlreadyExistsExceptionResponse(parsedOutput, context);
        case "EntityTemporarilyUnmodifiable":
        case "com.amazonaws.iam#EntityTemporarilyUnmodifiableException":
          throw await deserializeAws_queryEntityTemporarilyUnmodifiableExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryUploadServerCertificateCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryUploadServerCertificateCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryUploadServerCertificateResponse(data2.UploadServerCertificateResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryUploadServerCertificateCommand = deserializeAws_queryUploadServerCertificateCommand;
    var deserializeAws_queryUploadServerCertificateCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.iam#ConcurrentModificationException":
          throw await deserializeAws_queryConcurrentModificationExceptionResponse(parsedOutput, context);
        case "EntityAlreadyExists":
        case "com.amazonaws.iam#EntityAlreadyExistsException":
          throw await deserializeAws_queryEntityAlreadyExistsExceptionResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.iam#InvalidInputException":
          throw await deserializeAws_queryInvalidInputExceptionResponse(parsedOutput, context);
        case "KeyPairMismatch":
        case "com.amazonaws.iam#KeyPairMismatchException":
          throw await deserializeAws_queryKeyPairMismatchExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "MalformedCertificate":
        case "com.amazonaws.iam#MalformedCertificateException":
          throw await deserializeAws_queryMalformedCertificateExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryUploadSigningCertificateCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryUploadSigningCertificateCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryUploadSigningCertificateResponse(data2.UploadSigningCertificateResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryUploadSigningCertificateCommand = deserializeAws_queryUploadSigningCertificateCommand;
    var deserializeAws_queryUploadSigningCertificateCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DuplicateCertificate":
        case "com.amazonaws.iam#DuplicateCertificateException":
          throw await deserializeAws_queryDuplicateCertificateExceptionResponse(parsedOutput, context);
        case "EntityAlreadyExists":
        case "com.amazonaws.iam#EntityAlreadyExistsException":
          throw await deserializeAws_queryEntityAlreadyExistsExceptionResponse(parsedOutput, context);
        case "InvalidCertificate":
        case "com.amazonaws.iam#InvalidCertificateException":
          throw await deserializeAws_queryInvalidCertificateExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "MalformedCertificate":
        case "com.amazonaws.iam#MalformedCertificateException":
          throw await deserializeAws_queryMalformedCertificateExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "ServiceFailure":
        case "com.amazonaws.iam#ServiceFailureException":
          throw await deserializeAws_queryServiceFailureExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryUploadSSHPublicKeyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryUploadSSHPublicKeyCommandError(output, context);
      }
      const data2 = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryUploadSSHPublicKeyResponse(data2.UploadSSHPublicKeyResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryUploadSSHPublicKeyCommand = deserializeAws_queryUploadSSHPublicKeyCommand;
    var deserializeAws_queryUploadSSHPublicKeyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DuplicateSSHPublicKey":
        case "com.amazonaws.iam#DuplicateSSHPublicKeyException":
          throw await deserializeAws_queryDuplicateSSHPublicKeyExceptionResponse(parsedOutput, context);
        case "InvalidPublicKey":
        case "com.amazonaws.iam#InvalidPublicKeyException":
          throw await deserializeAws_queryInvalidPublicKeyExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.iam#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NoSuchEntity":
        case "com.amazonaws.iam#NoSuchEntityException":
          throw await deserializeAws_queryNoSuchEntityExceptionResponse(parsedOutput, context);
        case "UnrecognizedPublicKeyEncoding":
        case "com.amazonaws.iam#UnrecognizedPublicKeyEncodingException":
          throw await deserializeAws_queryUnrecognizedPublicKeyEncodingExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: IAMServiceException_1.IAMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryConcurrentModificationExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryConcurrentModificationException(body.Error, context);
      const exception = new models_0_1.ConcurrentModificationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryCredentialReportExpiredExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryCredentialReportExpiredException(body.Error, context);
      const exception = new models_0_1.CredentialReportExpiredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryCredentialReportNotPresentExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryCredentialReportNotPresentException(body.Error, context);
      const exception = new models_0_1.CredentialReportNotPresentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryCredentialReportNotReadyExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryCredentialReportNotReadyException(body.Error, context);
      const exception = new models_0_1.CredentialReportNotReadyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDeleteConflictExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDeleteConflictException(body.Error, context);
      const exception = new models_0_1.DeleteConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDuplicateCertificateExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDuplicateCertificateException(body.Error, context);
      const exception = new models_1_1.DuplicateCertificateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryDuplicateSSHPublicKeyExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryDuplicateSSHPublicKeyException(body.Error, context);
      const exception = new models_1_1.DuplicateSSHPublicKeyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryEntityAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryEntityAlreadyExistsException(body.Error, context);
      const exception = new models_0_1.EntityAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryEntityTemporarilyUnmodifiableExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryEntityTemporarilyUnmodifiableException(body.Error, context);
      const exception = new models_0_1.EntityTemporarilyUnmodifiableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidAuthenticationCodeExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidAuthenticationCodeException(body.Error, context);
      const exception = new models_0_1.InvalidAuthenticationCodeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidCertificateExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidCertificateException(body.Error, context);
      const exception = new models_1_1.InvalidCertificateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidInputExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidInputException(body.Error, context);
      const exception = new models_0_1.InvalidInputException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidPublicKeyExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidPublicKeyException(body.Error, context);
      const exception = new models_1_1.InvalidPublicKeyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidUserTypeExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidUserTypeException(body.Error, context);
      const exception = new models_0_1.InvalidUserTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryKeyPairMismatchExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryKeyPairMismatchException(body.Error, context);
      const exception = new models_1_1.KeyPairMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryLimitExceededException(body.Error, context);
      const exception = new models_0_1.LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryMalformedCertificateExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryMalformedCertificateException(body.Error, context);
      const exception = new models_1_1.MalformedCertificateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryMalformedPolicyDocumentExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryMalformedPolicyDocumentException(body.Error, context);
      const exception = new models_0_1.MalformedPolicyDocumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryNoSuchEntityExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryNoSuchEntityException(body.Error, context);
      const exception = new models_0_1.NoSuchEntityException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryPasswordPolicyViolationExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryPasswordPolicyViolationException(body.Error, context);
      const exception = new models_0_1.PasswordPolicyViolationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryPolicyEvaluationExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryPolicyEvaluationException(body.Error, context);
      const exception = new models_0_1.PolicyEvaluationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryPolicyNotAttachableExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryPolicyNotAttachableException(body.Error, context);
      const exception = new models_0_1.PolicyNotAttachableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryReportGenerationLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryReportGenerationLimitExceededException(body.Error, context);
      const exception = new models_0_1.ReportGenerationLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryServiceFailureExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryServiceFailureException(body.Error, context);
      const exception = new models_0_1.ServiceFailureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryServiceNotSupportedExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryServiceNotSupportedException(body.Error, context);
      const exception = new models_0_1.ServiceNotSupportedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryUnmodifiableEntityExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryUnmodifiableEntityException(body.Error, context);
      const exception = new models_0_1.UnmodifiableEntityException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryUnrecognizedPublicKeyEncodingExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryUnrecognizedPublicKeyEncodingException(body.Error, context);
      const exception = new models_0_1.UnrecognizedPublicKeyEncodingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var serializeAws_queryActionNameListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_queryAddClientIDToOpenIDConnectProviderRequest = (input, context) => {
      const entries = {};
      if (input.OpenIDConnectProviderArn != null) {
        entries["OpenIDConnectProviderArn"] = input.OpenIDConnectProviderArn;
      }
      if (input.ClientID != null) {
        entries["ClientID"] = input.ClientID;
      }
      return entries;
    };
    var serializeAws_queryAddRoleToInstanceProfileRequest = (input, context) => {
      const entries = {};
      if (input.InstanceProfileName != null) {
        entries["InstanceProfileName"] = input.InstanceProfileName;
      }
      if (input.RoleName != null) {
        entries["RoleName"] = input.RoleName;
      }
      return entries;
    };
    var serializeAws_queryAddUserToGroupRequest = (input, context) => {
      const entries = {};
      if (input.GroupName != null) {
        entries["GroupName"] = input.GroupName;
      }
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      return entries;
    };
    var serializeAws_queryAttachGroupPolicyRequest = (input, context) => {
      const entries = {};
      if (input.GroupName != null) {
        entries["GroupName"] = input.GroupName;
      }
      if (input.PolicyArn != null) {
        entries["PolicyArn"] = input.PolicyArn;
      }
      return entries;
    };
    var serializeAws_queryAttachRolePolicyRequest = (input, context) => {
      const entries = {};
      if (input.RoleName != null) {
        entries["RoleName"] = input.RoleName;
      }
      if (input.PolicyArn != null) {
        entries["PolicyArn"] = input.PolicyArn;
      }
      return entries;
    };
    var serializeAws_queryAttachUserPolicyRequest = (input, context) => {
      const entries = {};
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      if (input.PolicyArn != null) {
        entries["PolicyArn"] = input.PolicyArn;
      }
      return entries;
    };
    var serializeAws_queryChangePasswordRequest = (input, context) => {
      const entries = {};
      if (input.OldPassword != null) {
        entries["OldPassword"] = input.OldPassword;
      }
      if (input.NewPassword != null) {
        entries["NewPassword"] = input.NewPassword;
      }
      return entries;
    };
    var serializeAws_queryclientIDListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_queryContextEntry = (input, context) => {
      const entries = {};
      if (input.ContextKeyName != null) {
        entries["ContextKeyName"] = input.ContextKeyName;
      }
      if (input.ContextKeyValues != null) {
        const memberEntries = serializeAws_queryContextKeyValueListType(input.ContextKeyValues, context);
        if (input.ContextKeyValues?.length === 0) {
          entries.ContextKeyValues = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ContextKeyValues.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ContextKeyType != null) {
        entries["ContextKeyType"] = input.ContextKeyType;
      }
      return entries;
    };
    var serializeAws_queryContextEntryListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryContextEntry(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var serializeAws_queryContextKeyValueListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_queryCreateAccessKeyRequest = (input, context) => {
      const entries = {};
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      return entries;
    };
    var serializeAws_queryCreateAccountAliasRequest = (input, context) => {
      const entries = {};
      if (input.AccountAlias != null) {
        entries["AccountAlias"] = input.AccountAlias;
      }
      return entries;
    };
    var serializeAws_queryCreateGroupRequest = (input, context) => {
      const entries = {};
      if (input.Path != null) {
        entries["Path"] = input.Path;
      }
      if (input.GroupName != null) {
        entries["GroupName"] = input.GroupName;
      }
      return entries;
    };
    var serializeAws_queryCreateInstanceProfileRequest = (input, context) => {
      const entries = {};
      if (input.InstanceProfileName != null) {
        entries["InstanceProfileName"] = input.InstanceProfileName;
      }
      if (input.Path != null) {
        entries["Path"] = input.Path;
      }
      if (input.Tags != null) {
        const memberEntries = serializeAws_querytagListType(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryCreateLoginProfileRequest = (input, context) => {
      const entries = {};
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      if (input.Password != null) {
        entries["Password"] = input.Password;
      }
      if (input.PasswordResetRequired != null) {
        entries["PasswordResetRequired"] = input.PasswordResetRequired;
      }
      return entries;
    };
    var serializeAws_queryCreateOpenIDConnectProviderRequest = (input, context) => {
      const entries = {};
      if (input.Url != null) {
        entries["Url"] = input.Url;
      }
      if (input.ClientIDList != null) {
        const memberEntries = serializeAws_queryclientIDListType(input.ClientIDList, context);
        if (input.ClientIDList?.length === 0) {
          entries.ClientIDList = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ClientIDList.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ThumbprintList != null) {
        const memberEntries = serializeAws_querythumbprintListType(input.ThumbprintList, context);
        if (input.ThumbprintList?.length === 0) {
          entries.ThumbprintList = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ThumbprintList.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Tags != null) {
        const memberEntries = serializeAws_querytagListType(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryCreatePolicyRequest = (input, context) => {
      const entries = {};
      if (input.PolicyName != null) {
        entries["PolicyName"] = input.PolicyName;
      }
      if (input.Path != null) {
        entries["Path"] = input.Path;
      }
      if (input.PolicyDocument != null) {
        entries["PolicyDocument"] = input.PolicyDocument;
      }
      if (input.Description != null) {
        entries["Description"] = input.Description;
      }
      if (input.Tags != null) {
        const memberEntries = serializeAws_querytagListType(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryCreatePolicyVersionRequest = (input, context) => {
      const entries = {};
      if (input.PolicyArn != null) {
        entries["PolicyArn"] = input.PolicyArn;
      }
      if (input.PolicyDocument != null) {
        entries["PolicyDocument"] = input.PolicyDocument;
      }
      if (input.SetAsDefault != null) {
        entries["SetAsDefault"] = input.SetAsDefault;
      }
      return entries;
    };
    var serializeAws_queryCreateRoleRequest = (input, context) => {
      const entries = {};
      if (input.Path != null) {
        entries["Path"] = input.Path;
      }
      if (input.RoleName != null) {
        entries["RoleName"] = input.RoleName;
      }
      if (input.AssumeRolePolicyDocument != null) {
        entries["AssumeRolePolicyDocument"] = input.AssumeRolePolicyDocument;
      }
      if (input.Description != null) {
        entries["Description"] = input.Description;
      }
      if (input.MaxSessionDuration != null) {
        entries["MaxSessionDuration"] = input.MaxSessionDuration;
      }
      if (input.PermissionsBoundary != null) {
        entries["PermissionsBoundary"] = input.PermissionsBoundary;
      }
      if (input.Tags != null) {
        const memberEntries = serializeAws_querytagListType(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryCreateSAMLProviderRequest = (input, context) => {
      const entries = {};
      if (input.SAMLMetadataDocument != null) {
        entries["SAMLMetadataDocument"] = input.SAMLMetadataDocument;
      }
      if (input.Name != null) {
        entries["Name"] = input.Name;
      }
      if (input.Tags != null) {
        const memberEntries = serializeAws_querytagListType(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryCreateServiceLinkedRoleRequest = (input, context) => {
      const entries = {};
      if (input.AWSServiceName != null) {
        entries["AWSServiceName"] = input.AWSServiceName;
      }
      if (input.Description != null) {
        entries["Description"] = input.Description;
      }
      if (input.CustomSuffix != null) {
        entries["CustomSuffix"] = input.CustomSuffix;
      }
      return entries;
    };
    var serializeAws_queryCreateServiceSpecificCredentialRequest = (input, context) => {
      const entries = {};
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      if (input.ServiceName != null) {
        entries["ServiceName"] = input.ServiceName;
      }
      return entries;
    };
    var serializeAws_queryCreateUserRequest = (input, context) => {
      const entries = {};
      if (input.Path != null) {
        entries["Path"] = input.Path;
      }
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      if (input.PermissionsBoundary != null) {
        entries["PermissionsBoundary"] = input.PermissionsBoundary;
      }
      if (input.Tags != null) {
        const memberEntries = serializeAws_querytagListType(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryCreateVirtualMFADeviceRequest = (input, context) => {
      const entries = {};
      if (input.Path != null) {
        entries["Path"] = input.Path;
      }
      if (input.VirtualMFADeviceName != null) {
        entries["VirtualMFADeviceName"] = input.VirtualMFADeviceName;
      }
      if (input.Tags != null) {
        const memberEntries = serializeAws_querytagListType(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryDeactivateMFADeviceRequest = (input, context) => {
      const entries = {};
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      if (input.SerialNumber != null) {
        entries["SerialNumber"] = input.SerialNumber;
      }
      return entries;
    };
    var serializeAws_queryDeleteAccessKeyRequest = (input, context) => {
      const entries = {};
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      if (input.AccessKeyId != null) {
        entries["AccessKeyId"] = input.AccessKeyId;
      }
      return entries;
    };
    var serializeAws_queryDeleteAccountAliasRequest = (input, context) => {
      const entries = {};
      if (input.AccountAlias != null) {
        entries["AccountAlias"] = input.AccountAlias;
      }
      return entries;
    };
    var serializeAws_queryDeleteGroupPolicyRequest = (input, context) => {
      const entries = {};
      if (input.GroupName != null) {
        entries["GroupName"] = input.GroupName;
      }
      if (input.PolicyName != null) {
        entries["PolicyName"] = input.PolicyName;
      }
      return entries;
    };
    var serializeAws_queryDeleteGroupRequest = (input, context) => {
      const entries = {};
      if (input.GroupName != null) {
        entries["GroupName"] = input.GroupName;
      }
      return entries;
    };
    var serializeAws_queryDeleteInstanceProfileRequest = (input, context) => {
      const entries = {};
      if (input.InstanceProfileName != null) {
        entries["InstanceProfileName"] = input.InstanceProfileName;
      }
      return entries;
    };
    var serializeAws_queryDeleteLoginProfileRequest = (input, context) => {
      const entries = {};
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      return entries;
    };
    var serializeAws_queryDeleteOpenIDConnectProviderRequest = (input, context) => {
      const entries = {};
      if (input.OpenIDConnectProviderArn != null) {
        entries["OpenIDConnectProviderArn"] = input.OpenIDConnectProviderArn;
      }
      return entries;
    };
    var serializeAws_queryDeletePolicyRequest = (input, context) => {
      const entries = {};
      if (input.PolicyArn != null) {
        entries["PolicyArn"] = input.PolicyArn;
      }
      return entries;
    };
    var serializeAws_queryDeletePolicyVersionRequest = (input, context) => {
      const entries = {};
      if (input.PolicyArn != null) {
        entries["PolicyArn"] = input.PolicyArn;
      }
      if (input.VersionId != null) {
        entries["VersionId"] = input.VersionId;
      }
      return entries;
    };
    var serializeAws_queryDeleteRolePermissionsBoundaryRequest = (input, context) => {
      const entries = {};
      if (input.RoleName != null) {
        entries["RoleName"] = input.RoleName;
      }
      return entries;
    };
    var serializeAws_queryDeleteRolePolicyRequest = (input, context) => {
      const entries = {};
      if (input.RoleName != null) {
        entries["RoleName"] = input.RoleName;
      }
      if (input.PolicyName != null) {
        entries["PolicyName"] = input.PolicyName;
      }
      return entries;
    };
    var serializeAws_queryDeleteRoleRequest = (input, context) => {
      const entries = {};
      if (input.RoleName != null) {
        entries["RoleName"] = input.RoleName;
      }
      return entries;
    };
    var serializeAws_queryDeleteSAMLProviderRequest = (input, context) => {
      const entries = {};
      if (input.SAMLProviderArn != null) {
        entries["SAMLProviderArn"] = input.SAMLProviderArn;
      }
      return entries;
    };
    var serializeAws_queryDeleteServerCertificateRequest = (input, context) => {
      const entries = {};
      if (input.ServerCertificateName != null) {
        entries["ServerCertificateName"] = input.ServerCertificateName;
      }
      return entries;
    };
    var serializeAws_queryDeleteServiceLinkedRoleRequest = (input, context) => {
      const entries = {};
      if (input.RoleName != null) {
        entries["RoleName"] = input.RoleName;
      }
      return entries;
    };
    var serializeAws_queryDeleteServiceSpecificCredentialRequest = (input, context) => {
      const entries = {};
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      if (input.ServiceSpecificCredentialId != null) {
        entries["ServiceSpecificCredentialId"] = input.ServiceSpecificCredentialId;
      }
      return entries;
    };
    var serializeAws_queryDeleteSigningCertificateRequest = (input, context) => {
      const entries = {};
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      if (input.CertificateId != null) {
        entries["CertificateId"] = input.CertificateId;
      }
      return entries;
    };
    var serializeAws_queryDeleteSSHPublicKeyRequest = (input, context) => {
      const entries = {};
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      if (input.SSHPublicKeyId != null) {
        entries["SSHPublicKeyId"] = input.SSHPublicKeyId;
      }
      return entries;
    };
    var serializeAws_queryDeleteUserPermissionsBoundaryRequest = (input, context) => {
      const entries = {};
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      return entries;
    };
    var serializeAws_queryDeleteUserPolicyRequest = (input, context) => {
      const entries = {};
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      if (input.PolicyName != null) {
        entries["PolicyName"] = input.PolicyName;
      }
      return entries;
    };
    var serializeAws_queryDeleteUserRequest = (input, context) => {
      const entries = {};
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      return entries;
    };
    var serializeAws_queryDeleteVirtualMFADeviceRequest = (input, context) => {
      const entries = {};
      if (input.SerialNumber != null) {
        entries["SerialNumber"] = input.SerialNumber;
      }
      return entries;
    };
    var serializeAws_queryDetachGroupPolicyRequest = (input, context) => {
      const entries = {};
      if (input.GroupName != null) {
        entries["GroupName"] = input.GroupName;
      }
      if (input.PolicyArn != null) {
        entries["PolicyArn"] = input.PolicyArn;
      }
      return entries;
    };
    var serializeAws_queryDetachRolePolicyRequest = (input, context) => {
      const entries = {};
      if (input.RoleName != null) {
        entries["RoleName"] = input.RoleName;
      }
      if (input.PolicyArn != null) {
        entries["PolicyArn"] = input.PolicyArn;
      }
      return entries;
    };
    var serializeAws_queryDetachUserPolicyRequest = (input, context) => {
      const entries = {};
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      if (input.PolicyArn != null) {
        entries["PolicyArn"] = input.PolicyArn;
      }
      return entries;
    };
    var serializeAws_queryEnableMFADeviceRequest = (input, context) => {
      const entries = {};
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      if (input.SerialNumber != null) {
        entries["SerialNumber"] = input.SerialNumber;
      }
      if (input.AuthenticationCode1 != null) {
        entries["AuthenticationCode1"] = input.AuthenticationCode1;
      }
      if (input.AuthenticationCode2 != null) {
        entries["AuthenticationCode2"] = input.AuthenticationCode2;
      }
      return entries;
    };
    var serializeAws_queryentityListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_queryGenerateOrganizationsAccessReportRequest = (input, context) => {
      const entries = {};
      if (input.EntityPath != null) {
        entries["EntityPath"] = input.EntityPath;
      }
      if (input.OrganizationsPolicyId != null) {
        entries["OrganizationsPolicyId"] = input.OrganizationsPolicyId;
      }
      return entries;
    };
    var serializeAws_queryGenerateServiceLastAccessedDetailsRequest = (input, context) => {
      const entries = {};
      if (input.Arn != null) {
        entries["Arn"] = input.Arn;
      }
      if (input.Granularity != null) {
        entries["Granularity"] = input.Granularity;
      }
      return entries;
    };
    var serializeAws_queryGetAccessKeyLastUsedRequest = (input, context) => {
      const entries = {};
      if (input.AccessKeyId != null) {
        entries["AccessKeyId"] = input.AccessKeyId;
      }
      return entries;
    };
    var serializeAws_queryGetAccountAuthorizationDetailsRequest = (input, context) => {
      const entries = {};
      if (input.Filter != null) {
        const memberEntries = serializeAws_queryentityListType(input.Filter, context);
        if (input.Filter?.length === 0) {
          entries.Filter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filter.${key}`;
          entries[loc] = value;
        });
      }
      if (input.MaxItems != null) {
        entries["MaxItems"] = input.MaxItems;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      return entries;
    };
    var serializeAws_queryGetContextKeysForCustomPolicyRequest = (input, context) => {
      const entries = {};
      if (input.PolicyInputList != null) {
        const memberEntries = serializeAws_querySimulationPolicyListType(input.PolicyInputList, context);
        if (input.PolicyInputList?.length === 0) {
          entries.PolicyInputList = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyInputList.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryGetContextKeysForPrincipalPolicyRequest = (input, context) => {
      const entries = {};
      if (input.PolicySourceArn != null) {
        entries["PolicySourceArn"] = input.PolicySourceArn;
      }
      if (input.PolicyInputList != null) {
        const memberEntries = serializeAws_querySimulationPolicyListType(input.PolicyInputList, context);
        if (input.PolicyInputList?.length === 0) {
          entries.PolicyInputList = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyInputList.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryGetGroupPolicyRequest = (input, context) => {
      const entries = {};
      if (input.GroupName != null) {
        entries["GroupName"] = input.GroupName;
      }
      if (input.PolicyName != null) {
        entries["PolicyName"] = input.PolicyName;
      }
      return entries;
    };
    var serializeAws_queryGetGroupRequest = (input, context) => {
      const entries = {};
      if (input.GroupName != null) {
        entries["GroupName"] = input.GroupName;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      if (input.MaxItems != null) {
        entries["MaxItems"] = input.MaxItems;
      }
      return entries;
    };
    var serializeAws_queryGetInstanceProfileRequest = (input, context) => {
      const entries = {};
      if (input.InstanceProfileName != null) {
        entries["InstanceProfileName"] = input.InstanceProfileName;
      }
      return entries;
    };
    var serializeAws_queryGetLoginProfileRequest = (input, context) => {
      const entries = {};
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      return entries;
    };
    var serializeAws_queryGetOpenIDConnectProviderRequest = (input, context) => {
      const entries = {};
      if (input.OpenIDConnectProviderArn != null) {
        entries["OpenIDConnectProviderArn"] = input.OpenIDConnectProviderArn;
      }
      return entries;
    };
    var serializeAws_queryGetOrganizationsAccessReportRequest = (input, context) => {
      const entries = {};
      if (input.JobId != null) {
        entries["JobId"] = input.JobId;
      }
      if (input.MaxItems != null) {
        entries["MaxItems"] = input.MaxItems;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      if (input.SortKey != null) {
        entries["SortKey"] = input.SortKey;
      }
      return entries;
    };
    var serializeAws_queryGetPolicyRequest = (input, context) => {
      const entries = {};
      if (input.PolicyArn != null) {
        entries["PolicyArn"] = input.PolicyArn;
      }
      return entries;
    };
    var serializeAws_queryGetPolicyVersionRequest = (input, context) => {
      const entries = {};
      if (input.PolicyArn != null) {
        entries["PolicyArn"] = input.PolicyArn;
      }
      if (input.VersionId != null) {
        entries["VersionId"] = input.VersionId;
      }
      return entries;
    };
    var serializeAws_queryGetRolePolicyRequest = (input, context) => {
      const entries = {};
      if (input.RoleName != null) {
        entries["RoleName"] = input.RoleName;
      }
      if (input.PolicyName != null) {
        entries["PolicyName"] = input.PolicyName;
      }
      return entries;
    };
    var serializeAws_queryGetRoleRequest = (input, context) => {
      const entries = {};
      if (input.RoleName != null) {
        entries["RoleName"] = input.RoleName;
      }
      return entries;
    };
    var serializeAws_queryGetSAMLProviderRequest = (input, context) => {
      const entries = {};
      if (input.SAMLProviderArn != null) {
        entries["SAMLProviderArn"] = input.SAMLProviderArn;
      }
      return entries;
    };
    var serializeAws_queryGetServerCertificateRequest = (input, context) => {
      const entries = {};
      if (input.ServerCertificateName != null) {
        entries["ServerCertificateName"] = input.ServerCertificateName;
      }
      return entries;
    };
    var serializeAws_queryGetServiceLastAccessedDetailsRequest = (input, context) => {
      const entries = {};
      if (input.JobId != null) {
        entries["JobId"] = input.JobId;
      }
      if (input.MaxItems != null) {
        entries["MaxItems"] = input.MaxItems;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      return entries;
    };
    var serializeAws_queryGetServiceLastAccessedDetailsWithEntitiesRequest = (input, context) => {
      const entries = {};
      if (input.JobId != null) {
        entries["JobId"] = input.JobId;
      }
      if (input.ServiceNamespace != null) {
        entries["ServiceNamespace"] = input.ServiceNamespace;
      }
      if (input.MaxItems != null) {
        entries["MaxItems"] = input.MaxItems;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      return entries;
    };
    var serializeAws_queryGetServiceLinkedRoleDeletionStatusRequest = (input, context) => {
      const entries = {};
      if (input.DeletionTaskId != null) {
        entries["DeletionTaskId"] = input.DeletionTaskId;
      }
      return entries;
    };
    var serializeAws_queryGetSSHPublicKeyRequest = (input, context) => {
      const entries = {};
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      if (input.SSHPublicKeyId != null) {
        entries["SSHPublicKeyId"] = input.SSHPublicKeyId;
      }
      if (input.Encoding != null) {
        entries["Encoding"] = input.Encoding;
      }
      return entries;
    };
    var serializeAws_queryGetUserPolicyRequest = (input, context) => {
      const entries = {};
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      if (input.PolicyName != null) {
        entries["PolicyName"] = input.PolicyName;
      }
      return entries;
    };
    var serializeAws_queryGetUserRequest = (input, context) => {
      const entries = {};
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      return entries;
    };
    var serializeAws_queryListAccessKeysRequest = (input, context) => {
      const entries = {};
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      if (input.MaxItems != null) {
        entries["MaxItems"] = input.MaxItems;
      }
      return entries;
    };
    var serializeAws_queryListAccountAliasesRequest = (input, context) => {
      const entries = {};
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      if (input.MaxItems != null) {
        entries["MaxItems"] = input.MaxItems;
      }
      return entries;
    };
    var serializeAws_queryListAttachedGroupPoliciesRequest = (input, context) => {
      const entries = {};
      if (input.GroupName != null) {
        entries["GroupName"] = input.GroupName;
      }
      if (input.PathPrefix != null) {
        entries["PathPrefix"] = input.PathPrefix;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      if (input.MaxItems != null) {
        entries["MaxItems"] = input.MaxItems;
      }
      return entries;
    };
    var serializeAws_queryListAttachedRolePoliciesRequest = (input, context) => {
      const entries = {};
      if (input.RoleName != null) {
        entries["RoleName"] = input.RoleName;
      }
      if (input.PathPrefix != null) {
        entries["PathPrefix"] = input.PathPrefix;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      if (input.MaxItems != null) {
        entries["MaxItems"] = input.MaxItems;
      }
      return entries;
    };
    var serializeAws_queryListAttachedUserPoliciesRequest = (input, context) => {
      const entries = {};
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      if (input.PathPrefix != null) {
        entries["PathPrefix"] = input.PathPrefix;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      if (input.MaxItems != null) {
        entries["MaxItems"] = input.MaxItems;
      }
      return entries;
    };
    var serializeAws_queryListEntitiesForPolicyRequest = (input, context) => {
      const entries = {};
      if (input.PolicyArn != null) {
        entries["PolicyArn"] = input.PolicyArn;
      }
      if (input.EntityFilter != null) {
        entries["EntityFilter"] = input.EntityFilter;
      }
      if (input.PathPrefix != null) {
        entries["PathPrefix"] = input.PathPrefix;
      }
      if (input.PolicyUsageFilter != null) {
        entries["PolicyUsageFilter"] = input.PolicyUsageFilter;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      if (input.MaxItems != null) {
        entries["MaxItems"] = input.MaxItems;
      }
      return entries;
    };
    var serializeAws_queryListGroupPoliciesRequest = (input, context) => {
      const entries = {};
      if (input.GroupName != null) {
        entries["GroupName"] = input.GroupName;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      if (input.MaxItems != null) {
        entries["MaxItems"] = input.MaxItems;
      }
      return entries;
    };
    var serializeAws_queryListGroupsForUserRequest = (input, context) => {
      const entries = {};
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      if (input.MaxItems != null) {
        entries["MaxItems"] = input.MaxItems;
      }
      return entries;
    };
    var serializeAws_queryListGroupsRequest = (input, context) => {
      const entries = {};
      if (input.PathPrefix != null) {
        entries["PathPrefix"] = input.PathPrefix;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      if (input.MaxItems != null) {
        entries["MaxItems"] = input.MaxItems;
      }
      return entries;
    };
    var serializeAws_queryListInstanceProfilesForRoleRequest = (input, context) => {
      const entries = {};
      if (input.RoleName != null) {
        entries["RoleName"] = input.RoleName;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      if (input.MaxItems != null) {
        entries["MaxItems"] = input.MaxItems;
      }
      return entries;
    };
    var serializeAws_queryListInstanceProfilesRequest = (input, context) => {
      const entries = {};
      if (input.PathPrefix != null) {
        entries["PathPrefix"] = input.PathPrefix;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      if (input.MaxItems != null) {
        entries["MaxItems"] = input.MaxItems;
      }
      return entries;
    };
    var serializeAws_queryListInstanceProfileTagsRequest = (input, context) => {
      const entries = {};
      if (input.InstanceProfileName != null) {
        entries["InstanceProfileName"] = input.InstanceProfileName;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      if (input.MaxItems != null) {
        entries["MaxItems"] = input.MaxItems;
      }
      return entries;
    };
    var serializeAws_queryListMFADevicesRequest = (input, context) => {
      const entries = {};
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      if (input.MaxItems != null) {
        entries["MaxItems"] = input.MaxItems;
      }
      return entries;
    };
    var serializeAws_queryListMFADeviceTagsRequest = (input, context) => {
      const entries = {};
      if (input.SerialNumber != null) {
        entries["SerialNumber"] = input.SerialNumber;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      if (input.MaxItems != null) {
        entries["MaxItems"] = input.MaxItems;
      }
      return entries;
    };
    var serializeAws_queryListOpenIDConnectProvidersRequest = (input, context) => {
      const entries = {};
      return entries;
    };
    var serializeAws_queryListOpenIDConnectProviderTagsRequest = (input, context) => {
      const entries = {};
      if (input.OpenIDConnectProviderArn != null) {
        entries["OpenIDConnectProviderArn"] = input.OpenIDConnectProviderArn;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      if (input.MaxItems != null) {
        entries["MaxItems"] = input.MaxItems;
      }
      return entries;
    };
    var serializeAws_queryListPoliciesGrantingServiceAccessRequest = (input, context) => {
      const entries = {};
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      if (input.Arn != null) {
        entries["Arn"] = input.Arn;
      }
      if (input.ServiceNamespaces != null) {
        const memberEntries = serializeAws_queryserviceNamespaceListType(input.ServiceNamespaces, context);
        if (input.ServiceNamespaces?.length === 0) {
          entries.ServiceNamespaces = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ServiceNamespaces.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryListPoliciesRequest = (input, context) => {
      const entries = {};
      if (input.Scope != null) {
        entries["Scope"] = input.Scope;
      }
      if (input.OnlyAttached != null) {
        entries["OnlyAttached"] = input.OnlyAttached;
      }
      if (input.PathPrefix != null) {
        entries["PathPrefix"] = input.PathPrefix;
      }
      if (input.PolicyUsageFilter != null) {
        entries["PolicyUsageFilter"] = input.PolicyUsageFilter;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      if (input.MaxItems != null) {
        entries["MaxItems"] = input.MaxItems;
      }
      return entries;
    };
    var serializeAws_queryListPolicyTagsRequest = (input, context) => {
      const entries = {};
      if (input.PolicyArn != null) {
        entries["PolicyArn"] = input.PolicyArn;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      if (input.MaxItems != null) {
        entries["MaxItems"] = input.MaxItems;
      }
      return entries;
    };
    var serializeAws_queryListPolicyVersionsRequest = (input, context) => {
      const entries = {};
      if (input.PolicyArn != null) {
        entries["PolicyArn"] = input.PolicyArn;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      if (input.MaxItems != null) {
        entries["MaxItems"] = input.MaxItems;
      }
      return entries;
    };
    var serializeAws_queryListRolePoliciesRequest = (input, context) => {
      const entries = {};
      if (input.RoleName != null) {
        entries["RoleName"] = input.RoleName;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      if (input.MaxItems != null) {
        entries["MaxItems"] = input.MaxItems;
      }
      return entries;
    };
    var serializeAws_queryListRolesRequest = (input, context) => {
      const entries = {};
      if (input.PathPrefix != null) {
        entries["PathPrefix"] = input.PathPrefix;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      if (input.MaxItems != null) {
        entries["MaxItems"] = input.MaxItems;
      }
      return entries;
    };
    var serializeAws_queryListRoleTagsRequest = (input, context) => {
      const entries = {};
      if (input.RoleName != null) {
        entries["RoleName"] = input.RoleName;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      if (input.MaxItems != null) {
        entries["MaxItems"] = input.MaxItems;
      }
      return entries;
    };
    var serializeAws_queryListSAMLProvidersRequest = (input, context) => {
      const entries = {};
      return entries;
    };
    var serializeAws_queryListSAMLProviderTagsRequest = (input, context) => {
      const entries = {};
      if (input.SAMLProviderArn != null) {
        entries["SAMLProviderArn"] = input.SAMLProviderArn;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      if (input.MaxItems != null) {
        entries["MaxItems"] = input.MaxItems;
      }
      return entries;
    };
    var serializeAws_queryListServerCertificatesRequest = (input, context) => {
      const entries = {};
      if (input.PathPrefix != null) {
        entries["PathPrefix"] = input.PathPrefix;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      if (input.MaxItems != null) {
        entries["MaxItems"] = input.MaxItems;
      }
      return entries;
    };
    var serializeAws_queryListServerCertificateTagsRequest = (input, context) => {
      const entries = {};
      if (input.ServerCertificateName != null) {
        entries["ServerCertificateName"] = input.ServerCertificateName;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      if (input.MaxItems != null) {
        entries["MaxItems"] = input.MaxItems;
      }
      return entries;
    };
    var serializeAws_queryListServiceSpecificCredentialsRequest = (input, context) => {
      const entries = {};
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      if (input.ServiceName != null) {
        entries["ServiceName"] = input.ServiceName;
      }
      return entries;
    };
    var serializeAws_queryListSigningCertificatesRequest = (input, context) => {
      const entries = {};
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      if (input.MaxItems != null) {
        entries["MaxItems"] = input.MaxItems;
      }
      return entries;
    };
    var serializeAws_queryListSSHPublicKeysRequest = (input, context) => {
      const entries = {};
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      if (input.MaxItems != null) {
        entries["MaxItems"] = input.MaxItems;
      }
      return entries;
    };
    var serializeAws_queryListUserPoliciesRequest = (input, context) => {
      const entries = {};
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      if (input.MaxItems != null) {
        entries["MaxItems"] = input.MaxItems;
      }
      return entries;
    };
    var serializeAws_queryListUsersRequest = (input, context) => {
      const entries = {};
      if (input.PathPrefix != null) {
        entries["PathPrefix"] = input.PathPrefix;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      if (input.MaxItems != null) {
        entries["MaxItems"] = input.MaxItems;
      }
      return entries;
    };
    var serializeAws_queryListUserTagsRequest = (input, context) => {
      const entries = {};
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      if (input.MaxItems != null) {
        entries["MaxItems"] = input.MaxItems;
      }
      return entries;
    };
    var serializeAws_queryListVirtualMFADevicesRequest = (input, context) => {
      const entries = {};
      if (input.AssignmentStatus != null) {
        entries["AssignmentStatus"] = input.AssignmentStatus;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      if (input.MaxItems != null) {
        entries["MaxItems"] = input.MaxItems;
      }
      return entries;
    };
    var serializeAws_queryPutGroupPolicyRequest = (input, context) => {
      const entries = {};
      if (input.GroupName != null) {
        entries["GroupName"] = input.GroupName;
      }
      if (input.PolicyName != null) {
        entries["PolicyName"] = input.PolicyName;
      }
      if (input.PolicyDocument != null) {
        entries["PolicyDocument"] = input.PolicyDocument;
      }
      return entries;
    };
    var serializeAws_queryPutRolePermissionsBoundaryRequest = (input, context) => {
      const entries = {};
      if (input.RoleName != null) {
        entries["RoleName"] = input.RoleName;
      }
      if (input.PermissionsBoundary != null) {
        entries["PermissionsBoundary"] = input.PermissionsBoundary;
      }
      return entries;
    };
    var serializeAws_queryPutRolePolicyRequest = (input, context) => {
      const entries = {};
      if (input.RoleName != null) {
        entries["RoleName"] = input.RoleName;
      }
      if (input.PolicyName != null) {
        entries["PolicyName"] = input.PolicyName;
      }
      if (input.PolicyDocument != null) {
        entries["PolicyDocument"] = input.PolicyDocument;
      }
      return entries;
    };
    var serializeAws_queryPutUserPermissionsBoundaryRequest = (input, context) => {
      const entries = {};
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      if (input.PermissionsBoundary != null) {
        entries["PermissionsBoundary"] = input.PermissionsBoundary;
      }
      return entries;
    };
    var serializeAws_queryPutUserPolicyRequest = (input, context) => {
      const entries = {};
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      if (input.PolicyName != null) {
        entries["PolicyName"] = input.PolicyName;
      }
      if (input.PolicyDocument != null) {
        entries["PolicyDocument"] = input.PolicyDocument;
      }
      return entries;
    };
    var serializeAws_queryRemoveClientIDFromOpenIDConnectProviderRequest = (input, context) => {
      const entries = {};
      if (input.OpenIDConnectProviderArn != null) {
        entries["OpenIDConnectProviderArn"] = input.OpenIDConnectProviderArn;
      }
      if (input.ClientID != null) {
        entries["ClientID"] = input.ClientID;
      }
      return entries;
    };
    var serializeAws_queryRemoveRoleFromInstanceProfileRequest = (input, context) => {
      const entries = {};
      if (input.InstanceProfileName != null) {
        entries["InstanceProfileName"] = input.InstanceProfileName;
      }
      if (input.RoleName != null) {
        entries["RoleName"] = input.RoleName;
      }
      return entries;
    };
    var serializeAws_queryRemoveUserFromGroupRequest = (input, context) => {
      const entries = {};
      if (input.GroupName != null) {
        entries["GroupName"] = input.GroupName;
      }
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      return entries;
    };
    var serializeAws_queryResetServiceSpecificCredentialRequest = (input, context) => {
      const entries = {};
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      if (input.ServiceSpecificCredentialId != null) {
        entries["ServiceSpecificCredentialId"] = input.ServiceSpecificCredentialId;
      }
      return entries;
    };
    var serializeAws_queryResourceNameListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_queryResyncMFADeviceRequest = (input, context) => {
      const entries = {};
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      if (input.SerialNumber != null) {
        entries["SerialNumber"] = input.SerialNumber;
      }
      if (input.AuthenticationCode1 != null) {
        entries["AuthenticationCode1"] = input.AuthenticationCode1;
      }
      if (input.AuthenticationCode2 != null) {
        entries["AuthenticationCode2"] = input.AuthenticationCode2;
      }
      return entries;
    };
    var serializeAws_queryserviceNamespaceListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_querySetDefaultPolicyVersionRequest = (input, context) => {
      const entries = {};
      if (input.PolicyArn != null) {
        entries["PolicyArn"] = input.PolicyArn;
      }
      if (input.VersionId != null) {
        entries["VersionId"] = input.VersionId;
      }
      return entries;
    };
    var serializeAws_querySetSecurityTokenServicePreferencesRequest = (input, context) => {
      const entries = {};
      if (input.GlobalEndpointTokenVersion != null) {
        entries["GlobalEndpointTokenVersion"] = input.GlobalEndpointTokenVersion;
      }
      return entries;
    };
    var serializeAws_querySimulateCustomPolicyRequest = (input, context) => {
      const entries = {};
      if (input.PolicyInputList != null) {
        const memberEntries = serializeAws_querySimulationPolicyListType(input.PolicyInputList, context);
        if (input.PolicyInputList?.length === 0) {
          entries.PolicyInputList = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyInputList.${key}`;
          entries[loc] = value;
        });
      }
      if (input.PermissionsBoundaryPolicyInputList != null) {
        const memberEntries = serializeAws_querySimulationPolicyListType(input.PermissionsBoundaryPolicyInputList, context);
        if (input.PermissionsBoundaryPolicyInputList?.length === 0) {
          entries.PermissionsBoundaryPolicyInputList = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PermissionsBoundaryPolicyInputList.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ActionNames != null) {
        const memberEntries = serializeAws_queryActionNameListType(input.ActionNames, context);
        if (input.ActionNames?.length === 0) {
          entries.ActionNames = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ActionNames.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ResourceArns != null) {
        const memberEntries = serializeAws_queryResourceNameListType(input.ResourceArns, context);
        if (input.ResourceArns?.length === 0) {
          entries.ResourceArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ResourceArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ResourcePolicy != null) {
        entries["ResourcePolicy"] = input.ResourcePolicy;
      }
      if (input.ResourceOwner != null) {
        entries["ResourceOwner"] = input.ResourceOwner;
      }
      if (input.CallerArn != null) {
        entries["CallerArn"] = input.CallerArn;
      }
      if (input.ContextEntries != null) {
        const memberEntries = serializeAws_queryContextEntryListType(input.ContextEntries, context);
        if (input.ContextEntries?.length === 0) {
          entries.ContextEntries = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ContextEntries.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ResourceHandlingOption != null) {
        entries["ResourceHandlingOption"] = input.ResourceHandlingOption;
      }
      if (input.MaxItems != null) {
        entries["MaxItems"] = input.MaxItems;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      return entries;
    };
    var serializeAws_querySimulatePrincipalPolicyRequest = (input, context) => {
      const entries = {};
      if (input.PolicySourceArn != null) {
        entries["PolicySourceArn"] = input.PolicySourceArn;
      }
      if (input.PolicyInputList != null) {
        const memberEntries = serializeAws_querySimulationPolicyListType(input.PolicyInputList, context);
        if (input.PolicyInputList?.length === 0) {
          entries.PolicyInputList = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyInputList.${key}`;
          entries[loc] = value;
        });
      }
      if (input.PermissionsBoundaryPolicyInputList != null) {
        const memberEntries = serializeAws_querySimulationPolicyListType(input.PermissionsBoundaryPolicyInputList, context);
        if (input.PermissionsBoundaryPolicyInputList?.length === 0) {
          entries.PermissionsBoundaryPolicyInputList = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PermissionsBoundaryPolicyInputList.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ActionNames != null) {
        const memberEntries = serializeAws_queryActionNameListType(input.ActionNames, context);
        if (input.ActionNames?.length === 0) {
          entries.ActionNames = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ActionNames.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ResourceArns != null) {
        const memberEntries = serializeAws_queryResourceNameListType(input.ResourceArns, context);
        if (input.ResourceArns?.length === 0) {
          entries.ResourceArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ResourceArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ResourcePolicy != null) {
        entries["ResourcePolicy"] = input.ResourcePolicy;
      }
      if (input.ResourceOwner != null) {
        entries["ResourceOwner"] = input.ResourceOwner;
      }
      if (input.CallerArn != null) {
        entries["CallerArn"] = input.CallerArn;
      }
      if (input.ContextEntries != null) {
        const memberEntries = serializeAws_queryContextEntryListType(input.ContextEntries, context);
        if (input.ContextEntries?.length === 0) {
          entries.ContextEntries = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ContextEntries.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ResourceHandlingOption != null) {
        entries["ResourceHandlingOption"] = input.ResourceHandlingOption;
      }
      if (input.MaxItems != null) {
        entries["MaxItems"] = input.MaxItems;
      }
      if (input.Marker != null) {
        entries["Marker"] = input.Marker;
      }
      return entries;
    };
    var serializeAws_querySimulationPolicyListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_queryTag = (input, context) => {
      const entries = {};
      if (input.Key != null) {
        entries["Key"] = input.Key;
      }
      if (input.Value != null) {
        entries["Value"] = input.Value;
      }
      return entries;
    };
    var serializeAws_queryTagInstanceProfileRequest = (input, context) => {
      const entries = {};
      if (input.InstanceProfileName != null) {
        entries["InstanceProfileName"] = input.InstanceProfileName;
      }
      if (input.Tags != null) {
        const memberEntries = serializeAws_querytagListType(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_querytagKeyListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_querytagListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryTag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var serializeAws_queryTagMFADeviceRequest = (input, context) => {
      const entries = {};
      if (input.SerialNumber != null) {
        entries["SerialNumber"] = input.SerialNumber;
      }
      if (input.Tags != null) {
        const memberEntries = serializeAws_querytagListType(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryTagOpenIDConnectProviderRequest = (input, context) => {
      const entries = {};
      if (input.OpenIDConnectProviderArn != null) {
        entries["OpenIDConnectProviderArn"] = input.OpenIDConnectProviderArn;
      }
      if (input.Tags != null) {
        const memberEntries = serializeAws_querytagListType(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryTagPolicyRequest = (input, context) => {
      const entries = {};
      if (input.PolicyArn != null) {
        entries["PolicyArn"] = input.PolicyArn;
      }
      if (input.Tags != null) {
        const memberEntries = serializeAws_querytagListType(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryTagRoleRequest = (input, context) => {
      const entries = {};
      if (input.RoleName != null) {
        entries["RoleName"] = input.RoleName;
      }
      if (input.Tags != null) {
        const memberEntries = serializeAws_querytagListType(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryTagSAMLProviderRequest = (input, context) => {
      const entries = {};
      if (input.SAMLProviderArn != null) {
        entries["SAMLProviderArn"] = input.SAMLProviderArn;
      }
      if (input.Tags != null) {
        const memberEntries = serializeAws_querytagListType(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryTagServerCertificateRequest = (input, context) => {
      const entries = {};
      if (input.ServerCertificateName != null) {
        entries["ServerCertificateName"] = input.ServerCertificateName;
      }
      if (input.Tags != null) {
        const memberEntries = serializeAws_querytagListType(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryTagUserRequest = (input, context) => {
      const entries = {};
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      if (input.Tags != null) {
        const memberEntries = serializeAws_querytagListType(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_querythumbprintListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_queryUntagInstanceProfileRequest = (input, context) => {
      const entries = {};
      if (input.InstanceProfileName != null) {
        entries["InstanceProfileName"] = input.InstanceProfileName;
      }
      if (input.TagKeys != null) {
        const memberEntries = serializeAws_querytagKeyListType(input.TagKeys, context);
        if (input.TagKeys?.length === 0) {
          entries.TagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TagKeys.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryUntagMFADeviceRequest = (input, context) => {
      const entries = {};
      if (input.SerialNumber != null) {
        entries["SerialNumber"] = input.SerialNumber;
      }
      if (input.TagKeys != null) {
        const memberEntries = serializeAws_querytagKeyListType(input.TagKeys, context);
        if (input.TagKeys?.length === 0) {
          entries.TagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TagKeys.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryUntagOpenIDConnectProviderRequest = (input, context) => {
      const entries = {};
      if (input.OpenIDConnectProviderArn != null) {
        entries["OpenIDConnectProviderArn"] = input.OpenIDConnectProviderArn;
      }
      if (input.TagKeys != null) {
        const memberEntries = serializeAws_querytagKeyListType(input.TagKeys, context);
        if (input.TagKeys?.length === 0) {
          entries.TagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TagKeys.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryUntagPolicyRequest = (input, context) => {
      const entries = {};
      if (input.PolicyArn != null) {
        entries["PolicyArn"] = input.PolicyArn;
      }
      if (input.TagKeys != null) {
        const memberEntries = serializeAws_querytagKeyListType(input.TagKeys, context);
        if (input.TagKeys?.length === 0) {
          entries.TagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TagKeys.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryUntagRoleRequest = (input, context) => {
      const entries = {};
      if (input.RoleName != null) {
        entries["RoleName"] = input.RoleName;
      }
      if (input.TagKeys != null) {
        const memberEntries = serializeAws_querytagKeyListType(input.TagKeys, context);
        if (input.TagKeys?.length === 0) {
          entries.TagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TagKeys.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryUntagSAMLProviderRequest = (input, context) => {
      const entries = {};
      if (input.SAMLProviderArn != null) {
        entries["SAMLProviderArn"] = input.SAMLProviderArn;
      }
      if (input.TagKeys != null) {
        const memberEntries = serializeAws_querytagKeyListType(input.TagKeys, context);
        if (input.TagKeys?.length === 0) {
          entries.TagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TagKeys.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryUntagServerCertificateRequest = (input, context) => {
      const entries = {};
      if (input.ServerCertificateName != null) {
        entries["ServerCertificateName"] = input.ServerCertificateName;
      }
      if (input.TagKeys != null) {
        const memberEntries = serializeAws_querytagKeyListType(input.TagKeys, context);
        if (input.TagKeys?.length === 0) {
          entries.TagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TagKeys.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryUntagUserRequest = (input, context) => {
      const entries = {};
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      if (input.TagKeys != null) {
        const memberEntries = serializeAws_querytagKeyListType(input.TagKeys, context);
        if (input.TagKeys?.length === 0) {
          entries.TagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TagKeys.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryUpdateAccessKeyRequest = (input, context) => {
      const entries = {};
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      if (input.AccessKeyId != null) {
        entries["AccessKeyId"] = input.AccessKeyId;
      }
      if (input.Status != null) {
        entries["Status"] = input.Status;
      }
      return entries;
    };
    var serializeAws_queryUpdateAccountPasswordPolicyRequest = (input, context) => {
      const entries = {};
      if (input.MinimumPasswordLength != null) {
        entries["MinimumPasswordLength"] = input.MinimumPasswordLength;
      }
      if (input.RequireSymbols != null) {
        entries["RequireSymbols"] = input.RequireSymbols;
      }
      if (input.RequireNumbers != null) {
        entries["RequireNumbers"] = input.RequireNumbers;
      }
      if (input.RequireUppercaseCharacters != null) {
        entries["RequireUppercaseCharacters"] = input.RequireUppercaseCharacters;
      }
      if (input.RequireLowercaseCharacters != null) {
        entries["RequireLowercaseCharacters"] = input.RequireLowercaseCharacters;
      }
      if (input.AllowUsersToChangePassword != null) {
        entries["AllowUsersToChangePassword"] = input.AllowUsersToChangePassword;
      }
      if (input.MaxPasswordAge != null) {
        entries["MaxPasswordAge"] = input.MaxPasswordAge;
      }
      if (input.PasswordReusePrevention != null) {
        entries["PasswordReusePrevention"] = input.PasswordReusePrevention;
      }
      if (input.HardExpiry != null) {
        entries["HardExpiry"] = input.HardExpiry;
      }
      return entries;
    };
    var serializeAws_queryUpdateAssumeRolePolicyRequest = (input, context) => {
      const entries = {};
      if (input.RoleName != null) {
        entries["RoleName"] = input.RoleName;
      }
      if (input.PolicyDocument != null) {
        entries["PolicyDocument"] = input.PolicyDocument;
      }
      return entries;
    };
    var serializeAws_queryUpdateGroupRequest = (input, context) => {
      const entries = {};
      if (input.GroupName != null) {
        entries["GroupName"] = input.GroupName;
      }
      if (input.NewPath != null) {
        entries["NewPath"] = input.NewPath;
      }
      if (input.NewGroupName != null) {
        entries["NewGroupName"] = input.NewGroupName;
      }
      return entries;
    };
    var serializeAws_queryUpdateLoginProfileRequest = (input, context) => {
      const entries = {};
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      if (input.Password != null) {
        entries["Password"] = input.Password;
      }
      if (input.PasswordResetRequired != null) {
        entries["PasswordResetRequired"] = input.PasswordResetRequired;
      }
      return entries;
    };
    var serializeAws_queryUpdateOpenIDConnectProviderThumbprintRequest = (input, context) => {
      const entries = {};
      if (input.OpenIDConnectProviderArn != null) {
        entries["OpenIDConnectProviderArn"] = input.OpenIDConnectProviderArn;
      }
      if (input.ThumbprintList != null) {
        const memberEntries = serializeAws_querythumbprintListType(input.ThumbprintList, context);
        if (input.ThumbprintList?.length === 0) {
          entries.ThumbprintList = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ThumbprintList.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryUpdateRoleDescriptionRequest = (input, context) => {
      const entries = {};
      if (input.RoleName != null) {
        entries["RoleName"] = input.RoleName;
      }
      if (input.Description != null) {
        entries["Description"] = input.Description;
      }
      return entries;
    };
    var serializeAws_queryUpdateRoleRequest = (input, context) => {
      const entries = {};
      if (input.RoleName != null) {
        entries["RoleName"] = input.RoleName;
      }
      if (input.Description != null) {
        entries["Description"] = input.Description;
      }
      if (input.MaxSessionDuration != null) {
        entries["MaxSessionDuration"] = input.MaxSessionDuration;
      }
      return entries;
    };
    var serializeAws_queryUpdateSAMLProviderRequest = (input, context) => {
      const entries = {};
      if (input.SAMLMetadataDocument != null) {
        entries["SAMLMetadataDocument"] = input.SAMLMetadataDocument;
      }
      if (input.SAMLProviderArn != null) {
        entries["SAMLProviderArn"] = input.SAMLProviderArn;
      }
      return entries;
    };
    var serializeAws_queryUpdateServerCertificateRequest = (input, context) => {
      const entries = {};
      if (input.ServerCertificateName != null) {
        entries["ServerCertificateName"] = input.ServerCertificateName;
      }
      if (input.NewPath != null) {
        entries["NewPath"] = input.NewPath;
      }
      if (input.NewServerCertificateName != null) {
        entries["NewServerCertificateName"] = input.NewServerCertificateName;
      }
      return entries;
    };
    var serializeAws_queryUpdateServiceSpecificCredentialRequest = (input, context) => {
      const entries = {};
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      if (input.ServiceSpecificCredentialId != null) {
        entries["ServiceSpecificCredentialId"] = input.ServiceSpecificCredentialId;
      }
      if (input.Status != null) {
        entries["Status"] = input.Status;
      }
      return entries;
    };
    var serializeAws_queryUpdateSigningCertificateRequest = (input, context) => {
      const entries = {};
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      if (input.CertificateId != null) {
        entries["CertificateId"] = input.CertificateId;
      }
      if (input.Status != null) {
        entries["Status"] = input.Status;
      }
      return entries;
    };
    var serializeAws_queryUpdateSSHPublicKeyRequest = (input, context) => {
      const entries = {};
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      if (input.SSHPublicKeyId != null) {
        entries["SSHPublicKeyId"] = input.SSHPublicKeyId;
      }
      if (input.Status != null) {
        entries["Status"] = input.Status;
      }
      return entries;
    };
    var serializeAws_queryUpdateUserRequest = (input, context) => {
      const entries = {};
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      if (input.NewPath != null) {
        entries["NewPath"] = input.NewPath;
      }
      if (input.NewUserName != null) {
        entries["NewUserName"] = input.NewUserName;
      }
      return entries;
    };
    var serializeAws_queryUploadServerCertificateRequest = (input, context) => {
      const entries = {};
      if (input.Path != null) {
        entries["Path"] = input.Path;
      }
      if (input.ServerCertificateName != null) {
        entries["ServerCertificateName"] = input.ServerCertificateName;
      }
      if (input.CertificateBody != null) {
        entries["CertificateBody"] = input.CertificateBody;
      }
      if (input.PrivateKey != null) {
        entries["PrivateKey"] = input.PrivateKey;
      }
      if (input.CertificateChain != null) {
        entries["CertificateChain"] = input.CertificateChain;
      }
      if (input.Tags != null) {
        const memberEntries = serializeAws_querytagListType(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryUploadSigningCertificateRequest = (input, context) => {
      const entries = {};
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      if (input.CertificateBody != null) {
        entries["CertificateBody"] = input.CertificateBody;
      }
      return entries;
    };
    var serializeAws_queryUploadSSHPublicKeyRequest = (input, context) => {
      const entries = {};
      if (input.UserName != null) {
        entries["UserName"] = input.UserName;
      }
      if (input.SSHPublicKeyBody != null) {
        entries["SSHPublicKeyBody"] = input.SSHPublicKeyBody;
      }
      return entries;
    };
    var deserializeAws_queryAccessDetail = (output, context) => {
      const contents = {
        ServiceName: void 0,
        ServiceNamespace: void 0,
        Region: void 0,
        EntityPath: void 0,
        LastAuthenticatedTime: void 0,
        TotalAuthenticatedEntities: void 0
      };
      if (output["ServiceName"] !== void 0) {
        contents.ServiceName = (0, smithy_client_1.expectString)(output["ServiceName"]);
      }
      if (output["ServiceNamespace"] !== void 0) {
        contents.ServiceNamespace = (0, smithy_client_1.expectString)(output["ServiceNamespace"]);
      }
      if (output["Region"] !== void 0) {
        contents.Region = (0, smithy_client_1.expectString)(output["Region"]);
      }
      if (output["EntityPath"] !== void 0) {
        contents.EntityPath = (0, smithy_client_1.expectString)(output["EntityPath"]);
      }
      if (output["LastAuthenticatedTime"] !== void 0) {
        contents.LastAuthenticatedTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["LastAuthenticatedTime"]));
      }
      if (output["TotalAuthenticatedEntities"] !== void 0) {
        contents.TotalAuthenticatedEntities = (0, smithy_client_1.strictParseInt32)(output["TotalAuthenticatedEntities"]);
      }
      return contents;
    };
    var deserializeAws_queryAccessDetails = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryAccessDetail(entry, context);
      });
    };
    var deserializeAws_queryAccessKey = (output, context) => {
      const contents = {
        UserName: void 0,
        AccessKeyId: void 0,
        Status: void 0,
        SecretAccessKey: void 0,
        CreateDate: void 0
      };
      if (output["UserName"] !== void 0) {
        contents.UserName = (0, smithy_client_1.expectString)(output["UserName"]);
      }
      if (output["AccessKeyId"] !== void 0) {
        contents.AccessKeyId = (0, smithy_client_1.expectString)(output["AccessKeyId"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["SecretAccessKey"] !== void 0) {
        contents.SecretAccessKey = (0, smithy_client_1.expectString)(output["SecretAccessKey"]);
      }
      if (output["CreateDate"] !== void 0) {
        contents.CreateDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["CreateDate"]));
      }
      return contents;
    };
    var deserializeAws_queryAccessKeyLastUsed = (output, context) => {
      const contents = {
        LastUsedDate: void 0,
        ServiceName: void 0,
        Region: void 0
      };
      if (output["LastUsedDate"] !== void 0) {
        contents.LastUsedDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["LastUsedDate"]));
      }
      if (output["ServiceName"] !== void 0) {
        contents.ServiceName = (0, smithy_client_1.expectString)(output["ServiceName"]);
      }
      if (output["Region"] !== void 0) {
        contents.Region = (0, smithy_client_1.expectString)(output["Region"]);
      }
      return contents;
    };
    var deserializeAws_queryAccessKeyMetadata = (output, context) => {
      const contents = {
        UserName: void 0,
        AccessKeyId: void 0,
        Status: void 0,
        CreateDate: void 0
      };
      if (output["UserName"] !== void 0) {
        contents.UserName = (0, smithy_client_1.expectString)(output["UserName"]);
      }
      if (output["AccessKeyId"] !== void 0) {
        contents.AccessKeyId = (0, smithy_client_1.expectString)(output["AccessKeyId"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["CreateDate"] !== void 0) {
        contents.CreateDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["CreateDate"]));
      }
      return contents;
    };
    var deserializeAws_queryaccessKeyMetadataListType = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryAccessKeyMetadata(entry, context);
      });
    };
    var deserializeAws_queryaccountAliasListType = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_queryArnListType = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_queryAttachedPermissionsBoundary = (output, context) => {
      const contents = {
        PermissionsBoundaryType: void 0,
        PermissionsBoundaryArn: void 0
      };
      if (output["PermissionsBoundaryType"] !== void 0) {
        contents.PermissionsBoundaryType = (0, smithy_client_1.expectString)(output["PermissionsBoundaryType"]);
      }
      if (output["PermissionsBoundaryArn"] !== void 0) {
        contents.PermissionsBoundaryArn = (0, smithy_client_1.expectString)(output["PermissionsBoundaryArn"]);
      }
      return contents;
    };
    var deserializeAws_queryattachedPoliciesListType = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryAttachedPolicy(entry, context);
      });
    };
    var deserializeAws_queryAttachedPolicy = (output, context) => {
      const contents = {
        PolicyName: void 0,
        PolicyArn: void 0
      };
      if (output["PolicyName"] !== void 0) {
        contents.PolicyName = (0, smithy_client_1.expectString)(output["PolicyName"]);
      }
      if (output["PolicyArn"] !== void 0) {
        contents.PolicyArn = (0, smithy_client_1.expectString)(output["PolicyArn"]);
      }
      return contents;
    };
    var deserializeAws_querycertificateListType = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_querySigningCertificate(entry, context);
      });
    };
    var deserializeAws_queryclientIDListType = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_queryConcurrentModificationException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryContextKeyNamesResultListType = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_queryCreateAccessKeyResponse = (output, context) => {
      const contents = {
        AccessKey: void 0
      };
      if (output["AccessKey"] !== void 0) {
        contents.AccessKey = deserializeAws_queryAccessKey(output["AccessKey"], context);
      }
      return contents;
    };
    var deserializeAws_queryCreateGroupResponse = (output, context) => {
      const contents = {
        Group: void 0
      };
      if (output["Group"] !== void 0) {
        contents.Group = deserializeAws_queryGroup(output["Group"], context);
      }
      return contents;
    };
    var deserializeAws_queryCreateInstanceProfileResponse = (output, context) => {
      const contents = {
        InstanceProfile: void 0
      };
      if (output["InstanceProfile"] !== void 0) {
        contents.InstanceProfile = deserializeAws_queryInstanceProfile(output["InstanceProfile"], context);
      }
      return contents;
    };
    var deserializeAws_queryCreateLoginProfileResponse = (output, context) => {
      const contents = {
        LoginProfile: void 0
      };
      if (output["LoginProfile"] !== void 0) {
        contents.LoginProfile = deserializeAws_queryLoginProfile(output["LoginProfile"], context);
      }
      return contents;
    };
    var deserializeAws_queryCreateOpenIDConnectProviderResponse = (output, context) => {
      const contents = {
        OpenIDConnectProviderArn: void 0,
        Tags: void 0
      };
      if (output["OpenIDConnectProviderArn"] !== void 0) {
        contents.OpenIDConnectProviderArn = (0, smithy_client_1.expectString)(output["OpenIDConnectProviderArn"]);
      }
      if (output.Tags === "") {
        contents.Tags = [];
      } else if (output["Tags"] !== void 0 && output["Tags"]["member"] !== void 0) {
        contents.Tags = deserializeAws_querytagListType((0, smithy_client_1.getArrayIfSingleItem)(output["Tags"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_queryCreatePolicyResponse = (output, context) => {
      const contents = {
        Policy: void 0
      };
      if (output["Policy"] !== void 0) {
        contents.Policy = deserializeAws_queryPolicy(output["Policy"], context);
      }
      return contents;
    };
    var deserializeAws_queryCreatePolicyVersionResponse = (output, context) => {
      const contents = {
        PolicyVersion: void 0
      };
      if (output["PolicyVersion"] !== void 0) {
        contents.PolicyVersion = deserializeAws_queryPolicyVersion(output["PolicyVersion"], context);
      }
      return contents;
    };
    var deserializeAws_queryCreateRoleResponse = (output, context) => {
      const contents = {
        Role: void 0
      };
      if (output["Role"] !== void 0) {
        contents.Role = deserializeAws_queryRole(output["Role"], context);
      }
      return contents;
    };
    var deserializeAws_queryCreateSAMLProviderResponse = (output, context) => {
      const contents = {
        SAMLProviderArn: void 0,
        Tags: void 0
      };
      if (output["SAMLProviderArn"] !== void 0) {
        contents.SAMLProviderArn = (0, smithy_client_1.expectString)(output["SAMLProviderArn"]);
      }
      if (output.Tags === "") {
        contents.Tags = [];
      } else if (output["Tags"] !== void 0 && output["Tags"]["member"] !== void 0) {
        contents.Tags = deserializeAws_querytagListType((0, smithy_client_1.getArrayIfSingleItem)(output["Tags"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_queryCreateServiceLinkedRoleResponse = (output, context) => {
      const contents = {
        Role: void 0
      };
      if (output["Role"] !== void 0) {
        contents.Role = deserializeAws_queryRole(output["Role"], context);
      }
      return contents;
    };
    var deserializeAws_queryCreateServiceSpecificCredentialResponse = (output, context) => {
      const contents = {
        ServiceSpecificCredential: void 0
      };
      if (output["ServiceSpecificCredential"] !== void 0) {
        contents.ServiceSpecificCredential = deserializeAws_queryServiceSpecificCredential(output["ServiceSpecificCredential"], context);
      }
      return contents;
    };
    var deserializeAws_queryCreateUserResponse = (output, context) => {
      const contents = {
        User: void 0
      };
      if (output["User"] !== void 0) {
        contents.User = deserializeAws_queryUser(output["User"], context);
      }
      return contents;
    };
    var deserializeAws_queryCreateVirtualMFADeviceResponse = (output, context) => {
      const contents = {
        VirtualMFADevice: void 0
      };
      if (output["VirtualMFADevice"] !== void 0) {
        contents.VirtualMFADevice = deserializeAws_queryVirtualMFADevice(output["VirtualMFADevice"], context);
      }
      return contents;
    };
    var deserializeAws_queryCredentialReportExpiredException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryCredentialReportNotPresentException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryCredentialReportNotReadyException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDeleteConflictException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDeleteServiceLinkedRoleResponse = (output, context) => {
      const contents = {
        DeletionTaskId: void 0
      };
      if (output["DeletionTaskId"] !== void 0) {
        contents.DeletionTaskId = (0, smithy_client_1.expectString)(output["DeletionTaskId"]);
      }
      return contents;
    };
    var deserializeAws_queryDeletionTaskFailureReasonType = (output, context) => {
      const contents = {
        Reason: void 0,
        RoleUsageList: void 0
      };
      if (output["Reason"] !== void 0) {
        contents.Reason = (0, smithy_client_1.expectString)(output["Reason"]);
      }
      if (output.RoleUsageList === "") {
        contents.RoleUsageList = [];
      } else if (output["RoleUsageList"] !== void 0 && output["RoleUsageList"]["member"] !== void 0) {
        contents.RoleUsageList = deserializeAws_queryRoleUsageListType((0, smithy_client_1.getArrayIfSingleItem)(output["RoleUsageList"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_queryDuplicateCertificateException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryDuplicateSSHPublicKeyException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryEntityAlreadyExistsException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryEntityDetails = (output, context) => {
      const contents = {
        EntityInfo: void 0,
        LastAuthenticated: void 0
      };
      if (output["EntityInfo"] !== void 0) {
        contents.EntityInfo = deserializeAws_queryEntityInfo(output["EntityInfo"], context);
      }
      if (output["LastAuthenticated"] !== void 0) {
        contents.LastAuthenticated = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["LastAuthenticated"]));
      }
      return contents;
    };
    var deserializeAws_queryentityDetailsListType = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryEntityDetails(entry, context);
      });
    };
    var deserializeAws_queryEntityInfo = (output, context) => {
      const contents = {
        Arn: void 0,
        Name: void 0,
        Type: void 0,
        Id: void 0,
        Path: void 0
      };
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      if (output["Name"] !== void 0) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
      }
      if (output["Type"] !== void 0) {
        contents.Type = (0, smithy_client_1.expectString)(output["Type"]);
      }
      if (output["Id"] !== void 0) {
        contents.Id = (0, smithy_client_1.expectString)(output["Id"]);
      }
      if (output["Path"] !== void 0) {
        contents.Path = (0, smithy_client_1.expectString)(output["Path"]);
      }
      return contents;
    };
    var deserializeAws_queryEntityTemporarilyUnmodifiableException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryErrorDetails = (output, context) => {
      const contents = {
        Message: void 0,
        Code: void 0
      };
      if (output["Message"] !== void 0) {
        contents.Message = (0, smithy_client_1.expectString)(output["Message"]);
      }
      if (output["Code"] !== void 0) {
        contents.Code = (0, smithy_client_1.expectString)(output["Code"]);
      }
      return contents;
    };
    var deserializeAws_queryEvalDecisionDetailsType = (output, context) => {
      return output.reduce((acc, pair) => {
        if (pair["value"] === null) {
          return acc;
        }
        acc[pair["key"]] = (0, smithy_client_1.expectString)(pair["value"]);
        return acc;
      }, {});
    };
    var deserializeAws_queryEvaluationResult = (output, context) => {
      const contents = {
        EvalActionName: void 0,
        EvalResourceName: void 0,
        EvalDecision: void 0,
        MatchedStatements: void 0,
        MissingContextValues: void 0,
        OrganizationsDecisionDetail: void 0,
        PermissionsBoundaryDecisionDetail: void 0,
        EvalDecisionDetails: void 0,
        ResourceSpecificResults: void 0
      };
      if (output["EvalActionName"] !== void 0) {
        contents.EvalActionName = (0, smithy_client_1.expectString)(output["EvalActionName"]);
      }
      if (output["EvalResourceName"] !== void 0) {
        contents.EvalResourceName = (0, smithy_client_1.expectString)(output["EvalResourceName"]);
      }
      if (output["EvalDecision"] !== void 0) {
        contents.EvalDecision = (0, smithy_client_1.expectString)(output["EvalDecision"]);
      }
      if (output.MatchedStatements === "") {
        contents.MatchedStatements = [];
      } else if (output["MatchedStatements"] !== void 0 && output["MatchedStatements"]["member"] !== void 0) {
        contents.MatchedStatements = deserializeAws_queryStatementListType((0, smithy_client_1.getArrayIfSingleItem)(output["MatchedStatements"]["member"]), context);
      }
      if (output.MissingContextValues === "") {
        contents.MissingContextValues = [];
      } else if (output["MissingContextValues"] !== void 0 && output["MissingContextValues"]["member"] !== void 0) {
        contents.MissingContextValues = deserializeAws_queryContextKeyNamesResultListType((0, smithy_client_1.getArrayIfSingleItem)(output["MissingContextValues"]["member"]), context);
      }
      if (output["OrganizationsDecisionDetail"] !== void 0) {
        contents.OrganizationsDecisionDetail = deserializeAws_queryOrganizationsDecisionDetail(output["OrganizationsDecisionDetail"], context);
      }
      if (output["PermissionsBoundaryDecisionDetail"] !== void 0) {
        contents.PermissionsBoundaryDecisionDetail = deserializeAws_queryPermissionsBoundaryDecisionDetail(output["PermissionsBoundaryDecisionDetail"], context);
      }
      if (output.EvalDecisionDetails === "") {
        contents.EvalDecisionDetails = {};
      } else if (output["EvalDecisionDetails"] !== void 0 && output["EvalDecisionDetails"]["entry"] !== void 0) {
        contents.EvalDecisionDetails = deserializeAws_queryEvalDecisionDetailsType((0, smithy_client_1.getArrayIfSingleItem)(output["EvalDecisionDetails"]["entry"]), context);
      }
      if (output.ResourceSpecificResults === "") {
        contents.ResourceSpecificResults = [];
      } else if (output["ResourceSpecificResults"] !== void 0 && output["ResourceSpecificResults"]["member"] !== void 0) {
        contents.ResourceSpecificResults = deserializeAws_queryResourceSpecificResultListType((0, smithy_client_1.getArrayIfSingleItem)(output["ResourceSpecificResults"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_queryEvaluationResultsListType = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryEvaluationResult(entry, context);
      });
    };
    var deserializeAws_queryGenerateCredentialReportResponse = (output, context) => {
      const contents = {
        State: void 0,
        Description: void 0
      };
      if (output["State"] !== void 0) {
        contents.State = (0, smithy_client_1.expectString)(output["State"]);
      }
      if (output["Description"] !== void 0) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
      }
      return contents;
    };
    var deserializeAws_queryGenerateOrganizationsAccessReportResponse = (output, context) => {
      const contents = {
        JobId: void 0
      };
      if (output["JobId"] !== void 0) {
        contents.JobId = (0, smithy_client_1.expectString)(output["JobId"]);
      }
      return contents;
    };
    var deserializeAws_queryGenerateServiceLastAccessedDetailsResponse = (output, context) => {
      const contents = {
        JobId: void 0
      };
      if (output["JobId"] !== void 0) {
        contents.JobId = (0, smithy_client_1.expectString)(output["JobId"]);
      }
      return contents;
    };
    var deserializeAws_queryGetAccessKeyLastUsedResponse = (output, context) => {
      const contents = {
        UserName: void 0,
        AccessKeyLastUsed: void 0
      };
      if (output["UserName"] !== void 0) {
        contents.UserName = (0, smithy_client_1.expectString)(output["UserName"]);
      }
      if (output["AccessKeyLastUsed"] !== void 0) {
        contents.AccessKeyLastUsed = deserializeAws_queryAccessKeyLastUsed(output["AccessKeyLastUsed"], context);
      }
      return contents;
    };
    var deserializeAws_queryGetAccountAuthorizationDetailsResponse = (output, context) => {
      const contents = {
        UserDetailList: void 0,
        GroupDetailList: void 0,
        RoleDetailList: void 0,
        Policies: void 0,
        IsTruncated: void 0,
        Marker: void 0
      };
      if (output.UserDetailList === "") {
        contents.UserDetailList = [];
      } else if (output["UserDetailList"] !== void 0 && output["UserDetailList"]["member"] !== void 0) {
        contents.UserDetailList = deserializeAws_queryuserDetailListType((0, smithy_client_1.getArrayIfSingleItem)(output["UserDetailList"]["member"]), context);
      }
      if (output.GroupDetailList === "") {
        contents.GroupDetailList = [];
      } else if (output["GroupDetailList"] !== void 0 && output["GroupDetailList"]["member"] !== void 0) {
        contents.GroupDetailList = deserializeAws_querygroupDetailListType((0, smithy_client_1.getArrayIfSingleItem)(output["GroupDetailList"]["member"]), context);
      }
      if (output.RoleDetailList === "") {
        contents.RoleDetailList = [];
      } else if (output["RoleDetailList"] !== void 0 && output["RoleDetailList"]["member"] !== void 0) {
        contents.RoleDetailList = deserializeAws_queryroleDetailListType((0, smithy_client_1.getArrayIfSingleItem)(output["RoleDetailList"]["member"]), context);
      }
      if (output.Policies === "") {
        contents.Policies = [];
      } else if (output["Policies"] !== void 0 && output["Policies"]["member"] !== void 0) {
        contents.Policies = deserializeAws_queryManagedPolicyDetailListType((0, smithy_client_1.getArrayIfSingleItem)(output["Policies"]["member"]), context);
      }
      if (output["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(output["IsTruncated"]);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryGetAccountPasswordPolicyResponse = (output, context) => {
      const contents = {
        PasswordPolicy: void 0
      };
      if (output["PasswordPolicy"] !== void 0) {
        contents.PasswordPolicy = deserializeAws_queryPasswordPolicy(output["PasswordPolicy"], context);
      }
      return contents;
    };
    var deserializeAws_queryGetAccountSummaryResponse = (output, context) => {
      const contents = {
        SummaryMap: void 0
      };
      if (output.SummaryMap === "") {
        contents.SummaryMap = {};
      } else if (output["SummaryMap"] !== void 0 && output["SummaryMap"]["entry"] !== void 0) {
        contents.SummaryMap = deserializeAws_querysummaryMapType((0, smithy_client_1.getArrayIfSingleItem)(output["SummaryMap"]["entry"]), context);
      }
      return contents;
    };
    var deserializeAws_queryGetContextKeysForPolicyResponse = (output, context) => {
      const contents = {
        ContextKeyNames: void 0
      };
      if (output.ContextKeyNames === "") {
        contents.ContextKeyNames = [];
      } else if (output["ContextKeyNames"] !== void 0 && output["ContextKeyNames"]["member"] !== void 0) {
        contents.ContextKeyNames = deserializeAws_queryContextKeyNamesResultListType((0, smithy_client_1.getArrayIfSingleItem)(output["ContextKeyNames"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_queryGetCredentialReportResponse = (output, context) => {
      const contents = {
        Content: void 0,
        ReportFormat: void 0,
        GeneratedTime: void 0
      };
      if (output["Content"] !== void 0) {
        contents.Content = context.base64Decoder(output["Content"]);
      }
      if (output["ReportFormat"] !== void 0) {
        contents.ReportFormat = (0, smithy_client_1.expectString)(output["ReportFormat"]);
      }
      if (output["GeneratedTime"] !== void 0) {
        contents.GeneratedTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["GeneratedTime"]));
      }
      return contents;
    };
    var deserializeAws_queryGetGroupPolicyResponse = (output, context) => {
      const contents = {
        GroupName: void 0,
        PolicyName: void 0,
        PolicyDocument: void 0
      };
      if (output["GroupName"] !== void 0) {
        contents.GroupName = (0, smithy_client_1.expectString)(output["GroupName"]);
      }
      if (output["PolicyName"] !== void 0) {
        contents.PolicyName = (0, smithy_client_1.expectString)(output["PolicyName"]);
      }
      if (output["PolicyDocument"] !== void 0) {
        contents.PolicyDocument = (0, smithy_client_1.expectString)(output["PolicyDocument"]);
      }
      return contents;
    };
    var deserializeAws_queryGetGroupResponse = (output, context) => {
      const contents = {
        Group: void 0,
        Users: void 0,
        IsTruncated: void 0,
        Marker: void 0
      };
      if (output["Group"] !== void 0) {
        contents.Group = deserializeAws_queryGroup(output["Group"], context);
      }
      if (output.Users === "") {
        contents.Users = [];
      } else if (output["Users"] !== void 0 && output["Users"]["member"] !== void 0) {
        contents.Users = deserializeAws_queryuserListType((0, smithy_client_1.getArrayIfSingleItem)(output["Users"]["member"]), context);
      }
      if (output["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(output["IsTruncated"]);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryGetInstanceProfileResponse = (output, context) => {
      const contents = {
        InstanceProfile: void 0
      };
      if (output["InstanceProfile"] !== void 0) {
        contents.InstanceProfile = deserializeAws_queryInstanceProfile(output["InstanceProfile"], context);
      }
      return contents;
    };
    var deserializeAws_queryGetLoginProfileResponse = (output, context) => {
      const contents = {
        LoginProfile: void 0
      };
      if (output["LoginProfile"] !== void 0) {
        contents.LoginProfile = deserializeAws_queryLoginProfile(output["LoginProfile"], context);
      }
      return contents;
    };
    var deserializeAws_queryGetOpenIDConnectProviderResponse = (output, context) => {
      const contents = {
        Url: void 0,
        ClientIDList: void 0,
        ThumbprintList: void 0,
        CreateDate: void 0,
        Tags: void 0
      };
      if (output["Url"] !== void 0) {
        contents.Url = (0, smithy_client_1.expectString)(output["Url"]);
      }
      if (output.ClientIDList === "") {
        contents.ClientIDList = [];
      } else if (output["ClientIDList"] !== void 0 && output["ClientIDList"]["member"] !== void 0) {
        contents.ClientIDList = deserializeAws_queryclientIDListType((0, smithy_client_1.getArrayIfSingleItem)(output["ClientIDList"]["member"]), context);
      }
      if (output.ThumbprintList === "") {
        contents.ThumbprintList = [];
      } else if (output["ThumbprintList"] !== void 0 && output["ThumbprintList"]["member"] !== void 0) {
        contents.ThumbprintList = deserializeAws_querythumbprintListType((0, smithy_client_1.getArrayIfSingleItem)(output["ThumbprintList"]["member"]), context);
      }
      if (output["CreateDate"] !== void 0) {
        contents.CreateDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["CreateDate"]));
      }
      if (output.Tags === "") {
        contents.Tags = [];
      } else if (output["Tags"] !== void 0 && output["Tags"]["member"] !== void 0) {
        contents.Tags = deserializeAws_querytagListType((0, smithy_client_1.getArrayIfSingleItem)(output["Tags"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_queryGetOrganizationsAccessReportResponse = (output, context) => {
      const contents = {
        JobStatus: void 0,
        JobCreationDate: void 0,
        JobCompletionDate: void 0,
        NumberOfServicesAccessible: void 0,
        NumberOfServicesNotAccessed: void 0,
        AccessDetails: void 0,
        IsTruncated: void 0,
        Marker: void 0,
        ErrorDetails: void 0
      };
      if (output["JobStatus"] !== void 0) {
        contents.JobStatus = (0, smithy_client_1.expectString)(output["JobStatus"]);
      }
      if (output["JobCreationDate"] !== void 0) {
        contents.JobCreationDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["JobCreationDate"]));
      }
      if (output["JobCompletionDate"] !== void 0) {
        contents.JobCompletionDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["JobCompletionDate"]));
      }
      if (output["NumberOfServicesAccessible"] !== void 0) {
        contents.NumberOfServicesAccessible = (0, smithy_client_1.strictParseInt32)(output["NumberOfServicesAccessible"]);
      }
      if (output["NumberOfServicesNotAccessed"] !== void 0) {
        contents.NumberOfServicesNotAccessed = (0, smithy_client_1.strictParseInt32)(output["NumberOfServicesNotAccessed"]);
      }
      if (output.AccessDetails === "") {
        contents.AccessDetails = [];
      } else if (output["AccessDetails"] !== void 0 && output["AccessDetails"]["member"] !== void 0) {
        contents.AccessDetails = deserializeAws_queryAccessDetails((0, smithy_client_1.getArrayIfSingleItem)(output["AccessDetails"]["member"]), context);
      }
      if (output["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(output["IsTruncated"]);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      if (output["ErrorDetails"] !== void 0) {
        contents.ErrorDetails = deserializeAws_queryErrorDetails(output["ErrorDetails"], context);
      }
      return contents;
    };
    var deserializeAws_queryGetPolicyResponse = (output, context) => {
      const contents = {
        Policy: void 0
      };
      if (output["Policy"] !== void 0) {
        contents.Policy = deserializeAws_queryPolicy(output["Policy"], context);
      }
      return contents;
    };
    var deserializeAws_queryGetPolicyVersionResponse = (output, context) => {
      const contents = {
        PolicyVersion: void 0
      };
      if (output["PolicyVersion"] !== void 0) {
        contents.PolicyVersion = deserializeAws_queryPolicyVersion(output["PolicyVersion"], context);
      }
      return contents;
    };
    var deserializeAws_queryGetRolePolicyResponse = (output, context) => {
      const contents = {
        RoleName: void 0,
        PolicyName: void 0,
        PolicyDocument: void 0
      };
      if (output["RoleName"] !== void 0) {
        contents.RoleName = (0, smithy_client_1.expectString)(output["RoleName"]);
      }
      if (output["PolicyName"] !== void 0) {
        contents.PolicyName = (0, smithy_client_1.expectString)(output["PolicyName"]);
      }
      if (output["PolicyDocument"] !== void 0) {
        contents.PolicyDocument = (0, smithy_client_1.expectString)(output["PolicyDocument"]);
      }
      return contents;
    };
    var deserializeAws_queryGetRoleResponse = (output, context) => {
      const contents = {
        Role: void 0
      };
      if (output["Role"] !== void 0) {
        contents.Role = deserializeAws_queryRole(output["Role"], context);
      }
      return contents;
    };
    var deserializeAws_queryGetSAMLProviderResponse = (output, context) => {
      const contents = {
        SAMLMetadataDocument: void 0,
        CreateDate: void 0,
        ValidUntil: void 0,
        Tags: void 0
      };
      if (output["SAMLMetadataDocument"] !== void 0) {
        contents.SAMLMetadataDocument = (0, smithy_client_1.expectString)(output["SAMLMetadataDocument"]);
      }
      if (output["CreateDate"] !== void 0) {
        contents.CreateDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["CreateDate"]));
      }
      if (output["ValidUntil"] !== void 0) {
        contents.ValidUntil = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["ValidUntil"]));
      }
      if (output.Tags === "") {
        contents.Tags = [];
      } else if (output["Tags"] !== void 0 && output["Tags"]["member"] !== void 0) {
        contents.Tags = deserializeAws_querytagListType((0, smithy_client_1.getArrayIfSingleItem)(output["Tags"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_queryGetServerCertificateResponse = (output, context) => {
      const contents = {
        ServerCertificate: void 0
      };
      if (output["ServerCertificate"] !== void 0) {
        contents.ServerCertificate = deserializeAws_queryServerCertificate(output["ServerCertificate"], context);
      }
      return contents;
    };
    var deserializeAws_queryGetServiceLastAccessedDetailsResponse = (output, context) => {
      const contents = {
        JobStatus: void 0,
        JobType: void 0,
        JobCreationDate: void 0,
        ServicesLastAccessed: void 0,
        JobCompletionDate: void 0,
        IsTruncated: void 0,
        Marker: void 0,
        Error: void 0
      };
      if (output["JobStatus"] !== void 0) {
        contents.JobStatus = (0, smithy_client_1.expectString)(output["JobStatus"]);
      }
      if (output["JobType"] !== void 0) {
        contents.JobType = (0, smithy_client_1.expectString)(output["JobType"]);
      }
      if (output["JobCreationDate"] !== void 0) {
        contents.JobCreationDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["JobCreationDate"]));
      }
      if (output.ServicesLastAccessed === "") {
        contents.ServicesLastAccessed = [];
      } else if (output["ServicesLastAccessed"] !== void 0 && output["ServicesLastAccessed"]["member"] !== void 0) {
        contents.ServicesLastAccessed = deserializeAws_queryServicesLastAccessed((0, smithy_client_1.getArrayIfSingleItem)(output["ServicesLastAccessed"]["member"]), context);
      }
      if (output["JobCompletionDate"] !== void 0) {
        contents.JobCompletionDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["JobCompletionDate"]));
      }
      if (output["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(output["IsTruncated"]);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      if (output["Error"] !== void 0) {
        contents.Error = deserializeAws_queryErrorDetails(output["Error"], context);
      }
      return contents;
    };
    var deserializeAws_queryGetServiceLastAccessedDetailsWithEntitiesResponse = (output, context) => {
      const contents = {
        JobStatus: void 0,
        JobCreationDate: void 0,
        JobCompletionDate: void 0,
        EntityDetailsList: void 0,
        IsTruncated: void 0,
        Marker: void 0,
        Error: void 0
      };
      if (output["JobStatus"] !== void 0) {
        contents.JobStatus = (0, smithy_client_1.expectString)(output["JobStatus"]);
      }
      if (output["JobCreationDate"] !== void 0) {
        contents.JobCreationDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["JobCreationDate"]));
      }
      if (output["JobCompletionDate"] !== void 0) {
        contents.JobCompletionDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["JobCompletionDate"]));
      }
      if (output.EntityDetailsList === "") {
        contents.EntityDetailsList = [];
      } else if (output["EntityDetailsList"] !== void 0 && output["EntityDetailsList"]["member"] !== void 0) {
        contents.EntityDetailsList = deserializeAws_queryentityDetailsListType((0, smithy_client_1.getArrayIfSingleItem)(output["EntityDetailsList"]["member"]), context);
      }
      if (output["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(output["IsTruncated"]);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      if (output["Error"] !== void 0) {
        contents.Error = deserializeAws_queryErrorDetails(output["Error"], context);
      }
      return contents;
    };
    var deserializeAws_queryGetServiceLinkedRoleDeletionStatusResponse = (output, context) => {
      const contents = {
        Status: void 0,
        Reason: void 0
      };
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["Reason"] !== void 0) {
        contents.Reason = deserializeAws_queryDeletionTaskFailureReasonType(output["Reason"], context);
      }
      return contents;
    };
    var deserializeAws_queryGetSSHPublicKeyResponse = (output, context) => {
      const contents = {
        SSHPublicKey: void 0
      };
      if (output["SSHPublicKey"] !== void 0) {
        contents.SSHPublicKey = deserializeAws_querySSHPublicKey(output["SSHPublicKey"], context);
      }
      return contents;
    };
    var deserializeAws_queryGetUserPolicyResponse = (output, context) => {
      const contents = {
        UserName: void 0,
        PolicyName: void 0,
        PolicyDocument: void 0
      };
      if (output["UserName"] !== void 0) {
        contents.UserName = (0, smithy_client_1.expectString)(output["UserName"]);
      }
      if (output["PolicyName"] !== void 0) {
        contents.PolicyName = (0, smithy_client_1.expectString)(output["PolicyName"]);
      }
      if (output["PolicyDocument"] !== void 0) {
        contents.PolicyDocument = (0, smithy_client_1.expectString)(output["PolicyDocument"]);
      }
      return contents;
    };
    var deserializeAws_queryGetUserResponse = (output, context) => {
      const contents = {
        User: void 0
      };
      if (output["User"] !== void 0) {
        contents.User = deserializeAws_queryUser(output["User"], context);
      }
      return contents;
    };
    var deserializeAws_queryGroup = (output, context) => {
      const contents = {
        Path: void 0,
        GroupName: void 0,
        GroupId: void 0,
        Arn: void 0,
        CreateDate: void 0
      };
      if (output["Path"] !== void 0) {
        contents.Path = (0, smithy_client_1.expectString)(output["Path"]);
      }
      if (output["GroupName"] !== void 0) {
        contents.GroupName = (0, smithy_client_1.expectString)(output["GroupName"]);
      }
      if (output["GroupId"] !== void 0) {
        contents.GroupId = (0, smithy_client_1.expectString)(output["GroupId"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      if (output["CreateDate"] !== void 0) {
        contents.CreateDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["CreateDate"]));
      }
      return contents;
    };
    var deserializeAws_queryGroupDetail = (output, context) => {
      const contents = {
        Path: void 0,
        GroupName: void 0,
        GroupId: void 0,
        Arn: void 0,
        CreateDate: void 0,
        GroupPolicyList: void 0,
        AttachedManagedPolicies: void 0
      };
      if (output["Path"] !== void 0) {
        contents.Path = (0, smithy_client_1.expectString)(output["Path"]);
      }
      if (output["GroupName"] !== void 0) {
        contents.GroupName = (0, smithy_client_1.expectString)(output["GroupName"]);
      }
      if (output["GroupId"] !== void 0) {
        contents.GroupId = (0, smithy_client_1.expectString)(output["GroupId"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      if (output["CreateDate"] !== void 0) {
        contents.CreateDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["CreateDate"]));
      }
      if (output.GroupPolicyList === "") {
        contents.GroupPolicyList = [];
      } else if (output["GroupPolicyList"] !== void 0 && output["GroupPolicyList"]["member"] !== void 0) {
        contents.GroupPolicyList = deserializeAws_querypolicyDetailListType((0, smithy_client_1.getArrayIfSingleItem)(output["GroupPolicyList"]["member"]), context);
      }
      if (output.AttachedManagedPolicies === "") {
        contents.AttachedManagedPolicies = [];
      } else if (output["AttachedManagedPolicies"] !== void 0 && output["AttachedManagedPolicies"]["member"] !== void 0) {
        contents.AttachedManagedPolicies = deserializeAws_queryattachedPoliciesListType((0, smithy_client_1.getArrayIfSingleItem)(output["AttachedManagedPolicies"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_querygroupDetailListType = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryGroupDetail(entry, context);
      });
    };
    var deserializeAws_querygroupListType = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryGroup(entry, context);
      });
    };
    var deserializeAws_querygroupNameListType = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_queryInstanceProfile = (output, context) => {
      const contents = {
        Path: void 0,
        InstanceProfileName: void 0,
        InstanceProfileId: void 0,
        Arn: void 0,
        CreateDate: void 0,
        Roles: void 0,
        Tags: void 0
      };
      if (output["Path"] !== void 0) {
        contents.Path = (0, smithy_client_1.expectString)(output["Path"]);
      }
      if (output["InstanceProfileName"] !== void 0) {
        contents.InstanceProfileName = (0, smithy_client_1.expectString)(output["InstanceProfileName"]);
      }
      if (output["InstanceProfileId"] !== void 0) {
        contents.InstanceProfileId = (0, smithy_client_1.expectString)(output["InstanceProfileId"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      if (output["CreateDate"] !== void 0) {
        contents.CreateDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["CreateDate"]));
      }
      if (output.Roles === "") {
        contents.Roles = [];
      } else if (output["Roles"] !== void 0 && output["Roles"]["member"] !== void 0) {
        contents.Roles = deserializeAws_queryroleListType((0, smithy_client_1.getArrayIfSingleItem)(output["Roles"]["member"]), context);
      }
      if (output.Tags === "") {
        contents.Tags = [];
      } else if (output["Tags"] !== void 0 && output["Tags"]["member"] !== void 0) {
        contents.Tags = deserializeAws_querytagListType((0, smithy_client_1.getArrayIfSingleItem)(output["Tags"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_queryinstanceProfileListType = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryInstanceProfile(entry, context);
      });
    };
    var deserializeAws_queryInvalidAuthenticationCodeException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidCertificateException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidInputException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidPublicKeyException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidUserTypeException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryKeyPairMismatchException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryLimitExceededException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryListAccessKeysResponse = (output, context) => {
      const contents = {
        AccessKeyMetadata: void 0,
        IsTruncated: void 0,
        Marker: void 0
      };
      if (output.AccessKeyMetadata === "") {
        contents.AccessKeyMetadata = [];
      } else if (output["AccessKeyMetadata"] !== void 0 && output["AccessKeyMetadata"]["member"] !== void 0) {
        contents.AccessKeyMetadata = deserializeAws_queryaccessKeyMetadataListType((0, smithy_client_1.getArrayIfSingleItem)(output["AccessKeyMetadata"]["member"]), context);
      }
      if (output["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(output["IsTruncated"]);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryListAccountAliasesResponse = (output, context) => {
      const contents = {
        AccountAliases: void 0,
        IsTruncated: void 0,
        Marker: void 0
      };
      if (output.AccountAliases === "") {
        contents.AccountAliases = [];
      } else if (output["AccountAliases"] !== void 0 && output["AccountAliases"]["member"] !== void 0) {
        contents.AccountAliases = deserializeAws_queryaccountAliasListType((0, smithy_client_1.getArrayIfSingleItem)(output["AccountAliases"]["member"]), context);
      }
      if (output["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(output["IsTruncated"]);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryListAttachedGroupPoliciesResponse = (output, context) => {
      const contents = {
        AttachedPolicies: void 0,
        IsTruncated: void 0,
        Marker: void 0
      };
      if (output.AttachedPolicies === "") {
        contents.AttachedPolicies = [];
      } else if (output["AttachedPolicies"] !== void 0 && output["AttachedPolicies"]["member"] !== void 0) {
        contents.AttachedPolicies = deserializeAws_queryattachedPoliciesListType((0, smithy_client_1.getArrayIfSingleItem)(output["AttachedPolicies"]["member"]), context);
      }
      if (output["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(output["IsTruncated"]);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryListAttachedRolePoliciesResponse = (output, context) => {
      const contents = {
        AttachedPolicies: void 0,
        IsTruncated: void 0,
        Marker: void 0
      };
      if (output.AttachedPolicies === "") {
        contents.AttachedPolicies = [];
      } else if (output["AttachedPolicies"] !== void 0 && output["AttachedPolicies"]["member"] !== void 0) {
        contents.AttachedPolicies = deserializeAws_queryattachedPoliciesListType((0, smithy_client_1.getArrayIfSingleItem)(output["AttachedPolicies"]["member"]), context);
      }
      if (output["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(output["IsTruncated"]);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryListAttachedUserPoliciesResponse = (output, context) => {
      const contents = {
        AttachedPolicies: void 0,
        IsTruncated: void 0,
        Marker: void 0
      };
      if (output.AttachedPolicies === "") {
        contents.AttachedPolicies = [];
      } else if (output["AttachedPolicies"] !== void 0 && output["AttachedPolicies"]["member"] !== void 0) {
        contents.AttachedPolicies = deserializeAws_queryattachedPoliciesListType((0, smithy_client_1.getArrayIfSingleItem)(output["AttachedPolicies"]["member"]), context);
      }
      if (output["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(output["IsTruncated"]);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryListEntitiesForPolicyResponse = (output, context) => {
      const contents = {
        PolicyGroups: void 0,
        PolicyUsers: void 0,
        PolicyRoles: void 0,
        IsTruncated: void 0,
        Marker: void 0
      };
      if (output.PolicyGroups === "") {
        contents.PolicyGroups = [];
      } else if (output["PolicyGroups"] !== void 0 && output["PolicyGroups"]["member"] !== void 0) {
        contents.PolicyGroups = deserializeAws_queryPolicyGroupListType((0, smithy_client_1.getArrayIfSingleItem)(output["PolicyGroups"]["member"]), context);
      }
      if (output.PolicyUsers === "") {
        contents.PolicyUsers = [];
      } else if (output["PolicyUsers"] !== void 0 && output["PolicyUsers"]["member"] !== void 0) {
        contents.PolicyUsers = deserializeAws_queryPolicyUserListType((0, smithy_client_1.getArrayIfSingleItem)(output["PolicyUsers"]["member"]), context);
      }
      if (output.PolicyRoles === "") {
        contents.PolicyRoles = [];
      } else if (output["PolicyRoles"] !== void 0 && output["PolicyRoles"]["member"] !== void 0) {
        contents.PolicyRoles = deserializeAws_queryPolicyRoleListType((0, smithy_client_1.getArrayIfSingleItem)(output["PolicyRoles"]["member"]), context);
      }
      if (output["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(output["IsTruncated"]);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryListGroupPoliciesResponse = (output, context) => {
      const contents = {
        PolicyNames: void 0,
        IsTruncated: void 0,
        Marker: void 0
      };
      if (output.PolicyNames === "") {
        contents.PolicyNames = [];
      } else if (output["PolicyNames"] !== void 0 && output["PolicyNames"]["member"] !== void 0) {
        contents.PolicyNames = deserializeAws_querypolicyNameListType((0, smithy_client_1.getArrayIfSingleItem)(output["PolicyNames"]["member"]), context);
      }
      if (output["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(output["IsTruncated"]);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryListGroupsForUserResponse = (output, context) => {
      const contents = {
        Groups: void 0,
        IsTruncated: void 0,
        Marker: void 0
      };
      if (output.Groups === "") {
        contents.Groups = [];
      } else if (output["Groups"] !== void 0 && output["Groups"]["member"] !== void 0) {
        contents.Groups = deserializeAws_querygroupListType((0, smithy_client_1.getArrayIfSingleItem)(output["Groups"]["member"]), context);
      }
      if (output["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(output["IsTruncated"]);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryListGroupsResponse = (output, context) => {
      const contents = {
        Groups: void 0,
        IsTruncated: void 0,
        Marker: void 0
      };
      if (output.Groups === "") {
        contents.Groups = [];
      } else if (output["Groups"] !== void 0 && output["Groups"]["member"] !== void 0) {
        contents.Groups = deserializeAws_querygroupListType((0, smithy_client_1.getArrayIfSingleItem)(output["Groups"]["member"]), context);
      }
      if (output["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(output["IsTruncated"]);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryListInstanceProfilesForRoleResponse = (output, context) => {
      const contents = {
        InstanceProfiles: void 0,
        IsTruncated: void 0,
        Marker: void 0
      };
      if (output.InstanceProfiles === "") {
        contents.InstanceProfiles = [];
      } else if (output["InstanceProfiles"] !== void 0 && output["InstanceProfiles"]["member"] !== void 0) {
        contents.InstanceProfiles = deserializeAws_queryinstanceProfileListType((0, smithy_client_1.getArrayIfSingleItem)(output["InstanceProfiles"]["member"]), context);
      }
      if (output["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(output["IsTruncated"]);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryListInstanceProfilesResponse = (output, context) => {
      const contents = {
        InstanceProfiles: void 0,
        IsTruncated: void 0,
        Marker: void 0
      };
      if (output.InstanceProfiles === "") {
        contents.InstanceProfiles = [];
      } else if (output["InstanceProfiles"] !== void 0 && output["InstanceProfiles"]["member"] !== void 0) {
        contents.InstanceProfiles = deserializeAws_queryinstanceProfileListType((0, smithy_client_1.getArrayIfSingleItem)(output["InstanceProfiles"]["member"]), context);
      }
      if (output["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(output["IsTruncated"]);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryListInstanceProfileTagsResponse = (output, context) => {
      const contents = {
        Tags: void 0,
        IsTruncated: void 0,
        Marker: void 0
      };
      if (output.Tags === "") {
        contents.Tags = [];
      } else if (output["Tags"] !== void 0 && output["Tags"]["member"] !== void 0) {
        contents.Tags = deserializeAws_querytagListType((0, smithy_client_1.getArrayIfSingleItem)(output["Tags"]["member"]), context);
      }
      if (output["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(output["IsTruncated"]);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryListMFADevicesResponse = (output, context) => {
      const contents = {
        MFADevices: void 0,
        IsTruncated: void 0,
        Marker: void 0
      };
      if (output.MFADevices === "") {
        contents.MFADevices = [];
      } else if (output["MFADevices"] !== void 0 && output["MFADevices"]["member"] !== void 0) {
        contents.MFADevices = deserializeAws_querymfaDeviceListType((0, smithy_client_1.getArrayIfSingleItem)(output["MFADevices"]["member"]), context);
      }
      if (output["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(output["IsTruncated"]);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryListMFADeviceTagsResponse = (output, context) => {
      const contents = {
        Tags: void 0,
        IsTruncated: void 0,
        Marker: void 0
      };
      if (output.Tags === "") {
        contents.Tags = [];
      } else if (output["Tags"] !== void 0 && output["Tags"]["member"] !== void 0) {
        contents.Tags = deserializeAws_querytagListType((0, smithy_client_1.getArrayIfSingleItem)(output["Tags"]["member"]), context);
      }
      if (output["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(output["IsTruncated"]);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryListOpenIDConnectProvidersResponse = (output, context) => {
      const contents = {
        OpenIDConnectProviderList: void 0
      };
      if (output.OpenIDConnectProviderList === "") {
        contents.OpenIDConnectProviderList = [];
      } else if (output["OpenIDConnectProviderList"] !== void 0 && output["OpenIDConnectProviderList"]["member"] !== void 0) {
        contents.OpenIDConnectProviderList = deserializeAws_queryOpenIDConnectProviderListType((0, smithy_client_1.getArrayIfSingleItem)(output["OpenIDConnectProviderList"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_queryListOpenIDConnectProviderTagsResponse = (output, context) => {
      const contents = {
        Tags: void 0,
        IsTruncated: void 0,
        Marker: void 0
      };
      if (output.Tags === "") {
        contents.Tags = [];
      } else if (output["Tags"] !== void 0 && output["Tags"]["member"] !== void 0) {
        contents.Tags = deserializeAws_querytagListType((0, smithy_client_1.getArrayIfSingleItem)(output["Tags"]["member"]), context);
      }
      if (output["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(output["IsTruncated"]);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryListPoliciesGrantingServiceAccessEntry = (output, context) => {
      const contents = {
        ServiceNamespace: void 0,
        Policies: void 0
      };
      if (output["ServiceNamespace"] !== void 0) {
        contents.ServiceNamespace = (0, smithy_client_1.expectString)(output["ServiceNamespace"]);
      }
      if (output.Policies === "") {
        contents.Policies = [];
      } else if (output["Policies"] !== void 0 && output["Policies"]["member"] !== void 0) {
        contents.Policies = deserializeAws_querypolicyGrantingServiceAccessListType((0, smithy_client_1.getArrayIfSingleItem)(output["Policies"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_queryListPoliciesGrantingServiceAccessResponse = (output, context) => {
      const contents = {
        PoliciesGrantingServiceAccess: void 0,
        IsTruncated: void 0,
        Marker: void 0
      };
      if (output.PoliciesGrantingServiceAccess === "") {
        contents.PoliciesGrantingServiceAccess = [];
      } else if (output["PoliciesGrantingServiceAccess"] !== void 0 && output["PoliciesGrantingServiceAccess"]["member"] !== void 0) {
        contents.PoliciesGrantingServiceAccess = deserializeAws_querylistPolicyGrantingServiceAccessResponseListType((0, smithy_client_1.getArrayIfSingleItem)(output["PoliciesGrantingServiceAccess"]["member"]), context);
      }
      if (output["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(output["IsTruncated"]);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryListPoliciesResponse = (output, context) => {
      const contents = {
        Policies: void 0,
        IsTruncated: void 0,
        Marker: void 0
      };
      if (output.Policies === "") {
        contents.Policies = [];
      } else if (output["Policies"] !== void 0 && output["Policies"]["member"] !== void 0) {
        contents.Policies = deserializeAws_querypolicyListType((0, smithy_client_1.getArrayIfSingleItem)(output["Policies"]["member"]), context);
      }
      if (output["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(output["IsTruncated"]);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_querylistPolicyGrantingServiceAccessResponseListType = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryListPoliciesGrantingServiceAccessEntry(entry, context);
      });
    };
    var deserializeAws_queryListPolicyTagsResponse = (output, context) => {
      const contents = {
        Tags: void 0,
        IsTruncated: void 0,
        Marker: void 0
      };
      if (output.Tags === "") {
        contents.Tags = [];
      } else if (output["Tags"] !== void 0 && output["Tags"]["member"] !== void 0) {
        contents.Tags = deserializeAws_querytagListType((0, smithy_client_1.getArrayIfSingleItem)(output["Tags"]["member"]), context);
      }
      if (output["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(output["IsTruncated"]);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryListPolicyVersionsResponse = (output, context) => {
      const contents = {
        Versions: void 0,
        IsTruncated: void 0,
        Marker: void 0
      };
      if (output.Versions === "") {
        contents.Versions = [];
      } else if (output["Versions"] !== void 0 && output["Versions"]["member"] !== void 0) {
        contents.Versions = deserializeAws_querypolicyDocumentVersionListType((0, smithy_client_1.getArrayIfSingleItem)(output["Versions"]["member"]), context);
      }
      if (output["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(output["IsTruncated"]);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryListRolePoliciesResponse = (output, context) => {
      const contents = {
        PolicyNames: void 0,
        IsTruncated: void 0,
        Marker: void 0
      };
      if (output.PolicyNames === "") {
        contents.PolicyNames = [];
      } else if (output["PolicyNames"] !== void 0 && output["PolicyNames"]["member"] !== void 0) {
        contents.PolicyNames = deserializeAws_querypolicyNameListType((0, smithy_client_1.getArrayIfSingleItem)(output["PolicyNames"]["member"]), context);
      }
      if (output["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(output["IsTruncated"]);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryListRolesResponse = (output, context) => {
      const contents = {
        Roles: void 0,
        IsTruncated: void 0,
        Marker: void 0
      };
      if (output.Roles === "") {
        contents.Roles = [];
      } else if (output["Roles"] !== void 0 && output["Roles"]["member"] !== void 0) {
        contents.Roles = deserializeAws_queryroleListType((0, smithy_client_1.getArrayIfSingleItem)(output["Roles"]["member"]), context);
      }
      if (output["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(output["IsTruncated"]);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryListRoleTagsResponse = (output, context) => {
      const contents = {
        Tags: void 0,
        IsTruncated: void 0,
        Marker: void 0
      };
      if (output.Tags === "") {
        contents.Tags = [];
      } else if (output["Tags"] !== void 0 && output["Tags"]["member"] !== void 0) {
        contents.Tags = deserializeAws_querytagListType((0, smithy_client_1.getArrayIfSingleItem)(output["Tags"]["member"]), context);
      }
      if (output["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(output["IsTruncated"]);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryListSAMLProvidersResponse = (output, context) => {
      const contents = {
        SAMLProviderList: void 0
      };
      if (output.SAMLProviderList === "") {
        contents.SAMLProviderList = [];
      } else if (output["SAMLProviderList"] !== void 0 && output["SAMLProviderList"]["member"] !== void 0) {
        contents.SAMLProviderList = deserializeAws_querySAMLProviderListType((0, smithy_client_1.getArrayIfSingleItem)(output["SAMLProviderList"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_queryListSAMLProviderTagsResponse = (output, context) => {
      const contents = {
        Tags: void 0,
        IsTruncated: void 0,
        Marker: void 0
      };
      if (output.Tags === "") {
        contents.Tags = [];
      } else if (output["Tags"] !== void 0 && output["Tags"]["member"] !== void 0) {
        contents.Tags = deserializeAws_querytagListType((0, smithy_client_1.getArrayIfSingleItem)(output["Tags"]["member"]), context);
      }
      if (output["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(output["IsTruncated"]);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryListServerCertificatesResponse = (output, context) => {
      const contents = {
        ServerCertificateMetadataList: void 0,
        IsTruncated: void 0,
        Marker: void 0
      };
      if (output.ServerCertificateMetadataList === "") {
        contents.ServerCertificateMetadataList = [];
      } else if (output["ServerCertificateMetadataList"] !== void 0 && output["ServerCertificateMetadataList"]["member"] !== void 0) {
        contents.ServerCertificateMetadataList = deserializeAws_queryserverCertificateMetadataListType((0, smithy_client_1.getArrayIfSingleItem)(output["ServerCertificateMetadataList"]["member"]), context);
      }
      if (output["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(output["IsTruncated"]);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryListServerCertificateTagsResponse = (output, context) => {
      const contents = {
        Tags: void 0,
        IsTruncated: void 0,
        Marker: void 0
      };
      if (output.Tags === "") {
        contents.Tags = [];
      } else if (output["Tags"] !== void 0 && output["Tags"]["member"] !== void 0) {
        contents.Tags = deserializeAws_querytagListType((0, smithy_client_1.getArrayIfSingleItem)(output["Tags"]["member"]), context);
      }
      if (output["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(output["IsTruncated"]);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryListServiceSpecificCredentialsResponse = (output, context) => {
      const contents = {
        ServiceSpecificCredentials: void 0
      };
      if (output.ServiceSpecificCredentials === "") {
        contents.ServiceSpecificCredentials = [];
      } else if (output["ServiceSpecificCredentials"] !== void 0 && output["ServiceSpecificCredentials"]["member"] !== void 0) {
        contents.ServiceSpecificCredentials = deserializeAws_queryServiceSpecificCredentialsListType((0, smithy_client_1.getArrayIfSingleItem)(output["ServiceSpecificCredentials"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_queryListSigningCertificatesResponse = (output, context) => {
      const contents = {
        Certificates: void 0,
        IsTruncated: void 0,
        Marker: void 0
      };
      if (output.Certificates === "") {
        contents.Certificates = [];
      } else if (output["Certificates"] !== void 0 && output["Certificates"]["member"] !== void 0) {
        contents.Certificates = deserializeAws_querycertificateListType((0, smithy_client_1.getArrayIfSingleItem)(output["Certificates"]["member"]), context);
      }
      if (output["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(output["IsTruncated"]);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryListSSHPublicKeysResponse = (output, context) => {
      const contents = {
        SSHPublicKeys: void 0,
        IsTruncated: void 0,
        Marker: void 0
      };
      if (output.SSHPublicKeys === "") {
        contents.SSHPublicKeys = [];
      } else if (output["SSHPublicKeys"] !== void 0 && output["SSHPublicKeys"]["member"] !== void 0) {
        contents.SSHPublicKeys = deserializeAws_querySSHPublicKeyListType((0, smithy_client_1.getArrayIfSingleItem)(output["SSHPublicKeys"]["member"]), context);
      }
      if (output["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(output["IsTruncated"]);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryListUserPoliciesResponse = (output, context) => {
      const contents = {
        PolicyNames: void 0,
        IsTruncated: void 0,
        Marker: void 0
      };
      if (output.PolicyNames === "") {
        contents.PolicyNames = [];
      } else if (output["PolicyNames"] !== void 0 && output["PolicyNames"]["member"] !== void 0) {
        contents.PolicyNames = deserializeAws_querypolicyNameListType((0, smithy_client_1.getArrayIfSingleItem)(output["PolicyNames"]["member"]), context);
      }
      if (output["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(output["IsTruncated"]);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryListUsersResponse = (output, context) => {
      const contents = {
        Users: void 0,
        IsTruncated: void 0,
        Marker: void 0
      };
      if (output.Users === "") {
        contents.Users = [];
      } else if (output["Users"] !== void 0 && output["Users"]["member"] !== void 0) {
        contents.Users = deserializeAws_queryuserListType((0, smithy_client_1.getArrayIfSingleItem)(output["Users"]["member"]), context);
      }
      if (output["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(output["IsTruncated"]);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryListUserTagsResponse = (output, context) => {
      const contents = {
        Tags: void 0,
        IsTruncated: void 0,
        Marker: void 0
      };
      if (output.Tags === "") {
        contents.Tags = [];
      } else if (output["Tags"] !== void 0 && output["Tags"]["member"] !== void 0) {
        contents.Tags = deserializeAws_querytagListType((0, smithy_client_1.getArrayIfSingleItem)(output["Tags"]["member"]), context);
      }
      if (output["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(output["IsTruncated"]);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryListVirtualMFADevicesResponse = (output, context) => {
      const contents = {
        VirtualMFADevices: void 0,
        IsTruncated: void 0,
        Marker: void 0
      };
      if (output.VirtualMFADevices === "") {
        contents.VirtualMFADevices = [];
      } else if (output["VirtualMFADevices"] !== void 0 && output["VirtualMFADevices"]["member"] !== void 0) {
        contents.VirtualMFADevices = deserializeAws_queryvirtualMFADeviceListType((0, smithy_client_1.getArrayIfSingleItem)(output["VirtualMFADevices"]["member"]), context);
      }
      if (output["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(output["IsTruncated"]);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_queryLoginProfile = (output, context) => {
      const contents = {
        UserName: void 0,
        CreateDate: void 0,
        PasswordResetRequired: void 0
      };
      if (output["UserName"] !== void 0) {
        contents.UserName = (0, smithy_client_1.expectString)(output["UserName"]);
      }
      if (output["CreateDate"] !== void 0) {
        contents.CreateDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["CreateDate"]));
      }
      if (output["PasswordResetRequired"] !== void 0) {
        contents.PasswordResetRequired = (0, smithy_client_1.parseBoolean)(output["PasswordResetRequired"]);
      }
      return contents;
    };
    var deserializeAws_queryMalformedCertificateException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryMalformedPolicyDocumentException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryManagedPolicyDetail = (output, context) => {
      const contents = {
        PolicyName: void 0,
        PolicyId: void 0,
        Arn: void 0,
        Path: void 0,
        DefaultVersionId: void 0,
        AttachmentCount: void 0,
        PermissionsBoundaryUsageCount: void 0,
        IsAttachable: void 0,
        Description: void 0,
        CreateDate: void 0,
        UpdateDate: void 0,
        PolicyVersionList: void 0
      };
      if (output["PolicyName"] !== void 0) {
        contents.PolicyName = (0, smithy_client_1.expectString)(output["PolicyName"]);
      }
      if (output["PolicyId"] !== void 0) {
        contents.PolicyId = (0, smithy_client_1.expectString)(output["PolicyId"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      if (output["Path"] !== void 0) {
        contents.Path = (0, smithy_client_1.expectString)(output["Path"]);
      }
      if (output["DefaultVersionId"] !== void 0) {
        contents.DefaultVersionId = (0, smithy_client_1.expectString)(output["DefaultVersionId"]);
      }
      if (output["AttachmentCount"] !== void 0) {
        contents.AttachmentCount = (0, smithy_client_1.strictParseInt32)(output["AttachmentCount"]);
      }
      if (output["PermissionsBoundaryUsageCount"] !== void 0) {
        contents.PermissionsBoundaryUsageCount = (0, smithy_client_1.strictParseInt32)(output["PermissionsBoundaryUsageCount"]);
      }
      if (output["IsAttachable"] !== void 0) {
        contents.IsAttachable = (0, smithy_client_1.parseBoolean)(output["IsAttachable"]);
      }
      if (output["Description"] !== void 0) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
      }
      if (output["CreateDate"] !== void 0) {
        contents.CreateDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["CreateDate"]));
      }
      if (output["UpdateDate"] !== void 0) {
        contents.UpdateDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["UpdateDate"]));
      }
      if (output.PolicyVersionList === "") {
        contents.PolicyVersionList = [];
      } else if (output["PolicyVersionList"] !== void 0 && output["PolicyVersionList"]["member"] !== void 0) {
        contents.PolicyVersionList = deserializeAws_querypolicyDocumentVersionListType((0, smithy_client_1.getArrayIfSingleItem)(output["PolicyVersionList"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_queryManagedPolicyDetailListType = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryManagedPolicyDetail(entry, context);
      });
    };
    var deserializeAws_queryMFADevice = (output, context) => {
      const contents = {
        UserName: void 0,
        SerialNumber: void 0,
        EnableDate: void 0
      };
      if (output["UserName"] !== void 0) {
        contents.UserName = (0, smithy_client_1.expectString)(output["UserName"]);
      }
      if (output["SerialNumber"] !== void 0) {
        contents.SerialNumber = (0, smithy_client_1.expectString)(output["SerialNumber"]);
      }
      if (output["EnableDate"] !== void 0) {
        contents.EnableDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["EnableDate"]));
      }
      return contents;
    };
    var deserializeAws_querymfaDeviceListType = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryMFADevice(entry, context);
      });
    };
    var deserializeAws_queryNoSuchEntityException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryOpenIDConnectProviderListEntry = (output, context) => {
      const contents = {
        Arn: void 0
      };
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      return contents;
    };
    var deserializeAws_queryOpenIDConnectProviderListType = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryOpenIDConnectProviderListEntry(entry, context);
      });
    };
    var deserializeAws_queryOrganizationsDecisionDetail = (output, context) => {
      const contents = {
        AllowedByOrganizations: void 0
      };
      if (output["AllowedByOrganizations"] !== void 0) {
        contents.AllowedByOrganizations = (0, smithy_client_1.parseBoolean)(output["AllowedByOrganizations"]);
      }
      return contents;
    };
    var deserializeAws_queryPasswordPolicy = (output, context) => {
      const contents = {
        MinimumPasswordLength: void 0,
        RequireSymbols: void 0,
        RequireNumbers: void 0,
        RequireUppercaseCharacters: void 0,
        RequireLowercaseCharacters: void 0,
        AllowUsersToChangePassword: void 0,
        ExpirePasswords: void 0,
        MaxPasswordAge: void 0,
        PasswordReusePrevention: void 0,
        HardExpiry: void 0
      };
      if (output["MinimumPasswordLength"] !== void 0) {
        contents.MinimumPasswordLength = (0, smithy_client_1.strictParseInt32)(output["MinimumPasswordLength"]);
      }
      if (output["RequireSymbols"] !== void 0) {
        contents.RequireSymbols = (0, smithy_client_1.parseBoolean)(output["RequireSymbols"]);
      }
      if (output["RequireNumbers"] !== void 0) {
        contents.RequireNumbers = (0, smithy_client_1.parseBoolean)(output["RequireNumbers"]);
      }
      if (output["RequireUppercaseCharacters"] !== void 0) {
        contents.RequireUppercaseCharacters = (0, smithy_client_1.parseBoolean)(output["RequireUppercaseCharacters"]);
      }
      if (output["RequireLowercaseCharacters"] !== void 0) {
        contents.RequireLowercaseCharacters = (0, smithy_client_1.parseBoolean)(output["RequireLowercaseCharacters"]);
      }
      if (output["AllowUsersToChangePassword"] !== void 0) {
        contents.AllowUsersToChangePassword = (0, smithy_client_1.parseBoolean)(output["AllowUsersToChangePassword"]);
      }
      if (output["ExpirePasswords"] !== void 0) {
        contents.ExpirePasswords = (0, smithy_client_1.parseBoolean)(output["ExpirePasswords"]);
      }
      if (output["MaxPasswordAge"] !== void 0) {
        contents.MaxPasswordAge = (0, smithy_client_1.strictParseInt32)(output["MaxPasswordAge"]);
      }
      if (output["PasswordReusePrevention"] !== void 0) {
        contents.PasswordReusePrevention = (0, smithy_client_1.strictParseInt32)(output["PasswordReusePrevention"]);
      }
      if (output["HardExpiry"] !== void 0) {
        contents.HardExpiry = (0, smithy_client_1.parseBoolean)(output["HardExpiry"]);
      }
      return contents;
    };
    var deserializeAws_queryPasswordPolicyViolationException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryPermissionsBoundaryDecisionDetail = (output, context) => {
      const contents = {
        AllowedByPermissionsBoundary: void 0
      };
      if (output["AllowedByPermissionsBoundary"] !== void 0) {
        contents.AllowedByPermissionsBoundary = (0, smithy_client_1.parseBoolean)(output["AllowedByPermissionsBoundary"]);
      }
      return contents;
    };
    var deserializeAws_queryPolicy = (output, context) => {
      const contents = {
        PolicyName: void 0,
        PolicyId: void 0,
        Arn: void 0,
        Path: void 0,
        DefaultVersionId: void 0,
        AttachmentCount: void 0,
        PermissionsBoundaryUsageCount: void 0,
        IsAttachable: void 0,
        Description: void 0,
        CreateDate: void 0,
        UpdateDate: void 0,
        Tags: void 0
      };
      if (output["PolicyName"] !== void 0) {
        contents.PolicyName = (0, smithy_client_1.expectString)(output["PolicyName"]);
      }
      if (output["PolicyId"] !== void 0) {
        contents.PolicyId = (0, smithy_client_1.expectString)(output["PolicyId"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      if (output["Path"] !== void 0) {
        contents.Path = (0, smithy_client_1.expectString)(output["Path"]);
      }
      if (output["DefaultVersionId"] !== void 0) {
        contents.DefaultVersionId = (0, smithy_client_1.expectString)(output["DefaultVersionId"]);
      }
      if (output["AttachmentCount"] !== void 0) {
        contents.AttachmentCount = (0, smithy_client_1.strictParseInt32)(output["AttachmentCount"]);
      }
      if (output["PermissionsBoundaryUsageCount"] !== void 0) {
        contents.PermissionsBoundaryUsageCount = (0, smithy_client_1.strictParseInt32)(output["PermissionsBoundaryUsageCount"]);
      }
      if (output["IsAttachable"] !== void 0) {
        contents.IsAttachable = (0, smithy_client_1.parseBoolean)(output["IsAttachable"]);
      }
      if (output["Description"] !== void 0) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
      }
      if (output["CreateDate"] !== void 0) {
        contents.CreateDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["CreateDate"]));
      }
      if (output["UpdateDate"] !== void 0) {
        contents.UpdateDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["UpdateDate"]));
      }
      if (output.Tags === "") {
        contents.Tags = [];
      } else if (output["Tags"] !== void 0 && output["Tags"]["member"] !== void 0) {
        contents.Tags = deserializeAws_querytagListType((0, smithy_client_1.getArrayIfSingleItem)(output["Tags"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_queryPolicyDetail = (output, context) => {
      const contents = {
        PolicyName: void 0,
        PolicyDocument: void 0
      };
      if (output["PolicyName"] !== void 0) {
        contents.PolicyName = (0, smithy_client_1.expectString)(output["PolicyName"]);
      }
      if (output["PolicyDocument"] !== void 0) {
        contents.PolicyDocument = (0, smithy_client_1.expectString)(output["PolicyDocument"]);
      }
      return contents;
    };
    var deserializeAws_querypolicyDetailListType = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryPolicyDetail(entry, context);
      });
    };
    var deserializeAws_querypolicyDocumentVersionListType = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryPolicyVersion(entry, context);
      });
    };
    var deserializeAws_queryPolicyEvaluationException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryPolicyGrantingServiceAccess = (output, context) => {
      const contents = {
        PolicyName: void 0,
        PolicyType: void 0,
        PolicyArn: void 0,
        EntityType: void 0,
        EntityName: void 0
      };
      if (output["PolicyName"] !== void 0) {
        contents.PolicyName = (0, smithy_client_1.expectString)(output["PolicyName"]);
      }
      if (output["PolicyType"] !== void 0) {
        contents.PolicyType = (0, smithy_client_1.expectString)(output["PolicyType"]);
      }
      if (output["PolicyArn"] !== void 0) {
        contents.PolicyArn = (0, smithy_client_1.expectString)(output["PolicyArn"]);
      }
      if (output["EntityType"] !== void 0) {
        contents.EntityType = (0, smithy_client_1.expectString)(output["EntityType"]);
      }
      if (output["EntityName"] !== void 0) {
        contents.EntityName = (0, smithy_client_1.expectString)(output["EntityName"]);
      }
      return contents;
    };
    var deserializeAws_querypolicyGrantingServiceAccessListType = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryPolicyGrantingServiceAccess(entry, context);
      });
    };
    var deserializeAws_queryPolicyGroup = (output, context) => {
      const contents = {
        GroupName: void 0,
        GroupId: void 0
      };
      if (output["GroupName"] !== void 0) {
        contents.GroupName = (0, smithy_client_1.expectString)(output["GroupName"]);
      }
      if (output["GroupId"] !== void 0) {
        contents.GroupId = (0, smithy_client_1.expectString)(output["GroupId"]);
      }
      return contents;
    };
    var deserializeAws_queryPolicyGroupListType = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryPolicyGroup(entry, context);
      });
    };
    var deserializeAws_querypolicyListType = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryPolicy(entry, context);
      });
    };
    var deserializeAws_querypolicyNameListType = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_queryPolicyNotAttachableException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryPolicyRole = (output, context) => {
      const contents = {
        RoleName: void 0,
        RoleId: void 0
      };
      if (output["RoleName"] !== void 0) {
        contents.RoleName = (0, smithy_client_1.expectString)(output["RoleName"]);
      }
      if (output["RoleId"] !== void 0) {
        contents.RoleId = (0, smithy_client_1.expectString)(output["RoleId"]);
      }
      return contents;
    };
    var deserializeAws_queryPolicyRoleListType = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryPolicyRole(entry, context);
      });
    };
    var deserializeAws_queryPolicyUser = (output, context) => {
      const contents = {
        UserName: void 0,
        UserId: void 0
      };
      if (output["UserName"] !== void 0) {
        contents.UserName = (0, smithy_client_1.expectString)(output["UserName"]);
      }
      if (output["UserId"] !== void 0) {
        contents.UserId = (0, smithy_client_1.expectString)(output["UserId"]);
      }
      return contents;
    };
    var deserializeAws_queryPolicyUserListType = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryPolicyUser(entry, context);
      });
    };
    var deserializeAws_queryPolicyVersion = (output, context) => {
      const contents = {
        Document: void 0,
        VersionId: void 0,
        IsDefaultVersion: void 0,
        CreateDate: void 0
      };
      if (output["Document"] !== void 0) {
        contents.Document = (0, smithy_client_1.expectString)(output["Document"]);
      }
      if (output["VersionId"] !== void 0) {
        contents.VersionId = (0, smithy_client_1.expectString)(output["VersionId"]);
      }
      if (output["IsDefaultVersion"] !== void 0) {
        contents.IsDefaultVersion = (0, smithy_client_1.parseBoolean)(output["IsDefaultVersion"]);
      }
      if (output["CreateDate"] !== void 0) {
        contents.CreateDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["CreateDate"]));
      }
      return contents;
    };
    var deserializeAws_queryPosition = (output, context) => {
      const contents = {
        Line: void 0,
        Column: void 0
      };
      if (output["Line"] !== void 0) {
        contents.Line = (0, smithy_client_1.strictParseInt32)(output["Line"]);
      }
      if (output["Column"] !== void 0) {
        contents.Column = (0, smithy_client_1.strictParseInt32)(output["Column"]);
      }
      return contents;
    };
    var deserializeAws_queryReportGenerationLimitExceededException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryResetServiceSpecificCredentialResponse = (output, context) => {
      const contents = {
        ServiceSpecificCredential: void 0
      };
      if (output["ServiceSpecificCredential"] !== void 0) {
        contents.ServiceSpecificCredential = deserializeAws_queryServiceSpecificCredential(output["ServiceSpecificCredential"], context);
      }
      return contents;
    };
    var deserializeAws_queryResourceSpecificResult = (output, context) => {
      const contents = {
        EvalResourceName: void 0,
        EvalResourceDecision: void 0,
        MatchedStatements: void 0,
        MissingContextValues: void 0,
        EvalDecisionDetails: void 0,
        PermissionsBoundaryDecisionDetail: void 0
      };
      if (output["EvalResourceName"] !== void 0) {
        contents.EvalResourceName = (0, smithy_client_1.expectString)(output["EvalResourceName"]);
      }
      if (output["EvalResourceDecision"] !== void 0) {
        contents.EvalResourceDecision = (0, smithy_client_1.expectString)(output["EvalResourceDecision"]);
      }
      if (output.MatchedStatements === "") {
        contents.MatchedStatements = [];
      } else if (output["MatchedStatements"] !== void 0 && output["MatchedStatements"]["member"] !== void 0) {
        contents.MatchedStatements = deserializeAws_queryStatementListType((0, smithy_client_1.getArrayIfSingleItem)(output["MatchedStatements"]["member"]), context);
      }
      if (output.MissingContextValues === "") {
        contents.MissingContextValues = [];
      } else if (output["MissingContextValues"] !== void 0 && output["MissingContextValues"]["member"] !== void 0) {
        contents.MissingContextValues = deserializeAws_queryContextKeyNamesResultListType((0, smithy_client_1.getArrayIfSingleItem)(output["MissingContextValues"]["member"]), context);
      }
      if (output.EvalDecisionDetails === "") {
        contents.EvalDecisionDetails = {};
      } else if (output["EvalDecisionDetails"] !== void 0 && output["EvalDecisionDetails"]["entry"] !== void 0) {
        contents.EvalDecisionDetails = deserializeAws_queryEvalDecisionDetailsType((0, smithy_client_1.getArrayIfSingleItem)(output["EvalDecisionDetails"]["entry"]), context);
      }
      if (output["PermissionsBoundaryDecisionDetail"] !== void 0) {
        contents.PermissionsBoundaryDecisionDetail = deserializeAws_queryPermissionsBoundaryDecisionDetail(output["PermissionsBoundaryDecisionDetail"], context);
      }
      return contents;
    };
    var deserializeAws_queryResourceSpecificResultListType = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryResourceSpecificResult(entry, context);
      });
    };
    var deserializeAws_queryRole = (output, context) => {
      const contents = {
        Path: void 0,
        RoleName: void 0,
        RoleId: void 0,
        Arn: void 0,
        CreateDate: void 0,
        AssumeRolePolicyDocument: void 0,
        Description: void 0,
        MaxSessionDuration: void 0,
        PermissionsBoundary: void 0,
        Tags: void 0,
        RoleLastUsed: void 0
      };
      if (output["Path"] !== void 0) {
        contents.Path = (0, smithy_client_1.expectString)(output["Path"]);
      }
      if (output["RoleName"] !== void 0) {
        contents.RoleName = (0, smithy_client_1.expectString)(output["RoleName"]);
      }
      if (output["RoleId"] !== void 0) {
        contents.RoleId = (0, smithy_client_1.expectString)(output["RoleId"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      if (output["CreateDate"] !== void 0) {
        contents.CreateDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["CreateDate"]));
      }
      if (output["AssumeRolePolicyDocument"] !== void 0) {
        contents.AssumeRolePolicyDocument = (0, smithy_client_1.expectString)(output["AssumeRolePolicyDocument"]);
      }
      if (output["Description"] !== void 0) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
      }
      if (output["MaxSessionDuration"] !== void 0) {
        contents.MaxSessionDuration = (0, smithy_client_1.strictParseInt32)(output["MaxSessionDuration"]);
      }
      if (output["PermissionsBoundary"] !== void 0) {
        contents.PermissionsBoundary = deserializeAws_queryAttachedPermissionsBoundary(output["PermissionsBoundary"], context);
      }
      if (output.Tags === "") {
        contents.Tags = [];
      } else if (output["Tags"] !== void 0 && output["Tags"]["member"] !== void 0) {
        contents.Tags = deserializeAws_querytagListType((0, smithy_client_1.getArrayIfSingleItem)(output["Tags"]["member"]), context);
      }
      if (output["RoleLastUsed"] !== void 0) {
        contents.RoleLastUsed = deserializeAws_queryRoleLastUsed(output["RoleLastUsed"], context);
      }
      return contents;
    };
    var deserializeAws_queryRoleDetail = (output, context) => {
      const contents = {
        Path: void 0,
        RoleName: void 0,
        RoleId: void 0,
        Arn: void 0,
        CreateDate: void 0,
        AssumeRolePolicyDocument: void 0,
        InstanceProfileList: void 0,
        RolePolicyList: void 0,
        AttachedManagedPolicies: void 0,
        PermissionsBoundary: void 0,
        Tags: void 0,
        RoleLastUsed: void 0
      };
      if (output["Path"] !== void 0) {
        contents.Path = (0, smithy_client_1.expectString)(output["Path"]);
      }
      if (output["RoleName"] !== void 0) {
        contents.RoleName = (0, smithy_client_1.expectString)(output["RoleName"]);
      }
      if (output["RoleId"] !== void 0) {
        contents.RoleId = (0, smithy_client_1.expectString)(output["RoleId"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      if (output["CreateDate"] !== void 0) {
        contents.CreateDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["CreateDate"]));
      }
      if (output["AssumeRolePolicyDocument"] !== void 0) {
        contents.AssumeRolePolicyDocument = (0, smithy_client_1.expectString)(output["AssumeRolePolicyDocument"]);
      }
      if (output.InstanceProfileList === "") {
        contents.InstanceProfileList = [];
      } else if (output["InstanceProfileList"] !== void 0 && output["InstanceProfileList"]["member"] !== void 0) {
        contents.InstanceProfileList = deserializeAws_queryinstanceProfileListType((0, smithy_client_1.getArrayIfSingleItem)(output["InstanceProfileList"]["member"]), context);
      }
      if (output.RolePolicyList === "") {
        contents.RolePolicyList = [];
      } else if (output["RolePolicyList"] !== void 0 && output["RolePolicyList"]["member"] !== void 0) {
        contents.RolePolicyList = deserializeAws_querypolicyDetailListType((0, smithy_client_1.getArrayIfSingleItem)(output["RolePolicyList"]["member"]), context);
      }
      if (output.AttachedManagedPolicies === "") {
        contents.AttachedManagedPolicies = [];
      } else if (output["AttachedManagedPolicies"] !== void 0 && output["AttachedManagedPolicies"]["member"] !== void 0) {
        contents.AttachedManagedPolicies = deserializeAws_queryattachedPoliciesListType((0, smithy_client_1.getArrayIfSingleItem)(output["AttachedManagedPolicies"]["member"]), context);
      }
      if (output["PermissionsBoundary"] !== void 0) {
        contents.PermissionsBoundary = deserializeAws_queryAttachedPermissionsBoundary(output["PermissionsBoundary"], context);
      }
      if (output.Tags === "") {
        contents.Tags = [];
      } else if (output["Tags"] !== void 0 && output["Tags"]["member"] !== void 0) {
        contents.Tags = deserializeAws_querytagListType((0, smithy_client_1.getArrayIfSingleItem)(output["Tags"]["member"]), context);
      }
      if (output["RoleLastUsed"] !== void 0) {
        contents.RoleLastUsed = deserializeAws_queryRoleLastUsed(output["RoleLastUsed"], context);
      }
      return contents;
    };
    var deserializeAws_queryroleDetailListType = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryRoleDetail(entry, context);
      });
    };
    var deserializeAws_queryRoleLastUsed = (output, context) => {
      const contents = {
        LastUsedDate: void 0,
        Region: void 0
      };
      if (output["LastUsedDate"] !== void 0) {
        contents.LastUsedDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["LastUsedDate"]));
      }
      if (output["Region"] !== void 0) {
        contents.Region = (0, smithy_client_1.expectString)(output["Region"]);
      }
      return contents;
    };
    var deserializeAws_queryroleListType = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryRole(entry, context);
      });
    };
    var deserializeAws_queryRoleUsageListType = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryRoleUsageType(entry, context);
      });
    };
    var deserializeAws_queryRoleUsageType = (output, context) => {
      const contents = {
        Region: void 0,
        Resources: void 0
      };
      if (output["Region"] !== void 0) {
        contents.Region = (0, smithy_client_1.expectString)(output["Region"]);
      }
      if (output.Resources === "") {
        contents.Resources = [];
      } else if (output["Resources"] !== void 0 && output["Resources"]["member"] !== void 0) {
        contents.Resources = deserializeAws_queryArnListType((0, smithy_client_1.getArrayIfSingleItem)(output["Resources"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_querySAMLProviderListEntry = (output, context) => {
      const contents = {
        Arn: void 0,
        ValidUntil: void 0,
        CreateDate: void 0
      };
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      if (output["ValidUntil"] !== void 0) {
        contents.ValidUntil = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["ValidUntil"]));
      }
      if (output["CreateDate"] !== void 0) {
        contents.CreateDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["CreateDate"]));
      }
      return contents;
    };
    var deserializeAws_querySAMLProviderListType = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_querySAMLProviderListEntry(entry, context);
      });
    };
    var deserializeAws_queryServerCertificate = (output, context) => {
      const contents = {
        ServerCertificateMetadata: void 0,
        CertificateBody: void 0,
        CertificateChain: void 0,
        Tags: void 0
      };
      if (output["ServerCertificateMetadata"] !== void 0) {
        contents.ServerCertificateMetadata = deserializeAws_queryServerCertificateMetadata(output["ServerCertificateMetadata"], context);
      }
      if (output["CertificateBody"] !== void 0) {
        contents.CertificateBody = (0, smithy_client_1.expectString)(output["CertificateBody"]);
      }
      if (output["CertificateChain"] !== void 0) {
        contents.CertificateChain = (0, smithy_client_1.expectString)(output["CertificateChain"]);
      }
      if (output.Tags === "") {
        contents.Tags = [];
      } else if (output["Tags"] !== void 0 && output["Tags"]["member"] !== void 0) {
        contents.Tags = deserializeAws_querytagListType((0, smithy_client_1.getArrayIfSingleItem)(output["Tags"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_queryServerCertificateMetadata = (output, context) => {
      const contents = {
        Path: void 0,
        ServerCertificateName: void 0,
        ServerCertificateId: void 0,
        Arn: void 0,
        UploadDate: void 0,
        Expiration: void 0
      };
      if (output["Path"] !== void 0) {
        contents.Path = (0, smithy_client_1.expectString)(output["Path"]);
      }
      if (output["ServerCertificateName"] !== void 0) {
        contents.ServerCertificateName = (0, smithy_client_1.expectString)(output["ServerCertificateName"]);
      }
      if (output["ServerCertificateId"] !== void 0) {
        contents.ServerCertificateId = (0, smithy_client_1.expectString)(output["ServerCertificateId"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      if (output["UploadDate"] !== void 0) {
        contents.UploadDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["UploadDate"]));
      }
      if (output["Expiration"] !== void 0) {
        contents.Expiration = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["Expiration"]));
      }
      return contents;
    };
    var deserializeAws_queryserverCertificateMetadataListType = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryServerCertificateMetadata(entry, context);
      });
    };
    var deserializeAws_queryServiceFailureException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryServiceLastAccessed = (output, context) => {
      const contents = {
        ServiceName: void 0,
        LastAuthenticated: void 0,
        ServiceNamespace: void 0,
        LastAuthenticatedEntity: void 0,
        LastAuthenticatedRegion: void 0,
        TotalAuthenticatedEntities: void 0,
        TrackedActionsLastAccessed: void 0
      };
      if (output["ServiceName"] !== void 0) {
        contents.ServiceName = (0, smithy_client_1.expectString)(output["ServiceName"]);
      }
      if (output["LastAuthenticated"] !== void 0) {
        contents.LastAuthenticated = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["LastAuthenticated"]));
      }
      if (output["ServiceNamespace"] !== void 0) {
        contents.ServiceNamespace = (0, smithy_client_1.expectString)(output["ServiceNamespace"]);
      }
      if (output["LastAuthenticatedEntity"] !== void 0) {
        contents.LastAuthenticatedEntity = (0, smithy_client_1.expectString)(output["LastAuthenticatedEntity"]);
      }
      if (output["LastAuthenticatedRegion"] !== void 0) {
        contents.LastAuthenticatedRegion = (0, smithy_client_1.expectString)(output["LastAuthenticatedRegion"]);
      }
      if (output["TotalAuthenticatedEntities"] !== void 0) {
        contents.TotalAuthenticatedEntities = (0, smithy_client_1.strictParseInt32)(output["TotalAuthenticatedEntities"]);
      }
      if (output.TrackedActionsLastAccessed === "") {
        contents.TrackedActionsLastAccessed = [];
      } else if (output["TrackedActionsLastAccessed"] !== void 0 && output["TrackedActionsLastAccessed"]["member"] !== void 0) {
        contents.TrackedActionsLastAccessed = deserializeAws_queryTrackedActionsLastAccessed((0, smithy_client_1.getArrayIfSingleItem)(output["TrackedActionsLastAccessed"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_queryServiceNotSupportedException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryServicesLastAccessed = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryServiceLastAccessed(entry, context);
      });
    };
    var deserializeAws_queryServiceSpecificCredential = (output, context) => {
      const contents = {
        CreateDate: void 0,
        ServiceName: void 0,
        ServiceUserName: void 0,
        ServicePassword: void 0,
        ServiceSpecificCredentialId: void 0,
        UserName: void 0,
        Status: void 0
      };
      if (output["CreateDate"] !== void 0) {
        contents.CreateDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["CreateDate"]));
      }
      if (output["ServiceName"] !== void 0) {
        contents.ServiceName = (0, smithy_client_1.expectString)(output["ServiceName"]);
      }
      if (output["ServiceUserName"] !== void 0) {
        contents.ServiceUserName = (0, smithy_client_1.expectString)(output["ServiceUserName"]);
      }
      if (output["ServicePassword"] !== void 0) {
        contents.ServicePassword = (0, smithy_client_1.expectString)(output["ServicePassword"]);
      }
      if (output["ServiceSpecificCredentialId"] !== void 0) {
        contents.ServiceSpecificCredentialId = (0, smithy_client_1.expectString)(output["ServiceSpecificCredentialId"]);
      }
      if (output["UserName"] !== void 0) {
        contents.UserName = (0, smithy_client_1.expectString)(output["UserName"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      return contents;
    };
    var deserializeAws_queryServiceSpecificCredentialMetadata = (output, context) => {
      const contents = {
        UserName: void 0,
        Status: void 0,
        ServiceUserName: void 0,
        CreateDate: void 0,
        ServiceSpecificCredentialId: void 0,
        ServiceName: void 0
      };
      if (output["UserName"] !== void 0) {
        contents.UserName = (0, smithy_client_1.expectString)(output["UserName"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["ServiceUserName"] !== void 0) {
        contents.ServiceUserName = (0, smithy_client_1.expectString)(output["ServiceUserName"]);
      }
      if (output["CreateDate"] !== void 0) {
        contents.CreateDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["CreateDate"]));
      }
      if (output["ServiceSpecificCredentialId"] !== void 0) {
        contents.ServiceSpecificCredentialId = (0, smithy_client_1.expectString)(output["ServiceSpecificCredentialId"]);
      }
      if (output["ServiceName"] !== void 0) {
        contents.ServiceName = (0, smithy_client_1.expectString)(output["ServiceName"]);
      }
      return contents;
    };
    var deserializeAws_queryServiceSpecificCredentialsListType = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryServiceSpecificCredentialMetadata(entry, context);
      });
    };
    var deserializeAws_querySigningCertificate = (output, context) => {
      const contents = {
        UserName: void 0,
        CertificateId: void 0,
        CertificateBody: void 0,
        Status: void 0,
        UploadDate: void 0
      };
      if (output["UserName"] !== void 0) {
        contents.UserName = (0, smithy_client_1.expectString)(output["UserName"]);
      }
      if (output["CertificateId"] !== void 0) {
        contents.CertificateId = (0, smithy_client_1.expectString)(output["CertificateId"]);
      }
      if (output["CertificateBody"] !== void 0) {
        contents.CertificateBody = (0, smithy_client_1.expectString)(output["CertificateBody"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["UploadDate"] !== void 0) {
        contents.UploadDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["UploadDate"]));
      }
      return contents;
    };
    var deserializeAws_querySimulatePolicyResponse = (output, context) => {
      const contents = {
        EvaluationResults: void 0,
        IsTruncated: void 0,
        Marker: void 0
      };
      if (output.EvaluationResults === "") {
        contents.EvaluationResults = [];
      } else if (output["EvaluationResults"] !== void 0 && output["EvaluationResults"]["member"] !== void 0) {
        contents.EvaluationResults = deserializeAws_queryEvaluationResultsListType((0, smithy_client_1.getArrayIfSingleItem)(output["EvaluationResults"]["member"]), context);
      }
      if (output["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(output["IsTruncated"]);
      }
      if (output["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
      }
      return contents;
    };
    var deserializeAws_querySSHPublicKey = (output, context) => {
      const contents = {
        UserName: void 0,
        SSHPublicKeyId: void 0,
        Fingerprint: void 0,
        SSHPublicKeyBody: void 0,
        Status: void 0,
        UploadDate: void 0
      };
      if (output["UserName"] !== void 0) {
        contents.UserName = (0, smithy_client_1.expectString)(output["UserName"]);
      }
      if (output["SSHPublicKeyId"] !== void 0) {
        contents.SSHPublicKeyId = (0, smithy_client_1.expectString)(output["SSHPublicKeyId"]);
      }
      if (output["Fingerprint"] !== void 0) {
        contents.Fingerprint = (0, smithy_client_1.expectString)(output["Fingerprint"]);
      }
      if (output["SSHPublicKeyBody"] !== void 0) {
        contents.SSHPublicKeyBody = (0, smithy_client_1.expectString)(output["SSHPublicKeyBody"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["UploadDate"] !== void 0) {
        contents.UploadDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["UploadDate"]));
      }
      return contents;
    };
    var deserializeAws_querySSHPublicKeyListType = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_querySSHPublicKeyMetadata(entry, context);
      });
    };
    var deserializeAws_querySSHPublicKeyMetadata = (output, context) => {
      const contents = {
        UserName: void 0,
        SSHPublicKeyId: void 0,
        Status: void 0,
        UploadDate: void 0
      };
      if (output["UserName"] !== void 0) {
        contents.UserName = (0, smithy_client_1.expectString)(output["UserName"]);
      }
      if (output["SSHPublicKeyId"] !== void 0) {
        contents.SSHPublicKeyId = (0, smithy_client_1.expectString)(output["SSHPublicKeyId"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["UploadDate"] !== void 0) {
        contents.UploadDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["UploadDate"]));
      }
      return contents;
    };
    var deserializeAws_queryStatement = (output, context) => {
      const contents = {
        SourcePolicyId: void 0,
        SourcePolicyType: void 0,
        StartPosition: void 0,
        EndPosition: void 0
      };
      if (output["SourcePolicyId"] !== void 0) {
        contents.SourcePolicyId = (0, smithy_client_1.expectString)(output["SourcePolicyId"]);
      }
      if (output["SourcePolicyType"] !== void 0) {
        contents.SourcePolicyType = (0, smithy_client_1.expectString)(output["SourcePolicyType"]);
      }
      if (output["StartPosition"] !== void 0) {
        contents.StartPosition = deserializeAws_queryPosition(output["StartPosition"], context);
      }
      if (output["EndPosition"] !== void 0) {
        contents.EndPosition = deserializeAws_queryPosition(output["EndPosition"], context);
      }
      return contents;
    };
    var deserializeAws_queryStatementListType = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryStatement(entry, context);
      });
    };
    var deserializeAws_querysummaryMapType = (output, context) => {
      return output.reduce((acc, pair) => {
        if (pair["value"] === null) {
          return acc;
        }
        acc[pair["key"]] = (0, smithy_client_1.strictParseInt32)(pair["value"]);
        return acc;
      }, {});
    };
    var deserializeAws_queryTag = (output, context) => {
      const contents = {
        Key: void 0,
        Value: void 0
      };
      if (output["Key"] !== void 0) {
        contents.Key = (0, smithy_client_1.expectString)(output["Key"]);
      }
      if (output["Value"] !== void 0) {
        contents.Value = (0, smithy_client_1.expectString)(output["Value"]);
      }
      return contents;
    };
    var deserializeAws_querytagListType = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryTag(entry, context);
      });
    };
    var deserializeAws_querythumbprintListType = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_queryTrackedActionLastAccessed = (output, context) => {
      const contents = {
        ActionName: void 0,
        LastAccessedEntity: void 0,
        LastAccessedTime: void 0,
        LastAccessedRegion: void 0
      };
      if (output["ActionName"] !== void 0) {
        contents.ActionName = (0, smithy_client_1.expectString)(output["ActionName"]);
      }
      if (output["LastAccessedEntity"] !== void 0) {
        contents.LastAccessedEntity = (0, smithy_client_1.expectString)(output["LastAccessedEntity"]);
      }
      if (output["LastAccessedTime"] !== void 0) {
        contents.LastAccessedTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["LastAccessedTime"]));
      }
      if (output["LastAccessedRegion"] !== void 0) {
        contents.LastAccessedRegion = (0, smithy_client_1.expectString)(output["LastAccessedRegion"]);
      }
      return contents;
    };
    var deserializeAws_queryTrackedActionsLastAccessed = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryTrackedActionLastAccessed(entry, context);
      });
    };
    var deserializeAws_queryUnmodifiableEntityException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryUnrecognizedPublicKeyEncodingException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryUpdateRoleDescriptionResponse = (output, context) => {
      const contents = {
        Role: void 0
      };
      if (output["Role"] !== void 0) {
        contents.Role = deserializeAws_queryRole(output["Role"], context);
      }
      return contents;
    };
    var deserializeAws_queryUpdateRoleResponse = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_queryUpdateSAMLProviderResponse = (output, context) => {
      const contents = {
        SAMLProviderArn: void 0
      };
      if (output["SAMLProviderArn"] !== void 0) {
        contents.SAMLProviderArn = (0, smithy_client_1.expectString)(output["SAMLProviderArn"]);
      }
      return contents;
    };
    var deserializeAws_queryUploadServerCertificateResponse = (output, context) => {
      const contents = {
        ServerCertificateMetadata: void 0,
        Tags: void 0
      };
      if (output["ServerCertificateMetadata"] !== void 0) {
        contents.ServerCertificateMetadata = deserializeAws_queryServerCertificateMetadata(output["ServerCertificateMetadata"], context);
      }
      if (output.Tags === "") {
        contents.Tags = [];
      } else if (output["Tags"] !== void 0 && output["Tags"]["member"] !== void 0) {
        contents.Tags = deserializeAws_querytagListType((0, smithy_client_1.getArrayIfSingleItem)(output["Tags"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_queryUploadSigningCertificateResponse = (output, context) => {
      const contents = {
        Certificate: void 0
      };
      if (output["Certificate"] !== void 0) {
        contents.Certificate = deserializeAws_querySigningCertificate(output["Certificate"], context);
      }
      return contents;
    };
    var deserializeAws_queryUploadSSHPublicKeyResponse = (output, context) => {
      const contents = {
        SSHPublicKey: void 0
      };
      if (output["SSHPublicKey"] !== void 0) {
        contents.SSHPublicKey = deserializeAws_querySSHPublicKey(output["SSHPublicKey"], context);
      }
      return contents;
    };
    var deserializeAws_queryUser = (output, context) => {
      const contents = {
        Path: void 0,
        UserName: void 0,
        UserId: void 0,
        Arn: void 0,
        CreateDate: void 0,
        PasswordLastUsed: void 0,
        PermissionsBoundary: void 0,
        Tags: void 0
      };
      if (output["Path"] !== void 0) {
        contents.Path = (0, smithy_client_1.expectString)(output["Path"]);
      }
      if (output["UserName"] !== void 0) {
        contents.UserName = (0, smithy_client_1.expectString)(output["UserName"]);
      }
      if (output["UserId"] !== void 0) {
        contents.UserId = (0, smithy_client_1.expectString)(output["UserId"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      if (output["CreateDate"] !== void 0) {
        contents.CreateDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["CreateDate"]));
      }
      if (output["PasswordLastUsed"] !== void 0) {
        contents.PasswordLastUsed = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["PasswordLastUsed"]));
      }
      if (output["PermissionsBoundary"] !== void 0) {
        contents.PermissionsBoundary = deserializeAws_queryAttachedPermissionsBoundary(output["PermissionsBoundary"], context);
      }
      if (output.Tags === "") {
        contents.Tags = [];
      } else if (output["Tags"] !== void 0 && output["Tags"]["member"] !== void 0) {
        contents.Tags = deserializeAws_querytagListType((0, smithy_client_1.getArrayIfSingleItem)(output["Tags"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_queryUserDetail = (output, context) => {
      const contents = {
        Path: void 0,
        UserName: void 0,
        UserId: void 0,
        Arn: void 0,
        CreateDate: void 0,
        UserPolicyList: void 0,
        GroupList: void 0,
        AttachedManagedPolicies: void 0,
        PermissionsBoundary: void 0,
        Tags: void 0
      };
      if (output["Path"] !== void 0) {
        contents.Path = (0, smithy_client_1.expectString)(output["Path"]);
      }
      if (output["UserName"] !== void 0) {
        contents.UserName = (0, smithy_client_1.expectString)(output["UserName"]);
      }
      if (output["UserId"] !== void 0) {
        contents.UserId = (0, smithy_client_1.expectString)(output["UserId"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      if (output["CreateDate"] !== void 0) {
        contents.CreateDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["CreateDate"]));
      }
      if (output.UserPolicyList === "") {
        contents.UserPolicyList = [];
      } else if (output["UserPolicyList"] !== void 0 && output["UserPolicyList"]["member"] !== void 0) {
        contents.UserPolicyList = deserializeAws_querypolicyDetailListType((0, smithy_client_1.getArrayIfSingleItem)(output["UserPolicyList"]["member"]), context);
      }
      if (output.GroupList === "") {
        contents.GroupList = [];
      } else if (output["GroupList"] !== void 0 && output["GroupList"]["member"] !== void 0) {
        contents.GroupList = deserializeAws_querygroupNameListType((0, smithy_client_1.getArrayIfSingleItem)(output["GroupList"]["member"]), context);
      }
      if (output.AttachedManagedPolicies === "") {
        contents.AttachedManagedPolicies = [];
      } else if (output["AttachedManagedPolicies"] !== void 0 && output["AttachedManagedPolicies"]["member"] !== void 0) {
        contents.AttachedManagedPolicies = deserializeAws_queryattachedPoliciesListType((0, smithy_client_1.getArrayIfSingleItem)(output["AttachedManagedPolicies"]["member"]), context);
      }
      if (output["PermissionsBoundary"] !== void 0) {
        contents.PermissionsBoundary = deserializeAws_queryAttachedPermissionsBoundary(output["PermissionsBoundary"], context);
      }
      if (output.Tags === "") {
        contents.Tags = [];
      } else if (output["Tags"] !== void 0 && output["Tags"]["member"] !== void 0) {
        contents.Tags = deserializeAws_querytagListType((0, smithy_client_1.getArrayIfSingleItem)(output["Tags"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_queryuserDetailListType = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryUserDetail(entry, context);
      });
    };
    var deserializeAws_queryuserListType = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryUser(entry, context);
      });
    };
    var deserializeAws_queryVirtualMFADevice = (output, context) => {
      const contents = {
        SerialNumber: void 0,
        Base32StringSeed: void 0,
        QRCodePNG: void 0,
        User: void 0,
        EnableDate: void 0,
        Tags: void 0
      };
      if (output["SerialNumber"] !== void 0) {
        contents.SerialNumber = (0, smithy_client_1.expectString)(output["SerialNumber"]);
      }
      if (output["Base32StringSeed"] !== void 0) {
        contents.Base32StringSeed = context.base64Decoder(output["Base32StringSeed"]);
      }
      if (output["QRCodePNG"] !== void 0) {
        contents.QRCodePNG = context.base64Decoder(output["QRCodePNG"]);
      }
      if (output["User"] !== void 0) {
        contents.User = deserializeAws_queryUser(output["User"], context);
      }
      if (output["EnableDate"] !== void 0) {
        contents.EnableDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["EnableDate"]));
      }
      if (output.Tags === "") {
        contents.Tags = [];
      } else if (output["Tags"] !== void 0 && output["Tags"]["member"] !== void 0) {
        contents.Tags = deserializeAws_querytagListType((0, smithy_client_1.getArrayIfSingleItem)(output["Tags"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_queryvirtualMFADeviceListType = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryVirtualMFADevice(entry, context);
      });
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    var buildHttpRpcRequest = async (context, headers, path20, resolvedHostname, body) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path20 : basePath + path20,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new protocol_http_1.HttpRequest(contents);
    };
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        const parser = new fast_xml_parser_1.XMLParser({
          attributeNamePrefix: "",
          htmlEntities: true,
          ignoreAttributes: false,
          ignoreDeclaration: true,
          parseTagValue: false,
          trimValues: false,
          tagValueProcessor: (_, val) => val.trim() === "" && val.includes("\n") ? "" : void 0
        });
        parser.addEntity("#xD", "\r");
        parser.addEntity("#10", "\n");
        const parsedObj = parser.parse(encoded);
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
          parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
          delete parsedObjToReturn[textNodeName];
        }
        return (0, smithy_client_1.getValueFromTextNode)(parsedObjToReturn);
      }
      return {};
    });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      if (value.Error) {
        value.Error.message = value.Error.message ?? value.Error.Message;
      }
      return value;
    };
    var buildFormUrlencodedString = (formEntries) => Object.entries(formEntries).map(([key, value]) => (0, smithy_client_1.extendedEncodeURIComponent)(key) + "=" + (0, smithy_client_1.extendedEncodeURIComponent)(value)).join("&");
    var loadQueryErrorCode = (output, data2) => {
      if (data2.Error?.Code !== void 0) {
        return data2.Error.Code;
      }
      if (output.statusCode == 404) {
        return "NotFound";
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/AddClientIDToOpenIDConnectProviderCommand.js
var require_AddClientIDToOpenIDConnectProviderCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/AddClientIDToOpenIDConnectProviderCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AddClientIDToOpenIDConnectProviderCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var AddClientIDToOpenIDConnectProviderCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, AddClientIDToOpenIDConnectProviderCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "AddClientIDToOpenIDConnectProviderCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AddClientIDToOpenIDConnectProviderRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryAddClientIDToOpenIDConnectProviderCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryAddClientIDToOpenIDConnectProviderCommand)(output, context);
      }
    };
    exports.AddClientIDToOpenIDConnectProviderCommand = AddClientIDToOpenIDConnectProviderCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/AddRoleToInstanceProfileCommand.js
var require_AddRoleToInstanceProfileCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/AddRoleToInstanceProfileCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AddRoleToInstanceProfileCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var AddRoleToInstanceProfileCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, AddRoleToInstanceProfileCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "AddRoleToInstanceProfileCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AddRoleToInstanceProfileRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryAddRoleToInstanceProfileCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryAddRoleToInstanceProfileCommand)(output, context);
      }
    };
    exports.AddRoleToInstanceProfileCommand = AddRoleToInstanceProfileCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/AddUserToGroupCommand.js
var require_AddUserToGroupCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/AddUserToGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AddUserToGroupCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var AddUserToGroupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, AddUserToGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "AddUserToGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AddUserToGroupRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryAddUserToGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryAddUserToGroupCommand)(output, context);
      }
    };
    exports.AddUserToGroupCommand = AddUserToGroupCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/AttachGroupPolicyCommand.js
var require_AttachGroupPolicyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/AttachGroupPolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AttachGroupPolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var AttachGroupPolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, AttachGroupPolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "AttachGroupPolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AttachGroupPolicyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryAttachGroupPolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryAttachGroupPolicyCommand)(output, context);
      }
    };
    exports.AttachGroupPolicyCommand = AttachGroupPolicyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/AttachRolePolicyCommand.js
var require_AttachRolePolicyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/AttachRolePolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AttachRolePolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var AttachRolePolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, AttachRolePolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "AttachRolePolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AttachRolePolicyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryAttachRolePolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryAttachRolePolicyCommand)(output, context);
      }
    };
    exports.AttachRolePolicyCommand = AttachRolePolicyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/AttachUserPolicyCommand.js
var require_AttachUserPolicyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/AttachUserPolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AttachUserPolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var AttachUserPolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, AttachUserPolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "AttachUserPolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AttachUserPolicyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryAttachUserPolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryAttachUserPolicyCommand)(output, context);
      }
    };
    exports.AttachUserPolicyCommand = AttachUserPolicyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ChangePasswordCommand.js
var require_ChangePasswordCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ChangePasswordCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ChangePasswordCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ChangePasswordCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ChangePasswordCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "ChangePasswordCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ChangePasswordRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryChangePasswordCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryChangePasswordCommand)(output, context);
      }
    };
    exports.ChangePasswordCommand = ChangePasswordCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/CreateAccessKeyCommand.js
var require_CreateAccessKeyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/CreateAccessKeyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateAccessKeyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CreateAccessKeyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateAccessKeyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "CreateAccessKeyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateAccessKeyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateAccessKeyResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryCreateAccessKeyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryCreateAccessKeyCommand)(output, context);
      }
    };
    exports.CreateAccessKeyCommand = CreateAccessKeyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/CreateAccountAliasCommand.js
var require_CreateAccountAliasCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/CreateAccountAliasCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateAccountAliasCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CreateAccountAliasCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateAccountAliasCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "CreateAccountAliasCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateAccountAliasRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryCreateAccountAliasCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryCreateAccountAliasCommand)(output, context);
      }
    };
    exports.CreateAccountAliasCommand = CreateAccountAliasCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/CreateGroupCommand.js
var require_CreateGroupCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/CreateGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateGroupCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CreateGroupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "CreateGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateGroupRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateGroupResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryCreateGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryCreateGroupCommand)(output, context);
      }
    };
    exports.CreateGroupCommand = CreateGroupCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/CreateInstanceProfileCommand.js
var require_CreateInstanceProfileCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/CreateInstanceProfileCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateInstanceProfileCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CreateInstanceProfileCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateInstanceProfileCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "CreateInstanceProfileCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateInstanceProfileRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateInstanceProfileResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryCreateInstanceProfileCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryCreateInstanceProfileCommand)(output, context);
      }
    };
    exports.CreateInstanceProfileCommand = CreateInstanceProfileCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/CreateLoginProfileCommand.js
var require_CreateLoginProfileCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/CreateLoginProfileCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateLoginProfileCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CreateLoginProfileCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateLoginProfileCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "CreateLoginProfileCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateLoginProfileRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateLoginProfileResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryCreateLoginProfileCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryCreateLoginProfileCommand)(output, context);
      }
    };
    exports.CreateLoginProfileCommand = CreateLoginProfileCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/CreateOpenIDConnectProviderCommand.js
var require_CreateOpenIDConnectProviderCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/CreateOpenIDConnectProviderCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateOpenIDConnectProviderCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CreateOpenIDConnectProviderCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateOpenIDConnectProviderCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "CreateOpenIDConnectProviderCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateOpenIDConnectProviderRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateOpenIDConnectProviderResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryCreateOpenIDConnectProviderCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryCreateOpenIDConnectProviderCommand)(output, context);
      }
    };
    exports.CreateOpenIDConnectProviderCommand = CreateOpenIDConnectProviderCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/CreatePolicyCommand.js
var require_CreatePolicyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/CreatePolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreatePolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CreatePolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreatePolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "CreatePolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreatePolicyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreatePolicyResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryCreatePolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryCreatePolicyCommand)(output, context);
      }
    };
    exports.CreatePolicyCommand = CreatePolicyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/CreatePolicyVersionCommand.js
var require_CreatePolicyVersionCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/CreatePolicyVersionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreatePolicyVersionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CreatePolicyVersionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreatePolicyVersionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "CreatePolicyVersionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreatePolicyVersionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreatePolicyVersionResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryCreatePolicyVersionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryCreatePolicyVersionCommand)(output, context);
      }
    };
    exports.CreatePolicyVersionCommand = CreatePolicyVersionCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/CreateRoleCommand.js
var require_CreateRoleCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/CreateRoleCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateRoleCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CreateRoleCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateRoleCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "CreateRoleCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateRoleRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateRoleResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryCreateRoleCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryCreateRoleCommand)(output, context);
      }
    };
    exports.CreateRoleCommand = CreateRoleCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/CreateSAMLProviderCommand.js
var require_CreateSAMLProviderCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/CreateSAMLProviderCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateSAMLProviderCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CreateSAMLProviderCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateSAMLProviderCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "CreateSAMLProviderCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateSAMLProviderRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateSAMLProviderResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryCreateSAMLProviderCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryCreateSAMLProviderCommand)(output, context);
      }
    };
    exports.CreateSAMLProviderCommand = CreateSAMLProviderCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/CreateServiceLinkedRoleCommand.js
var require_CreateServiceLinkedRoleCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/CreateServiceLinkedRoleCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateServiceLinkedRoleCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CreateServiceLinkedRoleCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateServiceLinkedRoleCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "CreateServiceLinkedRoleCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateServiceLinkedRoleRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateServiceLinkedRoleResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryCreateServiceLinkedRoleCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryCreateServiceLinkedRoleCommand)(output, context);
      }
    };
    exports.CreateServiceLinkedRoleCommand = CreateServiceLinkedRoleCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/CreateServiceSpecificCredentialCommand.js
var require_CreateServiceSpecificCredentialCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/CreateServiceSpecificCredentialCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateServiceSpecificCredentialCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CreateServiceSpecificCredentialCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateServiceSpecificCredentialCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "CreateServiceSpecificCredentialCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateServiceSpecificCredentialRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateServiceSpecificCredentialResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryCreateServiceSpecificCredentialCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryCreateServiceSpecificCredentialCommand)(output, context);
      }
    };
    exports.CreateServiceSpecificCredentialCommand = CreateServiceSpecificCredentialCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/CreateUserCommand.js
var require_CreateUserCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/CreateUserCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateUserCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CreateUserCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateUserCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "CreateUserCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateUserRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateUserResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryCreateUserCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryCreateUserCommand)(output, context);
      }
    };
    exports.CreateUserCommand = CreateUserCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/CreateVirtualMFADeviceCommand.js
var require_CreateVirtualMFADeviceCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/CreateVirtualMFADeviceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateVirtualMFADeviceCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var CreateVirtualMFADeviceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateVirtualMFADeviceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "CreateVirtualMFADeviceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateVirtualMFADeviceRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateVirtualMFADeviceResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryCreateVirtualMFADeviceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryCreateVirtualMFADeviceCommand)(output, context);
      }
    };
    exports.CreateVirtualMFADeviceCommand = CreateVirtualMFADeviceCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeactivateMFADeviceCommand.js
var require_DeactivateMFADeviceCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeactivateMFADeviceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeactivateMFADeviceCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeactivateMFADeviceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeactivateMFADeviceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "DeactivateMFADeviceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeactivateMFADeviceRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeactivateMFADeviceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeactivateMFADeviceCommand)(output, context);
      }
    };
    exports.DeactivateMFADeviceCommand = DeactivateMFADeviceCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeleteAccessKeyCommand.js
var require_DeleteAccessKeyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeleteAccessKeyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteAccessKeyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteAccessKeyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteAccessKeyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "DeleteAccessKeyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteAccessKeyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeleteAccessKeyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeleteAccessKeyCommand)(output, context);
      }
    };
    exports.DeleteAccessKeyCommand = DeleteAccessKeyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeleteAccountAliasCommand.js
var require_DeleteAccountAliasCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeleteAccountAliasCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteAccountAliasCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteAccountAliasCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteAccountAliasCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "DeleteAccountAliasCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteAccountAliasRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeleteAccountAliasCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeleteAccountAliasCommand)(output, context);
      }
    };
    exports.DeleteAccountAliasCommand = DeleteAccountAliasCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeleteAccountPasswordPolicyCommand.js
var require_DeleteAccountPasswordPolicyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeleteAccountPasswordPolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteAccountPasswordPolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var Aws_query_1 = require_Aws_query();
    var DeleteAccountPasswordPolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteAccountPasswordPolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "DeleteAccountPasswordPolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (input) => input,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeleteAccountPasswordPolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeleteAccountPasswordPolicyCommand)(output, context);
      }
    };
    exports.DeleteAccountPasswordPolicyCommand = DeleteAccountPasswordPolicyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeleteGroupCommand.js
var require_DeleteGroupCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeleteGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteGroupCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteGroupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "DeleteGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteGroupRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeleteGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeleteGroupCommand)(output, context);
      }
    };
    exports.DeleteGroupCommand = DeleteGroupCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeleteGroupPolicyCommand.js
var require_DeleteGroupPolicyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeleteGroupPolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteGroupPolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteGroupPolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteGroupPolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "DeleteGroupPolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteGroupPolicyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeleteGroupPolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeleteGroupPolicyCommand)(output, context);
      }
    };
    exports.DeleteGroupPolicyCommand = DeleteGroupPolicyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeleteInstanceProfileCommand.js
var require_DeleteInstanceProfileCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeleteInstanceProfileCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteInstanceProfileCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteInstanceProfileCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteInstanceProfileCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "DeleteInstanceProfileCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteInstanceProfileRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeleteInstanceProfileCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeleteInstanceProfileCommand)(output, context);
      }
    };
    exports.DeleteInstanceProfileCommand = DeleteInstanceProfileCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeleteLoginProfileCommand.js
var require_DeleteLoginProfileCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeleteLoginProfileCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteLoginProfileCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteLoginProfileCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteLoginProfileCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "DeleteLoginProfileCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteLoginProfileRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeleteLoginProfileCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeleteLoginProfileCommand)(output, context);
      }
    };
    exports.DeleteLoginProfileCommand = DeleteLoginProfileCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeleteOpenIDConnectProviderCommand.js
var require_DeleteOpenIDConnectProviderCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeleteOpenIDConnectProviderCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteOpenIDConnectProviderCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteOpenIDConnectProviderCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteOpenIDConnectProviderCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "DeleteOpenIDConnectProviderCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteOpenIDConnectProviderRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeleteOpenIDConnectProviderCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeleteOpenIDConnectProviderCommand)(output, context);
      }
    };
    exports.DeleteOpenIDConnectProviderCommand = DeleteOpenIDConnectProviderCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeletePolicyCommand.js
var require_DeletePolicyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeletePolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeletePolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeletePolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeletePolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "DeletePolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeletePolicyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeletePolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeletePolicyCommand)(output, context);
      }
    };
    exports.DeletePolicyCommand = DeletePolicyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeletePolicyVersionCommand.js
var require_DeletePolicyVersionCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeletePolicyVersionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeletePolicyVersionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeletePolicyVersionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeletePolicyVersionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "DeletePolicyVersionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeletePolicyVersionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeletePolicyVersionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeletePolicyVersionCommand)(output, context);
      }
    };
    exports.DeletePolicyVersionCommand = DeletePolicyVersionCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeleteRoleCommand.js
var require_DeleteRoleCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeleteRoleCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteRoleCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteRoleCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteRoleCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "DeleteRoleCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteRoleRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeleteRoleCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeleteRoleCommand)(output, context);
      }
    };
    exports.DeleteRoleCommand = DeleteRoleCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeleteRolePermissionsBoundaryCommand.js
var require_DeleteRolePermissionsBoundaryCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeleteRolePermissionsBoundaryCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteRolePermissionsBoundaryCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteRolePermissionsBoundaryCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteRolePermissionsBoundaryCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "DeleteRolePermissionsBoundaryCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteRolePermissionsBoundaryRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeleteRolePermissionsBoundaryCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeleteRolePermissionsBoundaryCommand)(output, context);
      }
    };
    exports.DeleteRolePermissionsBoundaryCommand = DeleteRolePermissionsBoundaryCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeleteRolePolicyCommand.js
var require_DeleteRolePolicyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeleteRolePolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteRolePolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteRolePolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteRolePolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "DeleteRolePolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteRolePolicyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeleteRolePolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeleteRolePolicyCommand)(output, context);
      }
    };
    exports.DeleteRolePolicyCommand = DeleteRolePolicyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeleteSAMLProviderCommand.js
var require_DeleteSAMLProviderCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeleteSAMLProviderCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteSAMLProviderCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteSAMLProviderCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteSAMLProviderCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "DeleteSAMLProviderCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteSAMLProviderRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeleteSAMLProviderCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeleteSAMLProviderCommand)(output, context);
      }
    };
    exports.DeleteSAMLProviderCommand = DeleteSAMLProviderCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeleteServerCertificateCommand.js
var require_DeleteServerCertificateCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeleteServerCertificateCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteServerCertificateCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteServerCertificateCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteServerCertificateCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "DeleteServerCertificateCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteServerCertificateRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeleteServerCertificateCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeleteServerCertificateCommand)(output, context);
      }
    };
    exports.DeleteServerCertificateCommand = DeleteServerCertificateCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeleteServiceLinkedRoleCommand.js
var require_DeleteServiceLinkedRoleCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeleteServiceLinkedRoleCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteServiceLinkedRoleCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteServiceLinkedRoleCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteServiceLinkedRoleCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "DeleteServiceLinkedRoleCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteServiceLinkedRoleRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteServiceLinkedRoleResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeleteServiceLinkedRoleCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeleteServiceLinkedRoleCommand)(output, context);
      }
    };
    exports.DeleteServiceLinkedRoleCommand = DeleteServiceLinkedRoleCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeleteServiceSpecificCredentialCommand.js
var require_DeleteServiceSpecificCredentialCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeleteServiceSpecificCredentialCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteServiceSpecificCredentialCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteServiceSpecificCredentialCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteServiceSpecificCredentialCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "DeleteServiceSpecificCredentialCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteServiceSpecificCredentialRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeleteServiceSpecificCredentialCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeleteServiceSpecificCredentialCommand)(output, context);
      }
    };
    exports.DeleteServiceSpecificCredentialCommand = DeleteServiceSpecificCredentialCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeleteSigningCertificateCommand.js
var require_DeleteSigningCertificateCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeleteSigningCertificateCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteSigningCertificateCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteSigningCertificateCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteSigningCertificateCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "DeleteSigningCertificateCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteSigningCertificateRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeleteSigningCertificateCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeleteSigningCertificateCommand)(output, context);
      }
    };
    exports.DeleteSigningCertificateCommand = DeleteSigningCertificateCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeleteSSHPublicKeyCommand.js
var require_DeleteSSHPublicKeyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeleteSSHPublicKeyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteSSHPublicKeyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteSSHPublicKeyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteSSHPublicKeyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "DeleteSSHPublicKeyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteSSHPublicKeyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeleteSSHPublicKeyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeleteSSHPublicKeyCommand)(output, context);
      }
    };
    exports.DeleteSSHPublicKeyCommand = DeleteSSHPublicKeyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeleteUserCommand.js
var require_DeleteUserCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeleteUserCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteUserCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteUserCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteUserCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "DeleteUserCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteUserRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeleteUserCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeleteUserCommand)(output, context);
      }
    };
    exports.DeleteUserCommand = DeleteUserCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeleteUserPermissionsBoundaryCommand.js
var require_DeleteUserPermissionsBoundaryCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeleteUserPermissionsBoundaryCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteUserPermissionsBoundaryCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteUserPermissionsBoundaryCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteUserPermissionsBoundaryCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "DeleteUserPermissionsBoundaryCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteUserPermissionsBoundaryRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeleteUserPermissionsBoundaryCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeleteUserPermissionsBoundaryCommand)(output, context);
      }
    };
    exports.DeleteUserPermissionsBoundaryCommand = DeleteUserPermissionsBoundaryCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeleteUserPolicyCommand.js
var require_DeleteUserPolicyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeleteUserPolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteUserPolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteUserPolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteUserPolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "DeleteUserPolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteUserPolicyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeleteUserPolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeleteUserPolicyCommand)(output, context);
      }
    };
    exports.DeleteUserPolicyCommand = DeleteUserPolicyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeleteVirtualMFADeviceCommand.js
var require_DeleteVirtualMFADeviceCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DeleteVirtualMFADeviceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteVirtualMFADeviceCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DeleteVirtualMFADeviceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteVirtualMFADeviceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "DeleteVirtualMFADeviceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteVirtualMFADeviceRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeleteVirtualMFADeviceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeleteVirtualMFADeviceCommand)(output, context);
      }
    };
    exports.DeleteVirtualMFADeviceCommand = DeleteVirtualMFADeviceCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DetachGroupPolicyCommand.js
var require_DetachGroupPolicyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DetachGroupPolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DetachGroupPolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DetachGroupPolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DetachGroupPolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "DetachGroupPolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DetachGroupPolicyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDetachGroupPolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDetachGroupPolicyCommand)(output, context);
      }
    };
    exports.DetachGroupPolicyCommand = DetachGroupPolicyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DetachRolePolicyCommand.js
var require_DetachRolePolicyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DetachRolePolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DetachRolePolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DetachRolePolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DetachRolePolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "DetachRolePolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DetachRolePolicyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDetachRolePolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDetachRolePolicyCommand)(output, context);
      }
    };
    exports.DetachRolePolicyCommand = DetachRolePolicyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DetachUserPolicyCommand.js
var require_DetachUserPolicyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/DetachUserPolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DetachUserPolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DetachUserPolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DetachUserPolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "DetachUserPolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DetachUserPolicyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDetachUserPolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDetachUserPolicyCommand)(output, context);
      }
    };
    exports.DetachUserPolicyCommand = DetachUserPolicyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/EnableMFADeviceCommand.js
var require_EnableMFADeviceCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/EnableMFADeviceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EnableMFADeviceCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var EnableMFADeviceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, EnableMFADeviceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "EnableMFADeviceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.EnableMFADeviceRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryEnableMFADeviceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryEnableMFADeviceCommand)(output, context);
      }
    };
    exports.EnableMFADeviceCommand = EnableMFADeviceCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GenerateCredentialReportCommand.js
var require_GenerateCredentialReportCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GenerateCredentialReportCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GenerateCredentialReportCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GenerateCredentialReportCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GenerateCredentialReportCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "GenerateCredentialReportCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (input) => input,
          outputFilterSensitiveLog: models_0_1.GenerateCredentialReportResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGenerateCredentialReportCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGenerateCredentialReportCommand)(output, context);
      }
    };
    exports.GenerateCredentialReportCommand = GenerateCredentialReportCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GenerateOrganizationsAccessReportCommand.js
var require_GenerateOrganizationsAccessReportCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GenerateOrganizationsAccessReportCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GenerateOrganizationsAccessReportCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GenerateOrganizationsAccessReportCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GenerateOrganizationsAccessReportCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "GenerateOrganizationsAccessReportCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GenerateOrganizationsAccessReportRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GenerateOrganizationsAccessReportResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGenerateOrganizationsAccessReportCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGenerateOrganizationsAccessReportCommand)(output, context);
      }
    };
    exports.GenerateOrganizationsAccessReportCommand = GenerateOrganizationsAccessReportCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GenerateServiceLastAccessedDetailsCommand.js
var require_GenerateServiceLastAccessedDetailsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GenerateServiceLastAccessedDetailsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GenerateServiceLastAccessedDetailsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GenerateServiceLastAccessedDetailsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GenerateServiceLastAccessedDetailsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "GenerateServiceLastAccessedDetailsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GenerateServiceLastAccessedDetailsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GenerateServiceLastAccessedDetailsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGenerateServiceLastAccessedDetailsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGenerateServiceLastAccessedDetailsCommand)(output, context);
      }
    };
    exports.GenerateServiceLastAccessedDetailsCommand = GenerateServiceLastAccessedDetailsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetAccessKeyLastUsedCommand.js
var require_GetAccessKeyLastUsedCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetAccessKeyLastUsedCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetAccessKeyLastUsedCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetAccessKeyLastUsedCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetAccessKeyLastUsedCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "GetAccessKeyLastUsedCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetAccessKeyLastUsedRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetAccessKeyLastUsedResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetAccessKeyLastUsedCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetAccessKeyLastUsedCommand)(output, context);
      }
    };
    exports.GetAccessKeyLastUsedCommand = GetAccessKeyLastUsedCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetAccountAuthorizationDetailsCommand.js
var require_GetAccountAuthorizationDetailsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetAccountAuthorizationDetailsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetAccountAuthorizationDetailsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetAccountAuthorizationDetailsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetAccountAuthorizationDetailsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "GetAccountAuthorizationDetailsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetAccountAuthorizationDetailsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetAccountAuthorizationDetailsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetAccountAuthorizationDetailsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetAccountAuthorizationDetailsCommand)(output, context);
      }
    };
    exports.GetAccountAuthorizationDetailsCommand = GetAccountAuthorizationDetailsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetAccountPasswordPolicyCommand.js
var require_GetAccountPasswordPolicyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetAccountPasswordPolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetAccountPasswordPolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetAccountPasswordPolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetAccountPasswordPolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "GetAccountPasswordPolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (input) => input,
          outputFilterSensitiveLog: models_0_1.GetAccountPasswordPolicyResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetAccountPasswordPolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetAccountPasswordPolicyCommand)(output, context);
      }
    };
    exports.GetAccountPasswordPolicyCommand = GetAccountPasswordPolicyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetAccountSummaryCommand.js
var require_GetAccountSummaryCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetAccountSummaryCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetAccountSummaryCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetAccountSummaryCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetAccountSummaryCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "GetAccountSummaryCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (input) => input,
          outputFilterSensitiveLog: models_0_1.GetAccountSummaryResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetAccountSummaryCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetAccountSummaryCommand)(output, context);
      }
    };
    exports.GetAccountSummaryCommand = GetAccountSummaryCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetContextKeysForCustomPolicyCommand.js
var require_GetContextKeysForCustomPolicyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetContextKeysForCustomPolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetContextKeysForCustomPolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetContextKeysForCustomPolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetContextKeysForCustomPolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "GetContextKeysForCustomPolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetContextKeysForCustomPolicyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetContextKeysForPolicyResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetContextKeysForCustomPolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetContextKeysForCustomPolicyCommand)(output, context);
      }
    };
    exports.GetContextKeysForCustomPolicyCommand = GetContextKeysForCustomPolicyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetContextKeysForPrincipalPolicyCommand.js
var require_GetContextKeysForPrincipalPolicyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetContextKeysForPrincipalPolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetContextKeysForPrincipalPolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetContextKeysForPrincipalPolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetContextKeysForPrincipalPolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "GetContextKeysForPrincipalPolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetContextKeysForPrincipalPolicyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetContextKeysForPolicyResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetContextKeysForPrincipalPolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetContextKeysForPrincipalPolicyCommand)(output, context);
      }
    };
    exports.GetContextKeysForPrincipalPolicyCommand = GetContextKeysForPrincipalPolicyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetCredentialReportCommand.js
var require_GetCredentialReportCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetCredentialReportCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetCredentialReportCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetCredentialReportCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetCredentialReportCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "GetCredentialReportCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (input) => input,
          outputFilterSensitiveLog: models_0_1.GetCredentialReportResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetCredentialReportCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetCredentialReportCommand)(output, context);
      }
    };
    exports.GetCredentialReportCommand = GetCredentialReportCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetGroupCommand.js
var require_GetGroupCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetGroupCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetGroupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "GetGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetGroupRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetGroupResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetGroupCommand)(output, context);
      }
    };
    exports.GetGroupCommand = GetGroupCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetGroupPolicyCommand.js
var require_GetGroupPolicyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetGroupPolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetGroupPolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetGroupPolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetGroupPolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "GetGroupPolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetGroupPolicyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetGroupPolicyResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetGroupPolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetGroupPolicyCommand)(output, context);
      }
    };
    exports.GetGroupPolicyCommand = GetGroupPolicyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetInstanceProfileCommand.js
var require_GetInstanceProfileCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetInstanceProfileCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetInstanceProfileCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetInstanceProfileCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetInstanceProfileCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "GetInstanceProfileCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetInstanceProfileRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetInstanceProfileResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetInstanceProfileCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetInstanceProfileCommand)(output, context);
      }
    };
    exports.GetInstanceProfileCommand = GetInstanceProfileCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetLoginProfileCommand.js
var require_GetLoginProfileCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetLoginProfileCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetLoginProfileCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetLoginProfileCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetLoginProfileCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "GetLoginProfileCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetLoginProfileRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetLoginProfileResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetLoginProfileCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetLoginProfileCommand)(output, context);
      }
    };
    exports.GetLoginProfileCommand = GetLoginProfileCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetOpenIDConnectProviderCommand.js
var require_GetOpenIDConnectProviderCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetOpenIDConnectProviderCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetOpenIDConnectProviderCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetOpenIDConnectProviderCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetOpenIDConnectProviderCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "GetOpenIDConnectProviderCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetOpenIDConnectProviderRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetOpenIDConnectProviderResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetOpenIDConnectProviderCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetOpenIDConnectProviderCommand)(output, context);
      }
    };
    exports.GetOpenIDConnectProviderCommand = GetOpenIDConnectProviderCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetOrganizationsAccessReportCommand.js
var require_GetOrganizationsAccessReportCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetOrganizationsAccessReportCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetOrganizationsAccessReportCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetOrganizationsAccessReportCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetOrganizationsAccessReportCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "GetOrganizationsAccessReportCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetOrganizationsAccessReportRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetOrganizationsAccessReportResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetOrganizationsAccessReportCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetOrganizationsAccessReportCommand)(output, context);
      }
    };
    exports.GetOrganizationsAccessReportCommand = GetOrganizationsAccessReportCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetPolicyCommand.js
var require_GetPolicyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetPolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetPolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetPolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetPolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "GetPolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetPolicyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetPolicyResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetPolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetPolicyCommand)(output, context);
      }
    };
    exports.GetPolicyCommand = GetPolicyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetPolicyVersionCommand.js
var require_GetPolicyVersionCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetPolicyVersionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetPolicyVersionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetPolicyVersionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetPolicyVersionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "GetPolicyVersionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetPolicyVersionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetPolicyVersionResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetPolicyVersionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetPolicyVersionCommand)(output, context);
      }
    };
    exports.GetPolicyVersionCommand = GetPolicyVersionCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetRoleCommand.js
var require_GetRoleCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetRoleCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetRoleCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetRoleCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetRoleCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "GetRoleCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetRoleRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetRoleResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetRoleCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetRoleCommand)(output, context);
      }
    };
    exports.GetRoleCommand = GetRoleCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetRolePolicyCommand.js
var require_GetRolePolicyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetRolePolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetRolePolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetRolePolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetRolePolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "GetRolePolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetRolePolicyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetRolePolicyResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetRolePolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetRolePolicyCommand)(output, context);
      }
    };
    exports.GetRolePolicyCommand = GetRolePolicyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetSAMLProviderCommand.js
var require_GetSAMLProviderCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetSAMLProviderCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetSAMLProviderCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetSAMLProviderCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetSAMLProviderCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "GetSAMLProviderCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetSAMLProviderRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetSAMLProviderResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetSAMLProviderCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetSAMLProviderCommand)(output, context);
      }
    };
    exports.GetSAMLProviderCommand = GetSAMLProviderCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetServerCertificateCommand.js
var require_GetServerCertificateCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetServerCertificateCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetServerCertificateCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetServerCertificateCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetServerCertificateCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "GetServerCertificateCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetServerCertificateRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetServerCertificateResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetServerCertificateCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetServerCertificateCommand)(output, context);
      }
    };
    exports.GetServerCertificateCommand = GetServerCertificateCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetServiceLastAccessedDetailsCommand.js
var require_GetServiceLastAccessedDetailsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetServiceLastAccessedDetailsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetServiceLastAccessedDetailsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetServiceLastAccessedDetailsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetServiceLastAccessedDetailsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "GetServiceLastAccessedDetailsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetServiceLastAccessedDetailsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetServiceLastAccessedDetailsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetServiceLastAccessedDetailsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetServiceLastAccessedDetailsCommand)(output, context);
      }
    };
    exports.GetServiceLastAccessedDetailsCommand = GetServiceLastAccessedDetailsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetServiceLastAccessedDetailsWithEntitiesCommand.js
var require_GetServiceLastAccessedDetailsWithEntitiesCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetServiceLastAccessedDetailsWithEntitiesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetServiceLastAccessedDetailsWithEntitiesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetServiceLastAccessedDetailsWithEntitiesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetServiceLastAccessedDetailsWithEntitiesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "GetServiceLastAccessedDetailsWithEntitiesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetServiceLastAccessedDetailsWithEntitiesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetServiceLastAccessedDetailsWithEntitiesResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetServiceLastAccessedDetailsWithEntitiesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetServiceLastAccessedDetailsWithEntitiesCommand)(output, context);
      }
    };
    exports.GetServiceLastAccessedDetailsWithEntitiesCommand = GetServiceLastAccessedDetailsWithEntitiesCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetServiceLinkedRoleDeletionStatusCommand.js
var require_GetServiceLinkedRoleDeletionStatusCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetServiceLinkedRoleDeletionStatusCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetServiceLinkedRoleDeletionStatusCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetServiceLinkedRoleDeletionStatusCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetServiceLinkedRoleDeletionStatusCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "GetServiceLinkedRoleDeletionStatusCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetServiceLinkedRoleDeletionStatusRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetServiceLinkedRoleDeletionStatusResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetServiceLinkedRoleDeletionStatusCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetServiceLinkedRoleDeletionStatusCommand)(output, context);
      }
    };
    exports.GetServiceLinkedRoleDeletionStatusCommand = GetServiceLinkedRoleDeletionStatusCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetSSHPublicKeyCommand.js
var require_GetSSHPublicKeyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetSSHPublicKeyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetSSHPublicKeyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetSSHPublicKeyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetSSHPublicKeyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "GetSSHPublicKeyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetSSHPublicKeyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetSSHPublicKeyResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetSSHPublicKeyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetSSHPublicKeyCommand)(output, context);
      }
    };
    exports.GetSSHPublicKeyCommand = GetSSHPublicKeyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetUserCommand.js
var require_GetUserCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetUserCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetUserCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetUserCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetUserCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "GetUserCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetUserRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetUserResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetUserCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetUserCommand)(output, context);
      }
    };
    exports.GetUserCommand = GetUserCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetUserPolicyCommand.js
var require_GetUserPolicyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/GetUserPolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetUserPolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetUserPolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetUserPolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "GetUserPolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetUserPolicyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetUserPolicyResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetUserPolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetUserPolicyCommand)(output, context);
      }
    };
    exports.GetUserPolicyCommand = GetUserPolicyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListAccessKeysCommand.js
var require_ListAccessKeysCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListAccessKeysCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAccessKeysCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ListAccessKeysCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListAccessKeysCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "ListAccessKeysCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAccessKeysRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListAccessKeysResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListAccessKeysCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListAccessKeysCommand)(output, context);
      }
    };
    exports.ListAccessKeysCommand = ListAccessKeysCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListAccountAliasesCommand.js
var require_ListAccountAliasesCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListAccountAliasesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAccountAliasesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ListAccountAliasesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListAccountAliasesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "ListAccountAliasesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAccountAliasesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListAccountAliasesResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListAccountAliasesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListAccountAliasesCommand)(output, context);
      }
    };
    exports.ListAccountAliasesCommand = ListAccountAliasesCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListAttachedGroupPoliciesCommand.js
var require_ListAttachedGroupPoliciesCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListAttachedGroupPoliciesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAttachedGroupPoliciesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ListAttachedGroupPoliciesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListAttachedGroupPoliciesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "ListAttachedGroupPoliciesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAttachedGroupPoliciesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListAttachedGroupPoliciesResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListAttachedGroupPoliciesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListAttachedGroupPoliciesCommand)(output, context);
      }
    };
    exports.ListAttachedGroupPoliciesCommand = ListAttachedGroupPoliciesCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListAttachedRolePoliciesCommand.js
var require_ListAttachedRolePoliciesCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListAttachedRolePoliciesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAttachedRolePoliciesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ListAttachedRolePoliciesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListAttachedRolePoliciesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "ListAttachedRolePoliciesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAttachedRolePoliciesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListAttachedRolePoliciesResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListAttachedRolePoliciesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListAttachedRolePoliciesCommand)(output, context);
      }
    };
    exports.ListAttachedRolePoliciesCommand = ListAttachedRolePoliciesCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListAttachedUserPoliciesCommand.js
var require_ListAttachedUserPoliciesCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListAttachedUserPoliciesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAttachedUserPoliciesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ListAttachedUserPoliciesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListAttachedUserPoliciesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "ListAttachedUserPoliciesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAttachedUserPoliciesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListAttachedUserPoliciesResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListAttachedUserPoliciesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListAttachedUserPoliciesCommand)(output, context);
      }
    };
    exports.ListAttachedUserPoliciesCommand = ListAttachedUserPoliciesCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListEntitiesForPolicyCommand.js
var require_ListEntitiesForPolicyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListEntitiesForPolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListEntitiesForPolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ListEntitiesForPolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListEntitiesForPolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "ListEntitiesForPolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListEntitiesForPolicyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListEntitiesForPolicyResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListEntitiesForPolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListEntitiesForPolicyCommand)(output, context);
      }
    };
    exports.ListEntitiesForPolicyCommand = ListEntitiesForPolicyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListGroupPoliciesCommand.js
var require_ListGroupPoliciesCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListGroupPoliciesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListGroupPoliciesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ListGroupPoliciesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListGroupPoliciesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "ListGroupPoliciesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListGroupPoliciesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListGroupPoliciesResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListGroupPoliciesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListGroupPoliciesCommand)(output, context);
      }
    };
    exports.ListGroupPoliciesCommand = ListGroupPoliciesCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListGroupsCommand.js
var require_ListGroupsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListGroupsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListGroupsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ListGroupsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListGroupsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "ListGroupsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListGroupsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListGroupsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListGroupsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListGroupsCommand)(output, context);
      }
    };
    exports.ListGroupsCommand = ListGroupsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListGroupsForUserCommand.js
var require_ListGroupsForUserCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListGroupsForUserCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListGroupsForUserCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ListGroupsForUserCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListGroupsForUserCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "ListGroupsForUserCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListGroupsForUserRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListGroupsForUserResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListGroupsForUserCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListGroupsForUserCommand)(output, context);
      }
    };
    exports.ListGroupsForUserCommand = ListGroupsForUserCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListInstanceProfilesCommand.js
var require_ListInstanceProfilesCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListInstanceProfilesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListInstanceProfilesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ListInstanceProfilesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListInstanceProfilesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "ListInstanceProfilesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListInstanceProfilesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListInstanceProfilesResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListInstanceProfilesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListInstanceProfilesCommand)(output, context);
      }
    };
    exports.ListInstanceProfilesCommand = ListInstanceProfilesCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListInstanceProfilesForRoleCommand.js
var require_ListInstanceProfilesForRoleCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListInstanceProfilesForRoleCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListInstanceProfilesForRoleCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ListInstanceProfilesForRoleCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListInstanceProfilesForRoleCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "ListInstanceProfilesForRoleCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListInstanceProfilesForRoleRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListInstanceProfilesForRoleResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListInstanceProfilesForRoleCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListInstanceProfilesForRoleCommand)(output, context);
      }
    };
    exports.ListInstanceProfilesForRoleCommand = ListInstanceProfilesForRoleCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListInstanceProfileTagsCommand.js
var require_ListInstanceProfileTagsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListInstanceProfileTagsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListInstanceProfileTagsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ListInstanceProfileTagsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListInstanceProfileTagsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "ListInstanceProfileTagsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListInstanceProfileTagsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListInstanceProfileTagsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListInstanceProfileTagsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListInstanceProfileTagsCommand)(output, context);
      }
    };
    exports.ListInstanceProfileTagsCommand = ListInstanceProfileTagsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListMFADevicesCommand.js
var require_ListMFADevicesCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListMFADevicesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListMFADevicesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ListMFADevicesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListMFADevicesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "ListMFADevicesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListMFADevicesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListMFADevicesResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListMFADevicesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListMFADevicesCommand)(output, context);
      }
    };
    exports.ListMFADevicesCommand = ListMFADevicesCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListMFADeviceTagsCommand.js
var require_ListMFADeviceTagsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListMFADeviceTagsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListMFADeviceTagsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ListMFADeviceTagsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListMFADeviceTagsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "ListMFADeviceTagsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListMFADeviceTagsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListMFADeviceTagsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListMFADeviceTagsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListMFADeviceTagsCommand)(output, context);
      }
    };
    exports.ListMFADeviceTagsCommand = ListMFADeviceTagsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListOpenIDConnectProvidersCommand.js
var require_ListOpenIDConnectProvidersCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListOpenIDConnectProvidersCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListOpenIDConnectProvidersCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ListOpenIDConnectProvidersCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListOpenIDConnectProvidersCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "ListOpenIDConnectProvidersCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListOpenIDConnectProvidersRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListOpenIDConnectProvidersResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListOpenIDConnectProvidersCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListOpenIDConnectProvidersCommand)(output, context);
      }
    };
    exports.ListOpenIDConnectProvidersCommand = ListOpenIDConnectProvidersCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListOpenIDConnectProviderTagsCommand.js
var require_ListOpenIDConnectProviderTagsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListOpenIDConnectProviderTagsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListOpenIDConnectProviderTagsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ListOpenIDConnectProviderTagsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListOpenIDConnectProviderTagsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "ListOpenIDConnectProviderTagsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListOpenIDConnectProviderTagsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListOpenIDConnectProviderTagsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListOpenIDConnectProviderTagsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListOpenIDConnectProviderTagsCommand)(output, context);
      }
    };
    exports.ListOpenIDConnectProviderTagsCommand = ListOpenIDConnectProviderTagsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListPoliciesCommand.js
var require_ListPoliciesCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListPoliciesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListPoliciesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ListPoliciesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListPoliciesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "ListPoliciesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListPoliciesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListPoliciesResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListPoliciesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListPoliciesCommand)(output, context);
      }
    };
    exports.ListPoliciesCommand = ListPoliciesCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListPoliciesGrantingServiceAccessCommand.js
var require_ListPoliciesGrantingServiceAccessCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListPoliciesGrantingServiceAccessCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListPoliciesGrantingServiceAccessCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ListPoliciesGrantingServiceAccessCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListPoliciesGrantingServiceAccessCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "ListPoliciesGrantingServiceAccessCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListPoliciesGrantingServiceAccessRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListPoliciesGrantingServiceAccessResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListPoliciesGrantingServiceAccessCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListPoliciesGrantingServiceAccessCommand)(output, context);
      }
    };
    exports.ListPoliciesGrantingServiceAccessCommand = ListPoliciesGrantingServiceAccessCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListPolicyTagsCommand.js
var require_ListPolicyTagsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListPolicyTagsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListPolicyTagsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ListPolicyTagsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListPolicyTagsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "ListPolicyTagsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListPolicyTagsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListPolicyTagsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListPolicyTagsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListPolicyTagsCommand)(output, context);
      }
    };
    exports.ListPolicyTagsCommand = ListPolicyTagsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListPolicyVersionsCommand.js
var require_ListPolicyVersionsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListPolicyVersionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListPolicyVersionsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ListPolicyVersionsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListPolicyVersionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "ListPolicyVersionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListPolicyVersionsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListPolicyVersionsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListPolicyVersionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListPolicyVersionsCommand)(output, context);
      }
    };
    exports.ListPolicyVersionsCommand = ListPolicyVersionsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListRolePoliciesCommand.js
var require_ListRolePoliciesCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListRolePoliciesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListRolePoliciesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ListRolePoliciesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListRolePoliciesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "ListRolePoliciesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListRolePoliciesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListRolePoliciesResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListRolePoliciesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListRolePoliciesCommand)(output, context);
      }
    };
    exports.ListRolePoliciesCommand = ListRolePoliciesCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListRolesCommand.js
var require_ListRolesCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListRolesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListRolesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ListRolesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListRolesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "ListRolesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListRolesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListRolesResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListRolesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListRolesCommand)(output, context);
      }
    };
    exports.ListRolesCommand = ListRolesCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListRoleTagsCommand.js
var require_ListRoleTagsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListRoleTagsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListRoleTagsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ListRoleTagsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListRoleTagsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "ListRoleTagsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListRoleTagsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListRoleTagsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListRoleTagsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListRoleTagsCommand)(output, context);
      }
    };
    exports.ListRoleTagsCommand = ListRoleTagsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListSAMLProvidersCommand.js
var require_ListSAMLProvidersCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListSAMLProvidersCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListSAMLProvidersCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ListSAMLProvidersCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListSAMLProvidersCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "ListSAMLProvidersCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListSAMLProvidersRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListSAMLProvidersResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListSAMLProvidersCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListSAMLProvidersCommand)(output, context);
      }
    };
    exports.ListSAMLProvidersCommand = ListSAMLProvidersCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListSAMLProviderTagsCommand.js
var require_ListSAMLProviderTagsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListSAMLProviderTagsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListSAMLProviderTagsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ListSAMLProviderTagsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListSAMLProviderTagsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "ListSAMLProviderTagsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListSAMLProviderTagsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListSAMLProviderTagsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListSAMLProviderTagsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListSAMLProviderTagsCommand)(output, context);
      }
    };
    exports.ListSAMLProviderTagsCommand = ListSAMLProviderTagsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListServerCertificatesCommand.js
var require_ListServerCertificatesCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListServerCertificatesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListServerCertificatesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ListServerCertificatesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListServerCertificatesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "ListServerCertificatesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListServerCertificatesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListServerCertificatesResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListServerCertificatesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListServerCertificatesCommand)(output, context);
      }
    };
    exports.ListServerCertificatesCommand = ListServerCertificatesCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListServerCertificateTagsCommand.js
var require_ListServerCertificateTagsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListServerCertificateTagsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListServerCertificateTagsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ListServerCertificateTagsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListServerCertificateTagsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "ListServerCertificateTagsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListServerCertificateTagsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListServerCertificateTagsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListServerCertificateTagsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListServerCertificateTagsCommand)(output, context);
      }
    };
    exports.ListServerCertificateTagsCommand = ListServerCertificateTagsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListServiceSpecificCredentialsCommand.js
var require_ListServiceSpecificCredentialsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListServiceSpecificCredentialsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListServiceSpecificCredentialsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ListServiceSpecificCredentialsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListServiceSpecificCredentialsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "ListServiceSpecificCredentialsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListServiceSpecificCredentialsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListServiceSpecificCredentialsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListServiceSpecificCredentialsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListServiceSpecificCredentialsCommand)(output, context);
      }
    };
    exports.ListServiceSpecificCredentialsCommand = ListServiceSpecificCredentialsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListSigningCertificatesCommand.js
var require_ListSigningCertificatesCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListSigningCertificatesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListSigningCertificatesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ListSigningCertificatesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListSigningCertificatesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "ListSigningCertificatesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListSigningCertificatesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListSigningCertificatesResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListSigningCertificatesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListSigningCertificatesCommand)(output, context);
      }
    };
    exports.ListSigningCertificatesCommand = ListSigningCertificatesCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListSSHPublicKeysCommand.js
var require_ListSSHPublicKeysCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListSSHPublicKeysCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListSSHPublicKeysCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ListSSHPublicKeysCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListSSHPublicKeysCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "ListSSHPublicKeysCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListSSHPublicKeysRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListSSHPublicKeysResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListSSHPublicKeysCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListSSHPublicKeysCommand)(output, context);
      }
    };
    exports.ListSSHPublicKeysCommand = ListSSHPublicKeysCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListUserPoliciesCommand.js
var require_ListUserPoliciesCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListUserPoliciesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListUserPoliciesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ListUserPoliciesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListUserPoliciesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "ListUserPoliciesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListUserPoliciesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListUserPoliciesResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListUserPoliciesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListUserPoliciesCommand)(output, context);
      }
    };
    exports.ListUserPoliciesCommand = ListUserPoliciesCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListUsersCommand.js
var require_ListUsersCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListUsersCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListUsersCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ListUsersCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListUsersCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "ListUsersCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListUsersRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListUsersResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListUsersCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListUsersCommand)(output, context);
      }
    };
    exports.ListUsersCommand = ListUsersCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListUserTagsCommand.js
var require_ListUserTagsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListUserTagsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListUserTagsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ListUserTagsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListUserTagsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "ListUserTagsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListUserTagsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListUserTagsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListUserTagsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListUserTagsCommand)(output, context);
      }
    };
    exports.ListUserTagsCommand = ListUserTagsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListVirtualMFADevicesCommand.js
var require_ListVirtualMFADevicesCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ListVirtualMFADevicesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListVirtualMFADevicesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ListVirtualMFADevicesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListVirtualMFADevicesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "ListVirtualMFADevicesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListVirtualMFADevicesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListVirtualMFADevicesResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListVirtualMFADevicesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListVirtualMFADevicesCommand)(output, context);
      }
    };
    exports.ListVirtualMFADevicesCommand = ListVirtualMFADevicesCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/PutGroupPolicyCommand.js
var require_PutGroupPolicyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/PutGroupPolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutGroupPolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var PutGroupPolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutGroupPolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "PutGroupPolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutGroupPolicyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryPutGroupPolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryPutGroupPolicyCommand)(output, context);
      }
    };
    exports.PutGroupPolicyCommand = PutGroupPolicyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/PutRolePermissionsBoundaryCommand.js
var require_PutRolePermissionsBoundaryCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/PutRolePermissionsBoundaryCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutRolePermissionsBoundaryCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var PutRolePermissionsBoundaryCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutRolePermissionsBoundaryCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "PutRolePermissionsBoundaryCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutRolePermissionsBoundaryRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryPutRolePermissionsBoundaryCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryPutRolePermissionsBoundaryCommand)(output, context);
      }
    };
    exports.PutRolePermissionsBoundaryCommand = PutRolePermissionsBoundaryCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/PutRolePolicyCommand.js
var require_PutRolePolicyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/PutRolePolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutRolePolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var PutRolePolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutRolePolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "PutRolePolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutRolePolicyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryPutRolePolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryPutRolePolicyCommand)(output, context);
      }
    };
    exports.PutRolePolicyCommand = PutRolePolicyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/PutUserPermissionsBoundaryCommand.js
var require_PutUserPermissionsBoundaryCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/PutUserPermissionsBoundaryCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutUserPermissionsBoundaryCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var PutUserPermissionsBoundaryCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutUserPermissionsBoundaryCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "PutUserPermissionsBoundaryCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutUserPermissionsBoundaryRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryPutUserPermissionsBoundaryCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryPutUserPermissionsBoundaryCommand)(output, context);
      }
    };
    exports.PutUserPermissionsBoundaryCommand = PutUserPermissionsBoundaryCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/PutUserPolicyCommand.js
var require_PutUserPolicyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/PutUserPolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutUserPolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var PutUserPolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutUserPolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "PutUserPolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutUserPolicyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryPutUserPolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryPutUserPolicyCommand)(output, context);
      }
    };
    exports.PutUserPolicyCommand = PutUserPolicyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/RemoveClientIDFromOpenIDConnectProviderCommand.js
var require_RemoveClientIDFromOpenIDConnectProviderCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/RemoveClientIDFromOpenIDConnectProviderCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RemoveClientIDFromOpenIDConnectProviderCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var RemoveClientIDFromOpenIDConnectProviderCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, RemoveClientIDFromOpenIDConnectProviderCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "RemoveClientIDFromOpenIDConnectProviderCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.RemoveClientIDFromOpenIDConnectProviderRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryRemoveClientIDFromOpenIDConnectProviderCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryRemoveClientIDFromOpenIDConnectProviderCommand)(output, context);
      }
    };
    exports.RemoveClientIDFromOpenIDConnectProviderCommand = RemoveClientIDFromOpenIDConnectProviderCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/RemoveRoleFromInstanceProfileCommand.js
var require_RemoveRoleFromInstanceProfileCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/RemoveRoleFromInstanceProfileCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RemoveRoleFromInstanceProfileCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var RemoveRoleFromInstanceProfileCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, RemoveRoleFromInstanceProfileCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "RemoveRoleFromInstanceProfileCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.RemoveRoleFromInstanceProfileRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryRemoveRoleFromInstanceProfileCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryRemoveRoleFromInstanceProfileCommand)(output, context);
      }
    };
    exports.RemoveRoleFromInstanceProfileCommand = RemoveRoleFromInstanceProfileCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/RemoveUserFromGroupCommand.js
var require_RemoveUserFromGroupCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/RemoveUserFromGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RemoveUserFromGroupCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var RemoveUserFromGroupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, RemoveUserFromGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "RemoveUserFromGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.RemoveUserFromGroupRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryRemoveUserFromGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryRemoveUserFromGroupCommand)(output, context);
      }
    };
    exports.RemoveUserFromGroupCommand = RemoveUserFromGroupCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ResetServiceSpecificCredentialCommand.js
var require_ResetServiceSpecificCredentialCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ResetServiceSpecificCredentialCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ResetServiceSpecificCredentialCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ResetServiceSpecificCredentialCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ResetServiceSpecificCredentialCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "ResetServiceSpecificCredentialCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ResetServiceSpecificCredentialRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ResetServiceSpecificCredentialResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryResetServiceSpecificCredentialCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryResetServiceSpecificCredentialCommand)(output, context);
      }
    };
    exports.ResetServiceSpecificCredentialCommand = ResetServiceSpecificCredentialCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ResyncMFADeviceCommand.js
var require_ResyncMFADeviceCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/ResyncMFADeviceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ResyncMFADeviceCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var ResyncMFADeviceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ResyncMFADeviceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "ResyncMFADeviceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ResyncMFADeviceRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryResyncMFADeviceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryResyncMFADeviceCommand)(output, context);
      }
    };
    exports.ResyncMFADeviceCommand = ResyncMFADeviceCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/SetDefaultPolicyVersionCommand.js
var require_SetDefaultPolicyVersionCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/SetDefaultPolicyVersionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SetDefaultPolicyVersionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var SetDefaultPolicyVersionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, SetDefaultPolicyVersionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "SetDefaultPolicyVersionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.SetDefaultPolicyVersionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_querySetDefaultPolicyVersionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_querySetDefaultPolicyVersionCommand)(output, context);
      }
    };
    exports.SetDefaultPolicyVersionCommand = SetDefaultPolicyVersionCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/SetSecurityTokenServicePreferencesCommand.js
var require_SetSecurityTokenServicePreferencesCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/SetSecurityTokenServicePreferencesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SetSecurityTokenServicePreferencesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var SetSecurityTokenServicePreferencesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, SetSecurityTokenServicePreferencesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "SetSecurityTokenServicePreferencesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.SetSecurityTokenServicePreferencesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_querySetSecurityTokenServicePreferencesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_querySetSecurityTokenServicePreferencesCommand)(output, context);
      }
    };
    exports.SetSecurityTokenServicePreferencesCommand = SetSecurityTokenServicePreferencesCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/SimulateCustomPolicyCommand.js
var require_SimulateCustomPolicyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/SimulateCustomPolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SimulateCustomPolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var SimulateCustomPolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, SimulateCustomPolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "SimulateCustomPolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.SimulateCustomPolicyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.SimulatePolicyResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_querySimulateCustomPolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_querySimulateCustomPolicyCommand)(output, context);
      }
    };
    exports.SimulateCustomPolicyCommand = SimulateCustomPolicyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/SimulatePrincipalPolicyCommand.js
var require_SimulatePrincipalPolicyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/SimulatePrincipalPolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SimulatePrincipalPolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var SimulatePrincipalPolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, SimulatePrincipalPolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "SimulatePrincipalPolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.SimulatePrincipalPolicyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.SimulatePolicyResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_querySimulatePrincipalPolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_querySimulatePrincipalPolicyCommand)(output, context);
      }
    };
    exports.SimulatePrincipalPolicyCommand = SimulatePrincipalPolicyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/TagInstanceProfileCommand.js
var require_TagInstanceProfileCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/TagInstanceProfileCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TagInstanceProfileCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var TagInstanceProfileCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, TagInstanceProfileCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "TagInstanceProfileCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.TagInstanceProfileRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryTagInstanceProfileCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryTagInstanceProfileCommand)(output, context);
      }
    };
    exports.TagInstanceProfileCommand = TagInstanceProfileCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/TagMFADeviceCommand.js
var require_TagMFADeviceCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/TagMFADeviceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TagMFADeviceCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var TagMFADeviceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, TagMFADeviceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "TagMFADeviceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.TagMFADeviceRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryTagMFADeviceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryTagMFADeviceCommand)(output, context);
      }
    };
    exports.TagMFADeviceCommand = TagMFADeviceCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/TagOpenIDConnectProviderCommand.js
var require_TagOpenIDConnectProviderCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/TagOpenIDConnectProviderCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TagOpenIDConnectProviderCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var TagOpenIDConnectProviderCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, TagOpenIDConnectProviderCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "TagOpenIDConnectProviderCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.TagOpenIDConnectProviderRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryTagOpenIDConnectProviderCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryTagOpenIDConnectProviderCommand)(output, context);
      }
    };
    exports.TagOpenIDConnectProviderCommand = TagOpenIDConnectProviderCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/TagPolicyCommand.js
var require_TagPolicyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/TagPolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TagPolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var TagPolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, TagPolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "TagPolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.TagPolicyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryTagPolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryTagPolicyCommand)(output, context);
      }
    };
    exports.TagPolicyCommand = TagPolicyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/TagRoleCommand.js
var require_TagRoleCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/TagRoleCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TagRoleCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var TagRoleCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, TagRoleCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "TagRoleCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.TagRoleRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryTagRoleCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryTagRoleCommand)(output, context);
      }
    };
    exports.TagRoleCommand = TagRoleCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/TagSAMLProviderCommand.js
var require_TagSAMLProviderCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/TagSAMLProviderCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TagSAMLProviderCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var TagSAMLProviderCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, TagSAMLProviderCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "TagSAMLProviderCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.TagSAMLProviderRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryTagSAMLProviderCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryTagSAMLProviderCommand)(output, context);
      }
    };
    exports.TagSAMLProviderCommand = TagSAMLProviderCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/TagServerCertificateCommand.js
var require_TagServerCertificateCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/TagServerCertificateCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TagServerCertificateCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var TagServerCertificateCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, TagServerCertificateCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "TagServerCertificateCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.TagServerCertificateRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryTagServerCertificateCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryTagServerCertificateCommand)(output, context);
      }
    };
    exports.TagServerCertificateCommand = TagServerCertificateCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/TagUserCommand.js
var require_TagUserCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/TagUserCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TagUserCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var TagUserCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, TagUserCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "TagUserCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.TagUserRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryTagUserCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryTagUserCommand)(output, context);
      }
    };
    exports.TagUserCommand = TagUserCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UntagInstanceProfileCommand.js
var require_UntagInstanceProfileCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UntagInstanceProfileCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UntagInstanceProfileCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var UntagInstanceProfileCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UntagInstanceProfileCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "UntagInstanceProfileCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UntagInstanceProfileRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryUntagInstanceProfileCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryUntagInstanceProfileCommand)(output, context);
      }
    };
    exports.UntagInstanceProfileCommand = UntagInstanceProfileCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UntagMFADeviceCommand.js
var require_UntagMFADeviceCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UntagMFADeviceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UntagMFADeviceCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var UntagMFADeviceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UntagMFADeviceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "UntagMFADeviceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UntagMFADeviceRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryUntagMFADeviceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryUntagMFADeviceCommand)(output, context);
      }
    };
    exports.UntagMFADeviceCommand = UntagMFADeviceCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UntagOpenIDConnectProviderCommand.js
var require_UntagOpenIDConnectProviderCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UntagOpenIDConnectProviderCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UntagOpenIDConnectProviderCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var UntagOpenIDConnectProviderCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UntagOpenIDConnectProviderCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "UntagOpenIDConnectProviderCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UntagOpenIDConnectProviderRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryUntagOpenIDConnectProviderCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryUntagOpenIDConnectProviderCommand)(output, context);
      }
    };
    exports.UntagOpenIDConnectProviderCommand = UntagOpenIDConnectProviderCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UntagPolicyCommand.js
var require_UntagPolicyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UntagPolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UntagPolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var UntagPolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UntagPolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "UntagPolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UntagPolicyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryUntagPolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryUntagPolicyCommand)(output, context);
      }
    };
    exports.UntagPolicyCommand = UntagPolicyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UntagRoleCommand.js
var require_UntagRoleCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UntagRoleCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UntagRoleCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var UntagRoleCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UntagRoleCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "UntagRoleCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UntagRoleRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryUntagRoleCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryUntagRoleCommand)(output, context);
      }
    };
    exports.UntagRoleCommand = UntagRoleCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UntagSAMLProviderCommand.js
var require_UntagSAMLProviderCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UntagSAMLProviderCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UntagSAMLProviderCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var UntagSAMLProviderCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UntagSAMLProviderCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "UntagSAMLProviderCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UntagSAMLProviderRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryUntagSAMLProviderCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryUntagSAMLProviderCommand)(output, context);
      }
    };
    exports.UntagSAMLProviderCommand = UntagSAMLProviderCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UntagServerCertificateCommand.js
var require_UntagServerCertificateCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UntagServerCertificateCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UntagServerCertificateCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var UntagServerCertificateCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UntagServerCertificateCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "UntagServerCertificateCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UntagServerCertificateRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryUntagServerCertificateCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryUntagServerCertificateCommand)(output, context);
      }
    };
    exports.UntagServerCertificateCommand = UntagServerCertificateCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UntagUserCommand.js
var require_UntagUserCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UntagUserCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UntagUserCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var UntagUserCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UntagUserCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "UntagUserCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UntagUserRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryUntagUserCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryUntagUserCommand)(output, context);
      }
    };
    exports.UntagUserCommand = UntagUserCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UpdateAccessKeyCommand.js
var require_UpdateAccessKeyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UpdateAccessKeyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateAccessKeyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var UpdateAccessKeyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateAccessKeyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "UpdateAccessKeyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UpdateAccessKeyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryUpdateAccessKeyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryUpdateAccessKeyCommand)(output, context);
      }
    };
    exports.UpdateAccessKeyCommand = UpdateAccessKeyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UpdateAccountPasswordPolicyCommand.js
var require_UpdateAccountPasswordPolicyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UpdateAccountPasswordPolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateAccountPasswordPolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var UpdateAccountPasswordPolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateAccountPasswordPolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "UpdateAccountPasswordPolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UpdateAccountPasswordPolicyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryUpdateAccountPasswordPolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryUpdateAccountPasswordPolicyCommand)(output, context);
      }
    };
    exports.UpdateAccountPasswordPolicyCommand = UpdateAccountPasswordPolicyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UpdateAssumeRolePolicyCommand.js
var require_UpdateAssumeRolePolicyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UpdateAssumeRolePolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateAssumeRolePolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var UpdateAssumeRolePolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateAssumeRolePolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "UpdateAssumeRolePolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UpdateAssumeRolePolicyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryUpdateAssumeRolePolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryUpdateAssumeRolePolicyCommand)(output, context);
      }
    };
    exports.UpdateAssumeRolePolicyCommand = UpdateAssumeRolePolicyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UpdateGroupCommand.js
var require_UpdateGroupCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UpdateGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateGroupCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var UpdateGroupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "UpdateGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UpdateGroupRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryUpdateGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryUpdateGroupCommand)(output, context);
      }
    };
    exports.UpdateGroupCommand = UpdateGroupCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UpdateLoginProfileCommand.js
var require_UpdateLoginProfileCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UpdateLoginProfileCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateLoginProfileCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var UpdateLoginProfileCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateLoginProfileCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "UpdateLoginProfileCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UpdateLoginProfileRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryUpdateLoginProfileCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryUpdateLoginProfileCommand)(output, context);
      }
    };
    exports.UpdateLoginProfileCommand = UpdateLoginProfileCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UpdateOpenIDConnectProviderThumbprintCommand.js
var require_UpdateOpenIDConnectProviderThumbprintCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UpdateOpenIDConnectProviderThumbprintCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateOpenIDConnectProviderThumbprintCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var UpdateOpenIDConnectProviderThumbprintCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateOpenIDConnectProviderThumbprintCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "UpdateOpenIDConnectProviderThumbprintCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UpdateOpenIDConnectProviderThumbprintRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryUpdateOpenIDConnectProviderThumbprintCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryUpdateOpenIDConnectProviderThumbprintCommand)(output, context);
      }
    };
    exports.UpdateOpenIDConnectProviderThumbprintCommand = UpdateOpenIDConnectProviderThumbprintCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UpdateRoleCommand.js
var require_UpdateRoleCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UpdateRoleCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateRoleCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var UpdateRoleCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateRoleCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "UpdateRoleCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UpdateRoleRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.UpdateRoleResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryUpdateRoleCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryUpdateRoleCommand)(output, context);
      }
    };
    exports.UpdateRoleCommand = UpdateRoleCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UpdateRoleDescriptionCommand.js
var require_UpdateRoleDescriptionCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UpdateRoleDescriptionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateRoleDescriptionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var UpdateRoleDescriptionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateRoleDescriptionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "UpdateRoleDescriptionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UpdateRoleDescriptionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.UpdateRoleDescriptionResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryUpdateRoleDescriptionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryUpdateRoleDescriptionCommand)(output, context);
      }
    };
    exports.UpdateRoleDescriptionCommand = UpdateRoleDescriptionCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UpdateSAMLProviderCommand.js
var require_UpdateSAMLProviderCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UpdateSAMLProviderCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateSAMLProviderCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var UpdateSAMLProviderCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateSAMLProviderCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "UpdateSAMLProviderCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UpdateSAMLProviderRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.UpdateSAMLProviderResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryUpdateSAMLProviderCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryUpdateSAMLProviderCommand)(output, context);
      }
    };
    exports.UpdateSAMLProviderCommand = UpdateSAMLProviderCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UpdateServerCertificateCommand.js
var require_UpdateServerCertificateCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UpdateServerCertificateCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateServerCertificateCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var UpdateServerCertificateCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateServerCertificateCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "UpdateServerCertificateCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UpdateServerCertificateRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryUpdateServerCertificateCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryUpdateServerCertificateCommand)(output, context);
      }
    };
    exports.UpdateServerCertificateCommand = UpdateServerCertificateCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UpdateServiceSpecificCredentialCommand.js
var require_UpdateServiceSpecificCredentialCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UpdateServiceSpecificCredentialCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateServiceSpecificCredentialCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var UpdateServiceSpecificCredentialCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateServiceSpecificCredentialCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "UpdateServiceSpecificCredentialCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UpdateServiceSpecificCredentialRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryUpdateServiceSpecificCredentialCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryUpdateServiceSpecificCredentialCommand)(output, context);
      }
    };
    exports.UpdateServiceSpecificCredentialCommand = UpdateServiceSpecificCredentialCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UpdateSigningCertificateCommand.js
var require_UpdateSigningCertificateCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UpdateSigningCertificateCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateSigningCertificateCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var UpdateSigningCertificateCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateSigningCertificateCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "UpdateSigningCertificateCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UpdateSigningCertificateRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryUpdateSigningCertificateCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryUpdateSigningCertificateCommand)(output, context);
      }
    };
    exports.UpdateSigningCertificateCommand = UpdateSigningCertificateCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UpdateSSHPublicKeyCommand.js
var require_UpdateSSHPublicKeyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UpdateSSHPublicKeyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateSSHPublicKeyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var UpdateSSHPublicKeyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateSSHPublicKeyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "UpdateSSHPublicKeyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UpdateSSHPublicKeyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryUpdateSSHPublicKeyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryUpdateSSHPublicKeyCommand)(output, context);
      }
    };
    exports.UpdateSSHPublicKeyCommand = UpdateSSHPublicKeyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UpdateUserCommand.js
var require_UpdateUserCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UpdateUserCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateUserCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var UpdateUserCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateUserCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "UpdateUserCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UpdateUserRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryUpdateUserCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryUpdateUserCommand)(output, context);
      }
    };
    exports.UpdateUserCommand = UpdateUserCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UploadServerCertificateCommand.js
var require_UploadServerCertificateCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UploadServerCertificateCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UploadServerCertificateCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var UploadServerCertificateCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UploadServerCertificateCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "UploadServerCertificateCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UploadServerCertificateRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.UploadServerCertificateResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryUploadServerCertificateCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryUploadServerCertificateCommand)(output, context);
      }
    };
    exports.UploadServerCertificateCommand = UploadServerCertificateCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UploadSigningCertificateCommand.js
var require_UploadSigningCertificateCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UploadSigningCertificateCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UploadSigningCertificateCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var UploadSigningCertificateCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UploadSigningCertificateCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "UploadSigningCertificateCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UploadSigningCertificateRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.UploadSigningCertificateResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryUploadSigningCertificateCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryUploadSigningCertificateCommand)(output, context);
      }
    };
    exports.UploadSigningCertificateCommand = UploadSigningCertificateCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UploadSSHPublicKeyCommand.js
var require_UploadSSHPublicKeyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/UploadSSHPublicKeyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UploadSSHPublicKeyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_1_1 = require_models_1();
    var Aws_query_1 = require_Aws_query();
    var UploadSSHPublicKeyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UploadSSHPublicKeyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "IAMClient";
        const commandName = "UploadSSHPublicKeyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UploadSSHPublicKeyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.UploadSSHPublicKeyResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryUploadSSHPublicKeyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryUploadSSHPublicKeyCommand)(output, context);
      }
    };
    exports.UploadSSHPublicKeyCommand = UploadSSHPublicKeyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-content-length@3.272.0/node_modules/@aws-sdk/middleware-content-length/dist-cjs/index.js
var require_dist_cjs8 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-content-length@3.272.0/node_modules/@aws-sdk/middleware-content-length/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getContentLengthPlugin = exports.contentLengthMiddlewareOptions = exports.contentLengthMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs7();
    var CONTENT_LENGTH_HEADER = "content-length";
    function contentLengthMiddleware(bodyLengthChecker) {
      return (next) => async (args) => {
        const request = args.request;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          const { body, headers } = request;
          if (body && Object.keys(headers).map((str) => str.toLowerCase()).indexOf(CONTENT_LENGTH_HEADER) === -1) {
            try {
              const length = bodyLengthChecker(body);
              request.headers = {
                ...request.headers,
                [CONTENT_LENGTH_HEADER]: String(length)
              };
            } catch (error2) {
            }
          }
        }
        return next({
          ...args,
          request
        });
      };
    }
    exports.contentLengthMiddleware = contentLengthMiddleware;
    exports.contentLengthMiddlewareOptions = {
      step: "build",
      tags: ["SET_CONTENT_LENGTH", "CONTENT_LENGTH"],
      name: "contentLengthMiddleware",
      override: true
    };
    var getContentLengthPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), exports.contentLengthMiddlewareOptions);
      }
    });
    exports.getContentLengthPlugin = getContentLengthPlugin;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-host-header@3.278.0/node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js
var require_dist_cjs9 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-host-header@3.278.0/node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getHostHeaderPlugin = exports.hostHeaderMiddlewareOptions = exports.hostHeaderMiddleware = exports.resolveHostHeaderConfig = void 0;
    var protocol_http_1 = require_dist_cjs7();
    function resolveHostHeaderConfig(input) {
      return input;
    }
    exports.resolveHostHeaderConfig = resolveHostHeaderConfig;
    var hostHeaderMiddleware = (options) => (next) => async (args) => {
      if (!protocol_http_1.HttpRequest.isInstance(args.request))
        return next(args);
      const { request } = args;
      const { handlerProtocol = "" } = options.requestHandler.metadata || {};
      if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
        delete request.headers["host"];
        request.headers[":authority"] = "";
      } else if (!request.headers["host"]) {
        let host = request.hostname;
        if (request.port != null)
          host += `:${request.port}`;
        request.headers["host"] = host;
      }
      return next(args);
    };
    exports.hostHeaderMiddleware = hostHeaderMiddleware;
    exports.hostHeaderMiddlewareOptions = {
      name: "hostHeaderMiddleware",
      step: "build",
      priority: "low",
      tags: ["HOST"],
      override: true
    };
    var getHostHeaderPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.hostHeaderMiddleware)(options), exports.hostHeaderMiddlewareOptions);
      }
    });
    exports.getHostHeaderPlugin = getHostHeaderPlugin;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-logger@3.272.0/node_modules/@aws-sdk/middleware-logger/dist-cjs/loggerMiddleware.js
var require_loggerMiddleware = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-logger@3.272.0/node_modules/@aws-sdk/middleware-logger/dist-cjs/loggerMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getLoggerPlugin = exports.loggerMiddlewareOptions = exports.loggerMiddleware = void 0;
    var loggerMiddleware = () => (next, context) => async (args) => {
      const response = await next(args);
      const { clientName, commandName, logger, inputFilterSensitiveLog, outputFilterSensitiveLog, dynamoDbDocumentClientOptions = {} } = context;
      const { overrideInputFilterSensitiveLog, overrideOutputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
      if (!logger) {
        return response;
      }
      if (typeof logger.info === "function") {
        const { $metadata, ...outputWithoutMetadata } = response.output;
        logger.info({
          clientName,
          commandName,
          input: (overrideInputFilterSensitiveLog !== null && overrideInputFilterSensitiveLog !== void 0 ? overrideInputFilterSensitiveLog : inputFilterSensitiveLog)(args.input),
          output: (overrideOutputFilterSensitiveLog !== null && overrideOutputFilterSensitiveLog !== void 0 ? overrideOutputFilterSensitiveLog : outputFilterSensitiveLog)(outputWithoutMetadata),
          metadata: $metadata
        });
      }
      return response;
    };
    exports.loggerMiddleware = loggerMiddleware;
    exports.loggerMiddlewareOptions = {
      name: "loggerMiddleware",
      tags: ["LOGGER"],
      step: "initialize",
      override: true
    };
    var getLoggerPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.loggerMiddleware)(), exports.loggerMiddlewareOptions);
      }
    });
    exports.getLoggerPlugin = getLoggerPlugin;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-logger@3.272.0/node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js
var require_dist_cjs10 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-logger@3.272.0/node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_loggerMiddleware(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-recursion-detection@3.272.0/node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js
var require_dist_cjs11 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-recursion-detection@3.272.0/node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRecursionDetectionPlugin = exports.addRecursionDetectionMiddlewareOptions = exports.recursionDetectionMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs7();
    var TRACE_ID_HEADER_NAME = "X-Amzn-Trace-Id";
    var ENV_LAMBDA_FUNCTION_NAME = "AWS_LAMBDA_FUNCTION_NAME";
    var ENV_TRACE_ID = "_X_AMZN_TRACE_ID";
    var recursionDetectionMiddleware = (options) => (next) => async (args) => {
      const { request } = args;
      if (!protocol_http_1.HttpRequest.isInstance(request) || options.runtime !== "node" || request.headers.hasOwnProperty(TRACE_ID_HEADER_NAME)) {
        return next(args);
      }
      const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];
      const traceId = process.env[ENV_TRACE_ID];
      const nonEmptyString = (str) => typeof str === "string" && str.length > 0;
      if (nonEmptyString(functionName) && nonEmptyString(traceId)) {
        request.headers[TRACE_ID_HEADER_NAME] = traceId;
      }
      return next({
        ...args,
        request
      });
    };
    exports.recursionDetectionMiddleware = recursionDetectionMiddleware;
    exports.addRecursionDetectionMiddlewareOptions = {
      step: "build",
      tags: ["RECURSION_DETECTION"],
      name: "recursionDetectionMiddleware",
      override: true,
      priority: "low"
    };
    var getRecursionDetectionPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.recursionDetectionMiddleware)(options), exports.addRecursionDetectionMiddlewareOptions);
      }
    });
    exports.getRecursionDetectionPlugin = getRecursionDetectionPlugin;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.272.0/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/configurations.js
var require_configurations = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.272.0/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/configurations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveUserAgentConfig = void 0;
    function resolveUserAgentConfig(input) {
      return {
        ...input,
        customUserAgent: typeof input.customUserAgent === "string" ? [[input.customUserAgent]] : input.customUserAgent
      };
    }
    exports.resolveUserAgentConfig = resolveUserAgentConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.272.0/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/constants.js
var require_constants = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.272.0/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UA_ESCAPE_REGEX = exports.SPACE = exports.X_AMZ_USER_AGENT = exports.USER_AGENT = void 0;
    exports.USER_AGENT = "user-agent";
    exports.X_AMZ_USER_AGENT = "x-amz-user-agent";
    exports.SPACE = " ";
    exports.UA_ESCAPE_REGEX = /[^\!\#\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.272.0/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/user-agent-middleware.js
var require_user_agent_middleware = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.272.0/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/user-agent-middleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getUserAgentPlugin = exports.getUserAgentMiddlewareOptions = exports.userAgentMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs7();
    var constants_1 = require_constants();
    var userAgentMiddleware = (options) => (next, context) => async (args) => {
      var _a, _b;
      const { request } = args;
      if (!protocol_http_1.HttpRequest.isInstance(request))
        return next(args);
      const { headers } = request;
      const userAgent = ((_a = context === null || context === void 0 ? void 0 : context.userAgent) === null || _a === void 0 ? void 0 : _a.map(escapeUserAgent)) || [];
      const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);
      const customUserAgent = ((_b = options === null || options === void 0 ? void 0 : options.customUserAgent) === null || _b === void 0 ? void 0 : _b.map(escapeUserAgent)) || [];
      const sdkUserAgentValue = [...defaultUserAgent, ...userAgent, ...customUserAgent].join(constants_1.SPACE);
      const normalUAValue = [
        ...defaultUserAgent.filter((section) => section.startsWith("aws-sdk-")),
        ...customUserAgent
      ].join(constants_1.SPACE);
      if (options.runtime !== "browser") {
        if (normalUAValue) {
          headers[constants_1.X_AMZ_USER_AGENT] = headers[constants_1.X_AMZ_USER_AGENT] ? `${headers[constants_1.USER_AGENT]} ${normalUAValue}` : normalUAValue;
        }
        headers[constants_1.USER_AGENT] = sdkUserAgentValue;
      } else {
        headers[constants_1.X_AMZ_USER_AGENT] = sdkUserAgentValue;
      }
      return next({
        ...args,
        request
      });
    };
    exports.userAgentMiddleware = userAgentMiddleware;
    var escapeUserAgent = ([name, version2]) => {
      const prefixSeparatorIndex = name.indexOf("/");
      const prefix = name.substring(0, prefixSeparatorIndex);
      let uaName = name.substring(prefixSeparatorIndex + 1);
      if (prefix === "api") {
        uaName = uaName.toLowerCase();
      }
      return [prefix, uaName, version2].filter((item) => item && item.length > 0).map((item) => item === null || item === void 0 ? void 0 : item.replace(constants_1.UA_ESCAPE_REGEX, "_")).join("/");
    };
    exports.getUserAgentMiddlewareOptions = {
      name: "getUserAgentMiddleware",
      step: "build",
      priority: "low",
      tags: ["SET_USER_AGENT", "USER_AGENT"],
      override: true
    };
    var getUserAgentPlugin = (config) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.userAgentMiddleware)(config), exports.getUserAgentMiddlewareOptions);
      }
    });
    exports.getUserAgentPlugin = getUserAgentPlugin;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.272.0/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js
var require_dist_cjs12 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.272.0/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_configurations(), exports);
    tslib_1.__exportStar(require_user_agent_middleware(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/endpoint/EndpointParameters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "iam"
      };
    };
    exports.resolveClientEndpointParameters = resolveClientEndpointParameters;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/package.json
var require_package = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/package.json"(exports, module) {
    module.exports = {
      name: "@aws-sdk/client-iam",
      description: "AWS SDK for JavaScript Iam Client for Node.js, Browser and React Native",
      version: "3.279.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo iam"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/client-sts": "3.279.0",
        "@aws-sdk/config-resolver": "3.272.0",
        "@aws-sdk/credential-provider-node": "3.279.0",
        "@aws-sdk/fetch-http-handler": "3.272.0",
        "@aws-sdk/hash-node": "3.272.0",
        "@aws-sdk/invalid-dependency": "3.272.0",
        "@aws-sdk/middleware-content-length": "3.272.0",
        "@aws-sdk/middleware-endpoint": "3.272.0",
        "@aws-sdk/middleware-host-header": "3.278.0",
        "@aws-sdk/middleware-logger": "3.272.0",
        "@aws-sdk/middleware-recursion-detection": "3.272.0",
        "@aws-sdk/middleware-retry": "3.272.0",
        "@aws-sdk/middleware-serde": "3.272.0",
        "@aws-sdk/middleware-signing": "3.272.0",
        "@aws-sdk/middleware-stack": "3.272.0",
        "@aws-sdk/middleware-user-agent": "3.272.0",
        "@aws-sdk/node-config-provider": "3.272.0",
        "@aws-sdk/node-http-handler": "3.272.0",
        "@aws-sdk/protocol-http": "3.272.0",
        "@aws-sdk/smithy-client": "3.279.0",
        "@aws-sdk/types": "3.272.0",
        "@aws-sdk/url-parser": "3.272.0",
        "@aws-sdk/util-base64": "3.208.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.208.0",
        "@aws-sdk/util-defaults-mode-browser": "3.279.0",
        "@aws-sdk/util-defaults-mode-node": "3.279.0",
        "@aws-sdk/util-endpoints": "3.272.0",
        "@aws-sdk/util-retry": "3.272.0",
        "@aws-sdk/util-user-agent-browser": "3.272.0",
        "@aws-sdk/util-user-agent-node": "3.272.0",
        "@aws-sdk/util-utf8": "3.254.0",
        "@aws-sdk/util-waiter": "3.272.0",
        "fast-xml-parser": "4.1.2",
        tslib: "^2.3.1"
      },
      devDependencies: {
        "@aws-sdk/service-client-documentation-generator": "3.208.0",
        "@tsconfig/node14": "1.0.3",
        "@types/node": "^14.14.31",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.19.2",
        typescript: "~4.6.2"
      },
      overrides: {
        typedoc: {
          typescript: "~4.6.2"
        }
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-iam",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-iam"
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+property-provider@3.272.0/node_modules/@aws-sdk/property-provider/dist-cjs/ProviderError.js
var require_ProviderError = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+property-provider@3.272.0/node_modules/@aws-sdk/property-provider/dist-cjs/ProviderError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ProviderError = void 0;
    var ProviderError = class extends Error {
      constructor(message, tryNextLink = true) {
        super(message);
        this.tryNextLink = tryNextLink;
        this.name = "ProviderError";
        Object.setPrototypeOf(this, ProviderError.prototype);
      }
      static from(error2, tryNextLink = true) {
        return Object.assign(new this(error2.message, tryNextLink), error2);
      }
    };
    exports.ProviderError = ProviderError;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+property-provider@3.272.0/node_modules/@aws-sdk/property-provider/dist-cjs/CredentialsProviderError.js
var require_CredentialsProviderError = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+property-provider@3.272.0/node_modules/@aws-sdk/property-provider/dist-cjs/CredentialsProviderError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CredentialsProviderError = void 0;
    var ProviderError_1 = require_ProviderError();
    var CredentialsProviderError = class extends ProviderError_1.ProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "CredentialsProviderError";
        Object.setPrototypeOf(this, CredentialsProviderError.prototype);
      }
    };
    exports.CredentialsProviderError = CredentialsProviderError;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+property-provider@3.272.0/node_modules/@aws-sdk/property-provider/dist-cjs/TokenProviderError.js
var require_TokenProviderError = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+property-provider@3.272.0/node_modules/@aws-sdk/property-provider/dist-cjs/TokenProviderError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TokenProviderError = void 0;
    var ProviderError_1 = require_ProviderError();
    var TokenProviderError = class extends ProviderError_1.ProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "TokenProviderError";
        Object.setPrototypeOf(this, TokenProviderError.prototype);
      }
    };
    exports.TokenProviderError = TokenProviderError;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+property-provider@3.272.0/node_modules/@aws-sdk/property-provider/dist-cjs/chain.js
var require_chain = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+property-provider@3.272.0/node_modules/@aws-sdk/property-provider/dist-cjs/chain.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.chain = void 0;
    var ProviderError_1 = require_ProviderError();
    function chain(...providers) {
      return () => {
        let promise = Promise.reject(new ProviderError_1.ProviderError("No providers in chain"));
        for (const provider of providers) {
          promise = promise.catch((err) => {
            if (err === null || err === void 0 ? void 0 : err.tryNextLink) {
              return provider();
            }
            throw err;
          });
        }
        return promise;
      };
    }
    exports.chain = chain;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+property-provider@3.272.0/node_modules/@aws-sdk/property-provider/dist-cjs/fromStatic.js
var require_fromStatic = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+property-provider@3.272.0/node_modules/@aws-sdk/property-provider/dist-cjs/fromStatic.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromStatic = void 0;
    var fromStatic = (staticValue) => () => Promise.resolve(staticValue);
    exports.fromStatic = fromStatic;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+property-provider@3.272.0/node_modules/@aws-sdk/property-provider/dist-cjs/memoize.js
var require_memoize = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+property-provider@3.272.0/node_modules/@aws-sdk/property-provider/dist-cjs/memoize.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.memoize = void 0;
    var memoize = (provider, isExpired, requiresRefresh) => {
      let resolved;
      let pending;
      let hasResult;
      let isConstant = false;
      const coalesceProvider = async () => {
        if (!pending) {
          pending = provider();
        }
        try {
          resolved = await pending;
          hasResult = true;
          isConstant = false;
        } finally {
          pending = void 0;
        }
        return resolved;
      };
      if (isExpired === void 0) {
        return async (options) => {
          if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
            resolved = await coalesceProvider();
          }
          return resolved;
        };
      }
      return async (options) => {
        if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
          resolved = await coalesceProvider();
        }
        if (isConstant) {
          return resolved;
        }
        if (requiresRefresh && !requiresRefresh(resolved)) {
          isConstant = true;
          return resolved;
        }
        if (isExpired(resolved)) {
          await coalesceProvider();
          return resolved;
        }
        return resolved;
      };
    };
    exports.memoize = memoize;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+property-provider@3.272.0/node_modules/@aws-sdk/property-provider/dist-cjs/index.js
var require_dist_cjs13 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+property-provider@3.272.0/node_modules/@aws-sdk/property-provider/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_CredentialsProviderError(), exports);
    tslib_1.__exportStar(require_ProviderError(), exports);
    tslib_1.__exportStar(require_TokenProviderError(), exports);
    tslib_1.__exportStar(require_chain(), exports);
    tslib_1.__exportStar(require_fromStatic(), exports);
    tslib_1.__exportStar(require_memoize(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-env@3.272.0/node_modules/@aws-sdk/credential-provider-env/dist-cjs/fromEnv.js
var require_fromEnv = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-env@3.272.0/node_modules/@aws-sdk/credential-provider-env/dist-cjs/fromEnv.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromEnv = exports.ENV_EXPIRATION = exports.ENV_SESSION = exports.ENV_SECRET = exports.ENV_KEY = void 0;
    var property_provider_1 = require_dist_cjs13();
    exports.ENV_KEY = "AWS_ACCESS_KEY_ID";
    exports.ENV_SECRET = "AWS_SECRET_ACCESS_KEY";
    exports.ENV_SESSION = "AWS_SESSION_TOKEN";
    exports.ENV_EXPIRATION = "AWS_CREDENTIAL_EXPIRATION";
    var fromEnv = () => async () => {
      const accessKeyId = process.env[exports.ENV_KEY];
      const secretAccessKey = process.env[exports.ENV_SECRET];
      const sessionToken = process.env[exports.ENV_SESSION];
      const expiry = process.env[exports.ENV_EXPIRATION];
      if (accessKeyId && secretAccessKey) {
        return {
          accessKeyId,
          secretAccessKey,
          ...sessionToken && { sessionToken },
          ...expiry && { expiration: new Date(expiry) }
        };
      }
      throw new property_provider_1.CredentialsProviderError("Unable to find environment variable credentials.");
    };
    exports.fromEnv = fromEnv;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-env@3.272.0/node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js
var require_dist_cjs14 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-env@3.272.0/node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromEnv(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getHomeDir.js
var require_getHomeDir = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getHomeDir.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getHomeDir = void 0;
    var os_1 = __require("os");
    var path_1 = __require("path");
    var getHomeDir = () => {
      const { HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = `C:${path_1.sep}` } = process.env;
      if (HOME)
        return HOME;
      if (USERPROFILE)
        return USERPROFILE;
      if (HOMEPATH)
        return `${HOMEDRIVE}${HOMEPATH}`;
      return (0, os_1.homedir)();
    };
    exports.getHomeDir = getHomeDir;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileName.js
var require_getProfileName = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileName.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getProfileName = exports.DEFAULT_PROFILE = exports.ENV_PROFILE = void 0;
    exports.ENV_PROFILE = "AWS_PROFILE";
    exports.DEFAULT_PROFILE = "default";
    var getProfileName = (init) => init.profile || process.env[exports.ENV_PROFILE] || exports.DEFAULT_PROFILE;
    exports.getProfileName = getProfileName;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js
var require_getSSOTokenFilepath = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSSOTokenFilepath = void 0;
    var crypto_1 = __require("crypto");
    var path_1 = __require("path");
    var getHomeDir_1 = require_getHomeDir();
    var getSSOTokenFilepath = (id) => {
      const hasher = (0, crypto_1.createHash)("sha1");
      const cacheName = hasher.update(id).digest("hex");
      return (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "sso", "cache", `${cacheName}.json`);
    };
    exports.getSSOTokenFilepath = getSSOTokenFilepath;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js
var require_getSSOTokenFromFile = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSSOTokenFromFile = void 0;
    var fs_1 = __require("fs");
    var getSSOTokenFilepath_1 = require_getSSOTokenFilepath();
    var { readFile } = fs_1.promises;
    var getSSOTokenFromFile = async (id) => {
      const ssoTokenFilepath = (0, getSSOTokenFilepath_1.getSSOTokenFilepath)(id);
      const ssoTokenText = await readFile(ssoTokenFilepath, "utf8");
      return JSON.parse(ssoTokenText);
    };
    exports.getSSOTokenFromFile = getSSOTokenFromFile;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getConfigFilepath.js
var require_getConfigFilepath = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getConfigFilepath.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getConfigFilepath = exports.ENV_CONFIG_PATH = void 0;
    var path_1 = __require("path");
    var getHomeDir_1 = require_getHomeDir();
    exports.ENV_CONFIG_PATH = "AWS_CONFIG_FILE";
    var getConfigFilepath = () => process.env[exports.ENV_CONFIG_PATH] || (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "config");
    exports.getConfigFilepath = getConfigFilepath;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getCredentialsFilepath.js
var require_getCredentialsFilepath = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getCredentialsFilepath.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCredentialsFilepath = exports.ENV_CREDENTIALS_PATH = void 0;
    var path_1 = __require("path");
    var getHomeDir_1 = require_getHomeDir();
    exports.ENV_CREDENTIALS_PATH = "AWS_SHARED_CREDENTIALS_FILE";
    var getCredentialsFilepath = () => process.env[exports.ENV_CREDENTIALS_PATH] || (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "credentials");
    exports.getCredentialsFilepath = getCredentialsFilepath;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileData.js
var require_getProfileData = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getProfileData = void 0;
    var profileKeyRegex = /^profile\s(["'])?([^\1]+)\1$/;
    var getProfileData = (data2) => Object.entries(data2).filter(([key]) => profileKeyRegex.test(key)).reduce((acc, [key, value]) => ({ ...acc, [profileKeyRegex.exec(key)[2]]: value }), {
      ...data2.default && { default: data2.default }
    });
    exports.getProfileData = getProfileData;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseIni.js
var require_parseIni = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseIni.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseIni = void 0;
    var profileNameBlockList = ["__proto__", "profile __proto__"];
    var parseIni = (iniData) => {
      const map3 = {};
      let currentSection;
      for (let line of iniData.split(/\r?\n/)) {
        line = line.split(/(^|\s)[;#]/)[0].trim();
        const isSection = line[0] === "[" && line[line.length - 1] === "]";
        if (isSection) {
          currentSection = line.substring(1, line.length - 1);
          if (profileNameBlockList.includes(currentSection)) {
            throw new Error(`Found invalid profile name "${currentSection}"`);
          }
        } else if (currentSection) {
          const indexOfEqualsSign = line.indexOf("=");
          const start = 0;
          const end = line.length - 1;
          const isAssignment = indexOfEqualsSign !== -1 && indexOfEqualsSign !== start && indexOfEqualsSign !== end;
          if (isAssignment) {
            const [name, value] = [
              line.substring(0, indexOfEqualsSign).trim(),
              line.substring(indexOfEqualsSign + 1).trim()
            ];
            map3[currentSection] = map3[currentSection] || {};
            map3[currentSection][name] = value;
          }
        }
      }
      return map3;
    };
    exports.parseIni = parseIni;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/slurpFile.js
var require_slurpFile = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/slurpFile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.slurpFile = void 0;
    var fs_1 = __require("fs");
    var { readFile } = fs_1.promises;
    var filePromisesHash = {};
    var slurpFile = (path20) => {
      if (!filePromisesHash[path20]) {
        filePromisesHash[path20] = readFile(path20, "utf8");
      }
      return filePromisesHash[path20];
    };
    exports.slurpFile = slurpFile;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSharedConfigFiles.js
var require_loadSharedConfigFiles = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSharedConfigFiles.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.loadSharedConfigFiles = void 0;
    var getConfigFilepath_1 = require_getConfigFilepath();
    var getCredentialsFilepath_1 = require_getCredentialsFilepath();
    var getProfileData_1 = require_getProfileData();
    var parseIni_1 = require_parseIni();
    var slurpFile_1 = require_slurpFile();
    var swallowError = () => ({});
    var loadSharedConfigFiles = async (init = {}) => {
      const { filepath = (0, getCredentialsFilepath_1.getCredentialsFilepath)(), configFilepath = (0, getConfigFilepath_1.getConfigFilepath)() } = init;
      const parsedFiles = await Promise.all([
        (0, slurpFile_1.slurpFile)(configFilepath).then(parseIni_1.parseIni).then(getProfileData_1.getProfileData).catch(swallowError),
        (0, slurpFile_1.slurpFile)(filepath).then(parseIni_1.parseIni).catch(swallowError)
      ]);
      return {
        configFile: parsedFiles[0],
        credentialsFile: parsedFiles[1]
      };
    };
    exports.loadSharedConfigFiles = loadSharedConfigFiles;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSsoSessionData.js
var require_getSsoSessionData = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSsoSessionData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSsoSessionData = void 0;
    var ssoSessionKeyRegex = /^sso-session\s(["'])?([^\1]+)\1$/;
    var getSsoSessionData = (data2) => Object.entries(data2).filter(([key]) => ssoSessionKeyRegex.test(key)).reduce((acc, [key, value]) => ({ ...acc, [ssoSessionKeyRegex.exec(key)[2]]: value }), {});
    exports.getSsoSessionData = getSsoSessionData;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSsoSessionData.js
var require_loadSsoSessionData = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSsoSessionData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.loadSsoSessionData = void 0;
    var getConfigFilepath_1 = require_getConfigFilepath();
    var getSsoSessionData_1 = require_getSsoSessionData();
    var parseIni_1 = require_parseIni();
    var slurpFile_1 = require_slurpFile();
    var swallowError = () => ({});
    var loadSsoSessionData = async (init = {}) => {
      var _a;
      return (0, slurpFile_1.slurpFile)((_a = init.configFilepath) !== null && _a !== void 0 ? _a : (0, getConfigFilepath_1.getConfigFilepath)()).then(parseIni_1.parseIni).then(getSsoSessionData_1.getSsoSessionData).catch(swallowError);
    };
    exports.loadSsoSessionData = loadSsoSessionData;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseKnownFiles.js
var require_parseKnownFiles = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseKnownFiles.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseKnownFiles = void 0;
    var loadSharedConfigFiles_1 = require_loadSharedConfigFiles();
    var parseKnownFiles = async (init) => {
      const parsedFiles = await (0, loadSharedConfigFiles_1.loadSharedConfigFiles)(init);
      return {
        ...parsedFiles.configFile,
        ...parsedFiles.credentialsFile
      };
    };
    exports.parseKnownFiles = parseKnownFiles;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/types.js
var require_types2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/index.js
var require_dist_cjs15 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_getHomeDir(), exports);
    tslib_1.__exportStar(require_getProfileName(), exports);
    tslib_1.__exportStar(require_getSSOTokenFilepath(), exports);
    tslib_1.__exportStar(require_getSSOTokenFromFile(), exports);
    tslib_1.__exportStar(require_loadSharedConfigFiles(), exports);
    tslib_1.__exportStar(require_loadSsoSessionData(), exports);
    tslib_1.__exportStar(require_parseKnownFiles(), exports);
    tslib_1.__exportStar(require_types2(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/httpRequest.js
var require_httpRequest2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/httpRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.httpRequest = void 0;
    var property_provider_1 = require_dist_cjs13();
    var buffer_1 = __require("buffer");
    var http_1 = __require("http");
    function httpRequest(options) {
      return new Promise((resolve, reject) => {
        var _a;
        const req = (0, http_1.request)({
          method: "GET",
          ...options,
          hostname: (_a = options.hostname) === null || _a === void 0 ? void 0 : _a.replace(/^\[(.+)\]$/, "$1")
        });
        req.on("error", (err) => {
          reject(Object.assign(new property_provider_1.ProviderError("Unable to connect to instance metadata service"), err));
          req.destroy();
        });
        req.on("timeout", () => {
          reject(new property_provider_1.ProviderError("TimeoutError from instance metadata service"));
          req.destroy();
        });
        req.on("response", (res) => {
          const { statusCode = 400 } = res;
          if (statusCode < 200 || 300 <= statusCode) {
            reject(Object.assign(new property_provider_1.ProviderError("Error response received from instance metadata service"), { statusCode }));
            req.destroy();
          }
          const chunks = [];
          res.on("data", (chunk) => {
            chunks.push(chunk);
          });
          res.on("end", () => {
            resolve(buffer_1.Buffer.concat(chunks));
            req.destroy();
          });
        });
        req.end();
      });
    }
    exports.httpRequest = httpRequest;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/ImdsCredentials.js
var require_ImdsCredentials = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/ImdsCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromImdsCredentials = exports.isImdsCredentials = void 0;
    var isImdsCredentials = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.AccessKeyId === "string" && typeof arg.SecretAccessKey === "string" && typeof arg.Token === "string" && typeof arg.Expiration === "string";
    exports.isImdsCredentials = isImdsCredentials;
    var fromImdsCredentials = (creds) => ({
      accessKeyId: creds.AccessKeyId,
      secretAccessKey: creds.SecretAccessKey,
      sessionToken: creds.Token,
      expiration: new Date(creds.Expiration)
    });
    exports.fromImdsCredentials = fromImdsCredentials;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/RemoteProviderInit.js
var require_RemoteProviderInit = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/RemoteProviderInit.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.providerConfigFromInit = exports.DEFAULT_MAX_RETRIES = exports.DEFAULT_TIMEOUT = void 0;
    exports.DEFAULT_TIMEOUT = 1e3;
    exports.DEFAULT_MAX_RETRIES = 0;
    var providerConfigFromInit = ({ maxRetries = exports.DEFAULT_MAX_RETRIES, timeout = exports.DEFAULT_TIMEOUT }) => ({ maxRetries, timeout });
    exports.providerConfigFromInit = providerConfigFromInit;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/retry.js
var require_retry2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/retry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.retry = void 0;
    var retry = (toRetry, maxRetries) => {
      let promise = toRetry();
      for (let i = 0; i < maxRetries; i++) {
        promise = promise.catch(toRetry);
      }
      return promise;
    };
    exports.retry = retry;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromContainerMetadata.js
var require_fromContainerMetadata = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromContainerMetadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromContainerMetadata = exports.ENV_CMDS_AUTH_TOKEN = exports.ENV_CMDS_RELATIVE_URI = exports.ENV_CMDS_FULL_URI = void 0;
    var property_provider_1 = require_dist_cjs13();
    var url_1 = __require("url");
    var httpRequest_1 = require_httpRequest2();
    var ImdsCredentials_1 = require_ImdsCredentials();
    var RemoteProviderInit_1 = require_RemoteProviderInit();
    var retry_1 = require_retry2();
    exports.ENV_CMDS_FULL_URI = "AWS_CONTAINER_CREDENTIALS_FULL_URI";
    exports.ENV_CMDS_RELATIVE_URI = "AWS_CONTAINER_CREDENTIALS_RELATIVE_URI";
    exports.ENV_CMDS_AUTH_TOKEN = "AWS_CONTAINER_AUTHORIZATION_TOKEN";
    var fromContainerMetadata = (init = {}) => {
      const { timeout, maxRetries } = (0, RemoteProviderInit_1.providerConfigFromInit)(init);
      return () => (0, retry_1.retry)(async () => {
        const requestOptions = await getCmdsUri();
        const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));
        if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {
          throw new property_provider_1.CredentialsProviderError("Invalid response received from instance metadata service.");
        }
        return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);
      }, maxRetries);
    };
    exports.fromContainerMetadata = fromContainerMetadata;
    var requestFromEcsImds = async (timeout, options) => {
      if (process.env[exports.ENV_CMDS_AUTH_TOKEN]) {
        options.headers = {
          ...options.headers,
          Authorization: process.env[exports.ENV_CMDS_AUTH_TOKEN]
        };
      }
      const buffer = await (0, httpRequest_1.httpRequest)({
        ...options,
        timeout
      });
      return buffer.toString();
    };
    var CMDS_IP = "169.254.170.2";
    var GREENGRASS_HOSTS = {
      localhost: true,
      "127.0.0.1": true
    };
    var GREENGRASS_PROTOCOLS = {
      "http:": true,
      "https:": true
    };
    var getCmdsUri = async () => {
      if (process.env[exports.ENV_CMDS_RELATIVE_URI]) {
        return {
          hostname: CMDS_IP,
          path: process.env[exports.ENV_CMDS_RELATIVE_URI]
        };
      }
      if (process.env[exports.ENV_CMDS_FULL_URI]) {
        const parsed = (0, url_1.parse)(process.env[exports.ENV_CMDS_FULL_URI]);
        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {
          throw new property_provider_1.CredentialsProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, false);
        }
        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {
          throw new property_provider_1.CredentialsProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, false);
        }
        return {
          ...parsed,
          port: parsed.port ? parseInt(parsed.port, 10) : void 0
        };
      }
      throw new property_provider_1.CredentialsProviderError(`The container metadata credential provider cannot be used unless the ${exports.ENV_CMDS_RELATIVE_URI} or ${exports.ENV_CMDS_FULL_URI} environment variable is set`, false);
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-config-provider@3.272.0/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromEnv.js
var require_fromEnv2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-config-provider@3.272.0/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromEnv.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromEnv = void 0;
    var property_provider_1 = require_dist_cjs13();
    var fromEnv = (envVarSelector) => async () => {
      try {
        const config = envVarSelector(process.env);
        if (config === void 0) {
          throw new Error();
        }
        return config;
      } catch (e) {
        throw new property_provider_1.CredentialsProviderError(e.message || `Cannot load config from environment variables with getter: ${envVarSelector}`);
      }
    };
    exports.fromEnv = fromEnv;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-config-provider@3.272.0/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromSharedConfigFiles.js
var require_fromSharedConfigFiles = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-config-provider@3.272.0/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromSharedConfigFiles.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromSharedConfigFiles = void 0;
    var property_provider_1 = require_dist_cjs13();
    var shared_ini_file_loader_1 = require_dist_cjs15();
    var fromSharedConfigFiles = (configSelector, { preferredFile = "config", ...init } = {}) => async () => {
      const profile = (0, shared_ini_file_loader_1.getProfileName)(init);
      const { configFile, credentialsFile } = await (0, shared_ini_file_loader_1.loadSharedConfigFiles)(init);
      const profileFromCredentials = credentialsFile[profile] || {};
      const profileFromConfig = configFile[profile] || {};
      const mergedProfile = preferredFile === "config" ? { ...profileFromCredentials, ...profileFromConfig } : { ...profileFromConfig, ...profileFromCredentials };
      try {
        const configValue = configSelector(mergedProfile);
        if (configValue === void 0) {
          throw new Error();
        }
        return configValue;
      } catch (e) {
        throw new property_provider_1.CredentialsProviderError(e.message || `Cannot load config for profile ${profile} in SDK configuration files with getter: ${configSelector}`);
      }
    };
    exports.fromSharedConfigFiles = fromSharedConfigFiles;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-config-provider@3.272.0/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromStatic.js
var require_fromStatic2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-config-provider@3.272.0/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromStatic.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromStatic = void 0;
    var property_provider_1 = require_dist_cjs13();
    var isFunction = (func) => typeof func === "function";
    var fromStatic = (defaultValue) => isFunction(defaultValue) ? async () => await defaultValue() : (0, property_provider_1.fromStatic)(defaultValue);
    exports.fromStatic = fromStatic;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-config-provider@3.272.0/node_modules/@aws-sdk/node-config-provider/dist-cjs/configLoader.js
var require_configLoader = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-config-provider@3.272.0/node_modules/@aws-sdk/node-config-provider/dist-cjs/configLoader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.loadConfig = void 0;
    var property_provider_1 = require_dist_cjs13();
    var fromEnv_1 = require_fromEnv2();
    var fromSharedConfigFiles_1 = require_fromSharedConfigFiles();
    var fromStatic_1 = require_fromStatic2();
    var loadConfig = ({ environmentVariableSelector, configFileSelector, default: defaultValue }, configuration = {}) => (0, property_provider_1.memoize)((0, property_provider_1.chain)((0, fromEnv_1.fromEnv)(environmentVariableSelector), (0, fromSharedConfigFiles_1.fromSharedConfigFiles)(configFileSelector, configuration), (0, fromStatic_1.fromStatic)(defaultValue)));
    exports.loadConfig = loadConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-config-provider@3.272.0/node_modules/@aws-sdk/node-config-provider/dist-cjs/index.js
var require_dist_cjs16 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-config-provider@3.272.0/node_modules/@aws-sdk/node-config-provider/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_configLoader(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/Endpoint.js
var require_Endpoint = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/Endpoint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Endpoint = void 0;
    var Endpoint;
    (function(Endpoint2) {
      Endpoint2["IPv4"] = "http://169.254.169.254";
      Endpoint2["IPv6"] = "http://[fd00:ec2::254]";
    })(Endpoint = exports.Endpoint || (exports.Endpoint = {}));
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointConfigOptions.js
var require_EndpointConfigOptions = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointConfigOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ENDPOINT_CONFIG_OPTIONS = exports.CONFIG_ENDPOINT_NAME = exports.ENV_ENDPOINT_NAME = void 0;
    exports.ENV_ENDPOINT_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT";
    exports.CONFIG_ENDPOINT_NAME = "ec2_metadata_service_endpoint";
    exports.ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.ENV_ENDPOINT_NAME],
      configFileSelector: (profile) => profile[exports.CONFIG_ENDPOINT_NAME],
      default: void 0
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointMode.js
var require_EndpointMode = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointMode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EndpointMode = void 0;
    var EndpointMode;
    (function(EndpointMode2) {
      EndpointMode2["IPv4"] = "IPv4";
      EndpointMode2["IPv6"] = "IPv6";
    })(EndpointMode = exports.EndpointMode || (exports.EndpointMode = {}));
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointModeConfigOptions.js
var require_EndpointModeConfigOptions = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointModeConfigOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ENDPOINT_MODE_CONFIG_OPTIONS = exports.CONFIG_ENDPOINT_MODE_NAME = exports.ENV_ENDPOINT_MODE_NAME = void 0;
    var EndpointMode_1 = require_EndpointMode();
    exports.ENV_ENDPOINT_MODE_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE";
    exports.CONFIG_ENDPOINT_MODE_NAME = "ec2_metadata_service_endpoint_mode";
    exports.ENDPOINT_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.ENV_ENDPOINT_MODE_NAME],
      configFileSelector: (profile) => profile[exports.CONFIG_ENDPOINT_MODE_NAME],
      default: EndpointMode_1.EndpointMode.IPv4
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getInstanceMetadataEndpoint.js
var require_getInstanceMetadataEndpoint = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getInstanceMetadataEndpoint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getInstanceMetadataEndpoint = void 0;
    var node_config_provider_1 = require_dist_cjs16();
    var url_parser_1 = require_dist_cjs3();
    var Endpoint_1 = require_Endpoint();
    var EndpointConfigOptions_1 = require_EndpointConfigOptions();
    var EndpointMode_1 = require_EndpointMode();
    var EndpointModeConfigOptions_1 = require_EndpointModeConfigOptions();
    var getInstanceMetadataEndpoint = async () => (0, url_parser_1.parseUrl)(await getFromEndpointConfig() || await getFromEndpointModeConfig());
    exports.getInstanceMetadataEndpoint = getInstanceMetadataEndpoint;
    var getFromEndpointConfig = async () => (0, node_config_provider_1.loadConfig)(EndpointConfigOptions_1.ENDPOINT_CONFIG_OPTIONS)();
    var getFromEndpointModeConfig = async () => {
      const endpointMode = await (0, node_config_provider_1.loadConfig)(EndpointModeConfigOptions_1.ENDPOINT_MODE_CONFIG_OPTIONS)();
      switch (endpointMode) {
        case EndpointMode_1.EndpointMode.IPv4:
          return Endpoint_1.Endpoint.IPv4;
        case EndpointMode_1.EndpointMode.IPv6:
          return Endpoint_1.Endpoint.IPv6;
        default:
          throw new Error(`Unsupported endpoint mode: ${endpointMode}. Select from ${Object.values(EndpointMode_1.EndpointMode)}`);
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getExtendedInstanceMetadataCredentials.js
var require_getExtendedInstanceMetadataCredentials = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getExtendedInstanceMetadataCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getExtendedInstanceMetadataCredentials = void 0;
    var STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 5 * 60;
    var STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;
    var STATIC_STABILITY_DOC_URL = "https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html";
    var getExtendedInstanceMetadataCredentials = (credentials, logger) => {
      var _a;
      const refreshInterval = STATIC_STABILITY_REFRESH_INTERVAL_SECONDS + Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);
      const newExpiration = new Date(Date.now() + refreshInterval * 1e3);
      logger.warn("Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(newExpiration)}.\nFor more information, please visit: " + STATIC_STABILITY_DOC_URL);
      const originalExpiration = (_a = credentials.originalExpiration) !== null && _a !== void 0 ? _a : credentials.expiration;
      return {
        ...credentials,
        ...originalExpiration ? { originalExpiration } : {},
        expiration: newExpiration
      };
    };
    exports.getExtendedInstanceMetadataCredentials = getExtendedInstanceMetadataCredentials;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/staticStabilityProvider.js
var require_staticStabilityProvider = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/staticStabilityProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.staticStabilityProvider = void 0;
    var getExtendedInstanceMetadataCredentials_1 = require_getExtendedInstanceMetadataCredentials();
    var staticStabilityProvider = (provider, options = {}) => {
      const logger = (options === null || options === void 0 ? void 0 : options.logger) || console;
      let pastCredentials;
      return async () => {
        let credentials;
        try {
          credentials = await provider();
          if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {
            credentials = (0, getExtendedInstanceMetadataCredentials_1.getExtendedInstanceMetadataCredentials)(credentials, logger);
          }
        } catch (e) {
          if (pastCredentials) {
            logger.warn("Credential renew failed: ", e);
            credentials = (0, getExtendedInstanceMetadataCredentials_1.getExtendedInstanceMetadataCredentials)(pastCredentials, logger);
          } else {
            throw e;
          }
        }
        pastCredentials = credentials;
        return credentials;
      };
    };
    exports.staticStabilityProvider = staticStabilityProvider;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromInstanceMetadata.js
var require_fromInstanceMetadata = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromInstanceMetadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromInstanceMetadata = void 0;
    var property_provider_1 = require_dist_cjs13();
    var httpRequest_1 = require_httpRequest2();
    var ImdsCredentials_1 = require_ImdsCredentials();
    var RemoteProviderInit_1 = require_RemoteProviderInit();
    var retry_1 = require_retry2();
    var getInstanceMetadataEndpoint_1 = require_getInstanceMetadataEndpoint();
    var staticStabilityProvider_1 = require_staticStabilityProvider();
    var IMDS_PATH = "/latest/meta-data/iam/security-credentials/";
    var IMDS_TOKEN_PATH = "/latest/api/token";
    var fromInstanceMetadata = (init = {}) => (0, staticStabilityProvider_1.staticStabilityProvider)(getInstanceImdsProvider(init), { logger: init.logger });
    exports.fromInstanceMetadata = fromInstanceMetadata;
    var getInstanceImdsProvider = (init) => {
      let disableFetchToken = false;
      const { timeout, maxRetries } = (0, RemoteProviderInit_1.providerConfigFromInit)(init);
      const getCredentials = async (maxRetries2, options) => {
        const profile = (await (0, retry_1.retry)(async () => {
          let profile2;
          try {
            profile2 = await getProfile(options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return profile2;
        }, maxRetries2)).trim();
        return (0, retry_1.retry)(async () => {
          let creds;
          try {
            creds = await getCredentialsFromProfile(profile, options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return creds;
        }, maxRetries2);
      };
      return async () => {
        const endpoint = await (0, getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint)();
        if (disableFetchToken) {
          return getCredentials(maxRetries, { ...endpoint, timeout });
        } else {
          let token;
          try {
            token = (await getMetadataToken({ ...endpoint, timeout })).toString();
          } catch (error2) {
            if ((error2 === null || error2 === void 0 ? void 0 : error2.statusCode) === 400) {
              throw Object.assign(error2, {
                message: "EC2 Metadata token request returned error"
              });
            } else if (error2.message === "TimeoutError" || [403, 404, 405].includes(error2.statusCode)) {
              disableFetchToken = true;
            }
            return getCredentials(maxRetries, { ...endpoint, timeout });
          }
          return getCredentials(maxRetries, {
            ...endpoint,
            headers: {
              "x-aws-ec2-metadata-token": token
            },
            timeout
          });
        }
      };
    };
    var getMetadataToken = async (options) => (0, httpRequest_1.httpRequest)({
      ...options,
      path: IMDS_TOKEN_PATH,
      method: "PUT",
      headers: {
        "x-aws-ec2-metadata-token-ttl-seconds": "21600"
      }
    });
    var getProfile = async (options) => (await (0, httpRequest_1.httpRequest)({ ...options, path: IMDS_PATH })).toString();
    var getCredentialsFromProfile = async (profile, options) => {
      const credsResponse = JSON.parse((await (0, httpRequest_1.httpRequest)({
        ...options,
        path: IMDS_PATH + profile
      })).toString());
      if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {
        throw new property_provider_1.CredentialsProviderError("Invalid response received from instance metadata service.");
      }
      return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/types.js
var require_types3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/index.js
var require_dist_cjs17 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getInstanceMetadataEndpoint = exports.httpRequest = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromContainerMetadata(), exports);
    tslib_1.__exportStar(require_fromInstanceMetadata(), exports);
    tslib_1.__exportStar(require_RemoteProviderInit(), exports);
    tslib_1.__exportStar(require_types3(), exports);
    var httpRequest_1 = require_httpRequest2();
    Object.defineProperty(exports, "httpRequest", { enumerable: true, get: function() {
      return httpRequest_1.httpRequest;
    } });
    var getInstanceMetadataEndpoint_1 = require_getInstanceMetadataEndpoint();
    Object.defineProperty(exports, "getInstanceMetadataEndpoint", { enumerable: true, get: function() {
      return getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint;
    } });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.279.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveCredentialSource.js
var require_resolveCredentialSource = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.279.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveCredentialSource.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveCredentialSource = void 0;
    var credential_provider_env_1 = require_dist_cjs14();
    var credential_provider_imds_1 = require_dist_cjs17();
    var property_provider_1 = require_dist_cjs13();
    var resolveCredentialSource = (credentialSource, profileName) => {
      const sourceProvidersMap = {
        EcsContainer: credential_provider_imds_1.fromContainerMetadata,
        Ec2InstanceMetadata: credential_provider_imds_1.fromInstanceMetadata,
        Environment: credential_provider_env_1.fromEnv
      };
      if (credentialSource in sourceProvidersMap) {
        return sourceProvidersMap[credentialSource]();
      } else {
        throw new property_provider_1.CredentialsProviderError(`Unsupported credential source in profile ${profileName}. Got ${credentialSource}, expected EcsContainer or Ec2InstanceMetadata or Environment.`);
      }
    };
    exports.resolveCredentialSource = resolveCredentialSource;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.279.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveAssumeRoleCredentials.js
var require_resolveAssumeRoleCredentials = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.279.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveAssumeRoleCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveAssumeRoleCredentials = exports.isAssumeRoleProfile = void 0;
    var property_provider_1 = require_dist_cjs13();
    var shared_ini_file_loader_1 = require_dist_cjs15();
    var resolveCredentialSource_1 = require_resolveCredentialSource();
    var resolveProfileData_1 = require_resolveProfileData();
    var isAssumeRoleProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1 && ["undefined", "string"].indexOf(typeof arg.external_id) > -1 && ["undefined", "string"].indexOf(typeof arg.mfa_serial) > -1 && (isAssumeRoleWithSourceProfile(arg) || isAssumeRoleWithProviderProfile(arg));
    exports.isAssumeRoleProfile = isAssumeRoleProfile;
    var isAssumeRoleWithSourceProfile = (arg) => typeof arg.source_profile === "string" && typeof arg.credential_source === "undefined";
    var isAssumeRoleWithProviderProfile = (arg) => typeof arg.credential_source === "string" && typeof arg.source_profile === "undefined";
    var resolveAssumeRoleCredentials = async (profileName, profiles, options, visitedProfiles = {}) => {
      const data2 = profiles[profileName];
      if (!options.roleAssumer) {
        throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} requires a role to be assumed, but no role assumption callback was provided.`, false);
      }
      const { source_profile } = data2;
      if (source_profile && source_profile in visitedProfiles) {
        throw new property_provider_1.CredentialsProviderError(`Detected a cycle attempting to resolve credentials for profile ${(0, shared_ini_file_loader_1.getProfileName)(options)}. Profiles visited: ` + Object.keys(visitedProfiles).join(", "), false);
      }
      const sourceCredsProvider = source_profile ? (0, resolveProfileData_1.resolveProfileData)(source_profile, profiles, options, {
        ...visitedProfiles,
        [source_profile]: true
      }) : (0, resolveCredentialSource_1.resolveCredentialSource)(data2.credential_source, profileName)();
      const params = {
        RoleArn: data2.role_arn,
        RoleSessionName: data2.role_session_name || `aws-sdk-js-${Date.now()}`,
        ExternalId: data2.external_id
      };
      const { mfa_serial } = data2;
      if (mfa_serial) {
        if (!options.mfaCodeProvider) {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`, false);
        }
        params.SerialNumber = mfa_serial;
        params.TokenCode = await options.mfaCodeProvider(mfa_serial);
      }
      const sourceCreds = await sourceCredsProvider;
      return options.roleAssumer(sourceCreds, params);
    };
    exports.resolveAssumeRoleCredentials = resolveAssumeRoleCredentials;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.272.0/node_modules/@aws-sdk/credential-provider-process/dist-cjs/getValidatedProcessCredentials.js
var require_getValidatedProcessCredentials = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.272.0/node_modules/@aws-sdk/credential-provider-process/dist-cjs/getValidatedProcessCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getValidatedProcessCredentials = void 0;
    var getValidatedProcessCredentials = (profileName, data2) => {
      if (data2.Version !== 1) {
        throw Error(`Profile ${profileName} credential_process did not return Version 1.`);
      }
      if (data2.AccessKeyId === void 0 || data2.SecretAccessKey === void 0) {
        throw Error(`Profile ${profileName} credential_process returned invalid credentials.`);
      }
      if (data2.Expiration) {
        const currentTime = new Date();
        const expireTime = new Date(data2.Expiration);
        if (expireTime < currentTime) {
          throw Error(`Profile ${profileName} credential_process returned expired credentials.`);
        }
      }
      return {
        accessKeyId: data2.AccessKeyId,
        secretAccessKey: data2.SecretAccessKey,
        ...data2.SessionToken && { sessionToken: data2.SessionToken },
        ...data2.Expiration && { expiration: new Date(data2.Expiration) }
      };
    };
    exports.getValidatedProcessCredentials = getValidatedProcessCredentials;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.272.0/node_modules/@aws-sdk/credential-provider-process/dist-cjs/resolveProcessCredentials.js
var require_resolveProcessCredentials = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.272.0/node_modules/@aws-sdk/credential-provider-process/dist-cjs/resolveProcessCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveProcessCredentials = void 0;
    var property_provider_1 = require_dist_cjs13();
    var child_process_1 = __require("child_process");
    var util_1 = __require("util");
    var getValidatedProcessCredentials_1 = require_getValidatedProcessCredentials();
    var resolveProcessCredentials = async (profileName, profiles) => {
      const profile = profiles[profileName];
      if (profiles[profileName]) {
        const credentialProcess = profile["credential_process"];
        if (credentialProcess !== void 0) {
          const execPromise = (0, util_1.promisify)(child_process_1.exec);
          try {
            const { stdout } = await execPromise(credentialProcess);
            let data2;
            try {
              data2 = JSON.parse(stdout.trim());
            } catch (_a) {
              throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);
            }
            return (0, getValidatedProcessCredentials_1.getValidatedProcessCredentials)(profileName, data2);
          } catch (error2) {
            throw new property_provider_1.CredentialsProviderError(error2.message);
          }
        } else {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} did not contain credential_process.`);
        }
      } else {
        throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} could not be found in shared credentials file.`);
      }
    };
    exports.resolveProcessCredentials = resolveProcessCredentials;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.272.0/node_modules/@aws-sdk/credential-provider-process/dist-cjs/fromProcess.js
var require_fromProcess = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.272.0/node_modules/@aws-sdk/credential-provider-process/dist-cjs/fromProcess.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromProcess = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs15();
    var resolveProcessCredentials_1 = require_resolveProcessCredentials();
    var fromProcess = (init = {}) => async () => {
      const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
      return (0, resolveProcessCredentials_1.resolveProcessCredentials)((0, shared_ini_file_loader_1.getProfileName)(init), profiles);
    };
    exports.fromProcess = fromProcess;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.272.0/node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js
var require_dist_cjs18 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.272.0/node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromProcess(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.279.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProcessCredentials.js
var require_resolveProcessCredentials2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.279.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProcessCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveProcessCredentials = exports.isProcessProfile = void 0;
    var credential_provider_process_1 = require_dist_cjs18();
    var isProcessProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.credential_process === "string";
    exports.isProcessProfile = isProcessProfile;
    var resolveProcessCredentials = async (options, profile) => (0, credential_provider_process_1.fromProcess)({
      ...options,
      profile
    })();
    exports.resolveProcessCredentials = resolveProcessCredentials;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.279.0/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/isSsoProfile.js
var require_isSsoProfile = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.279.0/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/isSsoProfile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isSsoProfile = void 0;
    var isSsoProfile = (arg) => arg && (typeof arg.sso_start_url === "string" || typeof arg.sso_account_id === "string" || typeof arg.sso_session === "string" || typeof arg.sso_region === "string" || typeof arg.sso_role_name === "string");
    exports.isSsoProfile = isSsoProfile;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/models/SSOServiceException.js
var require_SSOServiceException = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/models/SSOServiceException.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOServiceException = void 0;
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var SSOServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, SSOServiceException.prototype);
      }
    };
    exports.SSOServiceException = SSOServiceException;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/models/models_0.js
var require_models_02 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/models/models_0.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LogoutRequestFilterSensitiveLog = exports.ListAccountsResponseFilterSensitiveLog = exports.ListAccountsRequestFilterSensitiveLog = exports.ListAccountRolesResponseFilterSensitiveLog = exports.RoleInfoFilterSensitiveLog = exports.ListAccountRolesRequestFilterSensitiveLog = exports.GetRoleCredentialsResponseFilterSensitiveLog = exports.RoleCredentialsFilterSensitiveLog = exports.GetRoleCredentialsRequestFilterSensitiveLog = exports.AccountInfoFilterSensitiveLog = exports.UnauthorizedException = exports.TooManyRequestsException = exports.ResourceNotFoundException = exports.InvalidRequestException = void 0;
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var SSOServiceException_1 = require_SSOServiceException();
    var InvalidRequestException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "InvalidRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
      }
    };
    exports.InvalidRequestException = InvalidRequestException;
    var ResourceNotFoundException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "ResourceNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
      }
    };
    exports.ResourceNotFoundException = ResourceNotFoundException;
    var TooManyRequestsException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "TooManyRequestsException",
          $fault: "client",
          ...opts
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
      }
    };
    exports.TooManyRequestsException = TooManyRequestsException;
    var UnauthorizedException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "UnauthorizedException",
          $fault: "client",
          ...opts
        });
        this.name = "UnauthorizedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnauthorizedException.prototype);
      }
    };
    exports.UnauthorizedException = UnauthorizedException;
    var AccountInfoFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AccountInfoFilterSensitiveLog = AccountInfoFilterSensitiveLog;
    var GetRoleCredentialsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.GetRoleCredentialsRequestFilterSensitiveLog = GetRoleCredentialsRequestFilterSensitiveLog;
    var RoleCredentialsFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.secretAccessKey && { secretAccessKey: smithy_client_1.SENSITIVE_STRING },
      ...obj.sessionToken && { sessionToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.RoleCredentialsFilterSensitiveLog = RoleCredentialsFilterSensitiveLog;
    var GetRoleCredentialsResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.roleCredentials && { roleCredentials: (0, exports.RoleCredentialsFilterSensitiveLog)(obj.roleCredentials) }
    });
    exports.GetRoleCredentialsResponseFilterSensitiveLog = GetRoleCredentialsResponseFilterSensitiveLog;
    var ListAccountRolesRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListAccountRolesRequestFilterSensitiveLog = ListAccountRolesRequestFilterSensitiveLog;
    var RoleInfoFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RoleInfoFilterSensitiveLog = RoleInfoFilterSensitiveLog;
    var ListAccountRolesResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListAccountRolesResponseFilterSensitiveLog = ListAccountRolesResponseFilterSensitiveLog;
    var ListAccountsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListAccountsRequestFilterSensitiveLog = ListAccountsRequestFilterSensitiveLog;
    var ListAccountsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListAccountsResponseFilterSensitiveLog = ListAccountsResponseFilterSensitiveLog;
    var LogoutRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.LogoutRequestFilterSensitiveLog = LogoutRequestFilterSensitiveLog;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/protocols/Aws_restJson1.js
var require_Aws_restJson1 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/protocols/Aws_restJson1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deserializeAws_restJson1LogoutCommand = exports.deserializeAws_restJson1ListAccountsCommand = exports.deserializeAws_restJson1ListAccountRolesCommand = exports.deserializeAws_restJson1GetRoleCredentialsCommand = exports.serializeAws_restJson1LogoutCommand = exports.serializeAws_restJson1ListAccountsCommand = exports.serializeAws_restJson1ListAccountRolesCommand = exports.serializeAws_restJson1GetRoleCredentialsCommand = void 0;
    var protocol_http_1 = require_dist_cjs7();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_02();
    var SSOServiceException_1 = require_SSOServiceException();
    var serializeAws_restJson1GetRoleCredentialsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map3({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/federation/credentials`;
      const query = map3({
        role_name: [, (0, smithy_client_1.expectNonNull)(input.roleName, `roleName`)],
        account_id: [, (0, smithy_client_1.expectNonNull)(input.accountId, `accountId`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1GetRoleCredentialsCommand = serializeAws_restJson1GetRoleCredentialsCommand;
    var serializeAws_restJson1ListAccountRolesCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map3({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/assignment/roles`;
      const query = map3({
        next_token: [, input.nextToken],
        max_result: [() => input.maxResults !== void 0, () => input.maxResults.toString()],
        account_id: [, (0, smithy_client_1.expectNonNull)(input.accountId, `accountId`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1ListAccountRolesCommand = serializeAws_restJson1ListAccountRolesCommand;
    var serializeAws_restJson1ListAccountsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map3({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/assignment/accounts`;
      const query = map3({
        next_token: [, input.nextToken],
        max_result: [() => input.maxResults !== void 0, () => input.maxResults.toString()]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1ListAccountsCommand = serializeAws_restJson1ListAccountsCommand;
    var serializeAws_restJson1LogoutCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map3({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/logout`;
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1LogoutCommand = serializeAws_restJson1LogoutCommand;
    var deserializeAws_restJson1GetRoleCredentialsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetRoleCredentialsCommandError(output, context);
      }
      const contents = map3({
        $metadata: deserializeMetadata(output)
      });
      const data2 = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data2.roleCredentials != null) {
        contents.roleCredentials = deserializeAws_restJson1RoleCredentials(data2.roleCredentials, context);
      }
      return contents;
    };
    exports.deserializeAws_restJson1GetRoleCredentialsCommand = deserializeAws_restJson1GetRoleCredentialsCommand;
    var deserializeAws_restJson1GetRoleCredentialsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOServiceException_1.SSOServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1ListAccountRolesCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListAccountRolesCommandError(output, context);
      }
      const contents = map3({
        $metadata: deserializeMetadata(output)
      });
      const data2 = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data2.nextToken != null) {
        contents.nextToken = (0, smithy_client_1.expectString)(data2.nextToken);
      }
      if (data2.roleList != null) {
        contents.roleList = deserializeAws_restJson1RoleListType(data2.roleList, context);
      }
      return contents;
    };
    exports.deserializeAws_restJson1ListAccountRolesCommand = deserializeAws_restJson1ListAccountRolesCommand;
    var deserializeAws_restJson1ListAccountRolesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOServiceException_1.SSOServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1ListAccountsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListAccountsCommandError(output, context);
      }
      const contents = map3({
        $metadata: deserializeMetadata(output)
      });
      const data2 = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data2.accountList != null) {
        contents.accountList = deserializeAws_restJson1AccountListType(data2.accountList, context);
      }
      if (data2.nextToken != null) {
        contents.nextToken = (0, smithy_client_1.expectString)(data2.nextToken);
      }
      return contents;
    };
    exports.deserializeAws_restJson1ListAccountsCommand = deserializeAws_restJson1ListAccountsCommand;
    var deserializeAws_restJson1ListAccountsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOServiceException_1.SSOServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1LogoutCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1LogoutCommandError(output, context);
      }
      const contents = map3({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports.deserializeAws_restJson1LogoutCommand = deserializeAws_restJson1LogoutCommand;
    var deserializeAws_restJson1LogoutCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOServiceException_1.SSOServiceException,
            errorCode
          });
      }
    };
    var map3 = smithy_client_1.map;
    var deserializeAws_restJson1InvalidRequestExceptionResponse = async (parsedOutput, context) => {
      const contents = map3({});
      const data2 = parsedOutput.body;
      if (data2.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data2.message);
      }
      const exception = new models_0_1.InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1ResourceNotFoundExceptionResponse = async (parsedOutput, context) => {
      const contents = map3({});
      const data2 = parsedOutput.body;
      if (data2.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data2.message);
      }
      const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1TooManyRequestsExceptionResponse = async (parsedOutput, context) => {
      const contents = map3({});
      const data2 = parsedOutput.body;
      if (data2.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data2.message);
      }
      const exception = new models_0_1.TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1UnauthorizedExceptionResponse = async (parsedOutput, context) => {
      const contents = map3({});
      const data2 = parsedOutput.body;
      if (data2.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data2.message);
      }
      const exception = new models_0_1.UnauthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1AccountInfo = (output, context) => {
      return {
        accountId: (0, smithy_client_1.expectString)(output.accountId),
        accountName: (0, smithy_client_1.expectString)(output.accountName),
        emailAddress: (0, smithy_client_1.expectString)(output.emailAddress)
      };
    };
    var deserializeAws_restJson1AccountListType = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1AccountInfo(entry, context);
      });
      return retVal;
    };
    var deserializeAws_restJson1RoleCredentials = (output, context) => {
      return {
        accessKeyId: (0, smithy_client_1.expectString)(output.accessKeyId),
        expiration: (0, smithy_client_1.expectLong)(output.expiration),
        secretAccessKey: (0, smithy_client_1.expectString)(output.secretAccessKey),
        sessionToken: (0, smithy_client_1.expectString)(output.sessionToken)
      };
    };
    var deserializeAws_restJson1RoleInfo = (output, context) => {
      return {
        accountId: (0, smithy_client_1.expectString)(output.accountId),
        roleName: (0, smithy_client_1.expectString)(output.roleName)
      };
    };
    var deserializeAws_restJson1RoleListType = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1RoleInfo(entry, context);
      });
      return retVal;
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    var isSerializableHeaderValue = (value) => value !== void 0 && value !== null && value !== "" && (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        return JSON.parse(encoded);
      }
      return {};
    });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      value.message = value.message ?? value.Message;
      return value;
    };
    var loadRestJsonErrorCode = (output, data2) => {
      const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
          cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data2.code !== void 0) {
        return sanitizeErrorCode(data2.code);
      }
      if (data2["__type"] !== void 0) {
        return sanitizeErrorCode(data2["__type"]);
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/commands/GetRoleCredentialsCommand.js
var require_GetRoleCredentialsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/commands/GetRoleCredentialsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetRoleCredentialsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_02();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var GetRoleCredentialsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetRoleCredentialsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "GetRoleCredentialsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetRoleCredentialsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetRoleCredentialsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetRoleCredentialsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetRoleCredentialsCommand)(output, context);
      }
    };
    exports.GetRoleCredentialsCommand = GetRoleCredentialsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountRolesCommand.js
var require_ListAccountRolesCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountRolesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAccountRolesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_02();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListAccountRolesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListAccountRolesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "ListAccountRolesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAccountRolesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListAccountRolesResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListAccountRolesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListAccountRolesCommand)(output, context);
      }
    };
    exports.ListAccountRolesCommand = ListAccountRolesCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountsCommand.js
var require_ListAccountsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAccountsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_02();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListAccountsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListAccountsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "ListAccountsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAccountsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListAccountsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListAccountsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListAccountsCommand)(output, context);
      }
    };
    exports.ListAccountsCommand = ListAccountsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/commands/LogoutCommand.js
var require_LogoutCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/commands/LogoutCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LogoutCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_02();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var LogoutCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, LogoutCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "LogoutCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.LogoutRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1LogoutCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1LogoutCommand)(output, context);
      }
    };
    exports.LogoutCommand = LogoutCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/EndpointParameters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "awsssoportal"
      };
    };
    exports.resolveClientEndpointParameters = resolveClientEndpointParameters;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/package.json
var require_package2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/package.json"(exports, module) {
    module.exports = {
      name: "@aws-sdk/client-sso",
      description: "AWS SDK for JavaScript Sso Client for Node.js, Browser and React Native",
      version: "3.279.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sso"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/config-resolver": "3.272.0",
        "@aws-sdk/fetch-http-handler": "3.272.0",
        "@aws-sdk/hash-node": "3.272.0",
        "@aws-sdk/invalid-dependency": "3.272.0",
        "@aws-sdk/middleware-content-length": "3.272.0",
        "@aws-sdk/middleware-endpoint": "3.272.0",
        "@aws-sdk/middleware-host-header": "3.278.0",
        "@aws-sdk/middleware-logger": "3.272.0",
        "@aws-sdk/middleware-recursion-detection": "3.272.0",
        "@aws-sdk/middleware-retry": "3.272.0",
        "@aws-sdk/middleware-serde": "3.272.0",
        "@aws-sdk/middleware-stack": "3.272.0",
        "@aws-sdk/middleware-user-agent": "3.272.0",
        "@aws-sdk/node-config-provider": "3.272.0",
        "@aws-sdk/node-http-handler": "3.272.0",
        "@aws-sdk/protocol-http": "3.272.0",
        "@aws-sdk/smithy-client": "3.279.0",
        "@aws-sdk/types": "3.272.0",
        "@aws-sdk/url-parser": "3.272.0",
        "@aws-sdk/util-base64": "3.208.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.208.0",
        "@aws-sdk/util-defaults-mode-browser": "3.279.0",
        "@aws-sdk/util-defaults-mode-node": "3.279.0",
        "@aws-sdk/util-endpoints": "3.272.0",
        "@aws-sdk/util-retry": "3.272.0",
        "@aws-sdk/util-user-agent-browser": "3.272.0",
        "@aws-sdk/util-user-agent-node": "3.272.0",
        "@aws-sdk/util-utf8": "3.254.0",
        tslib: "^2.3.1"
      },
      devDependencies: {
        "@aws-sdk/service-client-documentation-generator": "3.208.0",
        "@tsconfig/node14": "1.0.3",
        "@types/node": "^14.14.31",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.19.2",
        typescript: "~4.6.2"
      },
      overrides: {
        typedoc: {
          typescript: "~4.6.2"
        }
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sso"
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+is-array-buffer@3.201.0/node_modules/@aws-sdk/is-array-buffer/dist-cjs/index.js
var require_dist_cjs19 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+is-array-buffer@3.201.0/node_modules/@aws-sdk/is-array-buffer/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isArrayBuffer = void 0;
    var isArrayBuffer = (arg) => typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]";
    exports.isArrayBuffer = isArrayBuffer;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-buffer-from@3.208.0/node_modules/@aws-sdk/util-buffer-from/dist-cjs/index.js
var require_dist_cjs20 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-buffer-from@3.208.0/node_modules/@aws-sdk/util-buffer-from/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromString = exports.fromArrayBuffer = void 0;
    var is_array_buffer_1 = require_dist_cjs19();
    var buffer_1 = __require("buffer");
    var fromArrayBuffer = (input, offset = 0, length = input.byteLength - offset) => {
      if (!(0, is_array_buffer_1.isArrayBuffer)(input)) {
        throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
      }
      return buffer_1.Buffer.from(input, offset, length);
    };
    exports.fromArrayBuffer = fromArrayBuffer;
    var fromString = (input, encoding) => {
      if (typeof input !== "string") {
        throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
      }
      return encoding ? buffer_1.Buffer.from(input, encoding) : buffer_1.Buffer.from(input);
    };
    exports.fromString = fromString;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-utf8@3.254.0/node_modules/@aws-sdk/util-utf8/dist-cjs/fromUtf8.js
var require_fromUtf8 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-utf8@3.254.0/node_modules/@aws-sdk/util-utf8/dist-cjs/fromUtf8.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromUtf8 = void 0;
    var util_buffer_from_1 = require_dist_cjs20();
    var fromUtf8 = (input) => {
      const buf = (0, util_buffer_from_1.fromString)(input, "utf8");
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    };
    exports.fromUtf8 = fromUtf8;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-utf8@3.254.0/node_modules/@aws-sdk/util-utf8/dist-cjs/toUint8Array.js
var require_toUint8Array = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-utf8@3.254.0/node_modules/@aws-sdk/util-utf8/dist-cjs/toUint8Array.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toUint8Array = void 0;
    var fromUtf8_1 = require_fromUtf8();
    var toUint8Array = (data2) => {
      if (typeof data2 === "string") {
        return (0, fromUtf8_1.fromUtf8)(data2);
      }
      if (ArrayBuffer.isView(data2)) {
        return new Uint8Array(data2.buffer, data2.byteOffset, data2.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data2);
    };
    exports.toUint8Array = toUint8Array;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-utf8@3.254.0/node_modules/@aws-sdk/util-utf8/dist-cjs/toUtf8.js
var require_toUtf8 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-utf8@3.254.0/node_modules/@aws-sdk/util-utf8/dist-cjs/toUtf8.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toUtf8 = void 0;
    var util_buffer_from_1 = require_dist_cjs20();
    var toUtf8 = (input) => (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("utf8");
    exports.toUtf8 = toUtf8;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-utf8@3.254.0/node_modules/@aws-sdk/util-utf8/dist-cjs/index.js
var require_dist_cjs21 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-utf8@3.254.0/node_modules/@aws-sdk/util-utf8/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromUtf8(), exports);
    tslib_1.__exportStar(require_toUint8Array(), exports);
    tslib_1.__exportStar(require_toUtf8(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+hash-node@3.272.0/node_modules/@aws-sdk/hash-node/dist-cjs/index.js
var require_dist_cjs22 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+hash-node@3.272.0/node_modules/@aws-sdk/hash-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Hash = void 0;
    var util_buffer_from_1 = require_dist_cjs20();
    var util_utf8_1 = require_dist_cjs21();
    var buffer_1 = __require("buffer");
    var crypto_1 = __require("crypto");
    var Hash = class {
      constructor(algorithmIdentifier, secret) {
        this.algorithmIdentifier = algorithmIdentifier;
        this.secret = secret;
        this.reset();
      }
      update(toHash, encoding) {
        this.hash.update((0, util_utf8_1.toUint8Array)(castSourceData(toHash, encoding)));
      }
      digest() {
        return Promise.resolve(this.hash.digest());
      }
      reset() {
        this.hash = this.secret ? (0, crypto_1.createHmac)(this.algorithmIdentifier, castSourceData(this.secret)) : (0, crypto_1.createHash)(this.algorithmIdentifier);
      }
    };
    exports.Hash = Hash;
    function castSourceData(toCast, encoding) {
      if (buffer_1.Buffer.isBuffer(toCast)) {
        return toCast;
      }
      if (typeof toCast === "string") {
        return (0, util_buffer_from_1.fromString)(toCast, encoding);
      }
      if (ArrayBuffer.isView(toCast)) {
        return (0, util_buffer_from_1.fromArrayBuffer)(toCast.buffer, toCast.byteOffset, toCast.byteLength);
      }
      return (0, util_buffer_from_1.fromArrayBuffer)(toCast);
    }
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-uri-escape@3.201.0/node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri.js
var require_escape_uri = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-uri-escape@3.201.0/node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.escapeUri = void 0;
    var escapeUri = (uri) => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
    exports.escapeUri = escapeUri;
    var hexEncode = (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-uri-escape@3.201.0/node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri-path.js
var require_escape_uri_path = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-uri-escape@3.201.0/node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri-path.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.escapeUriPath = void 0;
    var escape_uri_1 = require_escape_uri();
    var escapeUriPath = (uri) => uri.split("/").map(escape_uri_1.escapeUri).join("/");
    exports.escapeUriPath = escapeUriPath;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-uri-escape@3.201.0/node_modules/@aws-sdk/util-uri-escape/dist-cjs/index.js
var require_dist_cjs23 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-uri-escape@3.201.0/node_modules/@aws-sdk/util-uri-escape/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_escape_uri(), exports);
    tslib_1.__exportStar(require_escape_uri_path(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+querystring-builder@3.272.0/node_modules/@aws-sdk/querystring-builder/dist-cjs/index.js
var require_dist_cjs24 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+querystring-builder@3.272.0/node_modules/@aws-sdk/querystring-builder/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.buildQueryString = void 0;
    var util_uri_escape_1 = require_dist_cjs23();
    function buildQueryString(query) {
      const parts = [];
      for (let key of Object.keys(query).sort()) {
        const value = query[key];
        key = (0, util_uri_escape_1.escapeUri)(key);
        if (Array.isArray(value)) {
          for (let i = 0, iLen = value.length; i < iLen; i++) {
            parts.push(`${key}=${(0, util_uri_escape_1.escapeUri)(value[i])}`);
          }
        } else {
          let qsEntry = key;
          if (value || typeof value === "string") {
            qsEntry += `=${(0, util_uri_escape_1.escapeUri)(value)}`;
          }
          parts.push(qsEntry);
        }
      }
      return parts.join("&");
    }
    exports.buildQueryString = buildQueryString;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.272.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/constants.js
var require_constants2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.272.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODEJS_TIMEOUT_ERROR_CODES = void 0;
    exports.NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "EPIPE", "ETIMEDOUT"];
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.272.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/get-transformed-headers.js
var require_get_transformed_headers = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.272.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/get-transformed-headers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getTransformedHeaders = void 0;
    var getTransformedHeaders = (headers) => {
      const transformedHeaders = {};
      for (const name of Object.keys(headers)) {
        const headerValues = headers[name];
        transformedHeaders[name] = Array.isArray(headerValues) ? headerValues.join(",") : headerValues;
      }
      return transformedHeaders;
    };
    exports.getTransformedHeaders = getTransformedHeaders;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.272.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/set-connection-timeout.js
var require_set_connection_timeout = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.272.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/set-connection-timeout.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.setConnectionTimeout = void 0;
    var setConnectionTimeout = (request, reject, timeoutInMs = 0) => {
      if (!timeoutInMs) {
        return;
      }
      request.on("socket", (socket) => {
        if (socket.connecting) {
          const timeoutId = setTimeout(() => {
            request.destroy();
            reject(Object.assign(new Error(`Socket timed out without establishing a connection within ${timeoutInMs} ms`), {
              name: "TimeoutError"
            }));
          }, timeoutInMs);
          socket.on("connect", () => {
            clearTimeout(timeoutId);
          });
        }
      });
    };
    exports.setConnectionTimeout = setConnectionTimeout;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.272.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/set-socket-timeout.js
var require_set_socket_timeout = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.272.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/set-socket-timeout.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.setSocketTimeout = void 0;
    var setSocketTimeout = (request, reject, timeoutInMs = 0) => {
      request.setTimeout(timeoutInMs, () => {
        request.destroy();
        reject(Object.assign(new Error(`Connection timed out after ${timeoutInMs} ms`), { name: "TimeoutError" }));
      });
    };
    exports.setSocketTimeout = setSocketTimeout;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.272.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/write-request-body.js
var require_write_request_body = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.272.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/write-request-body.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.writeRequestBody = void 0;
    var stream_1 = __require("stream");
    function writeRequestBody(httpRequest, request) {
      const expect = request.headers["Expect"] || request.headers["expect"];
      if (expect === "100-continue") {
        httpRequest.on("continue", () => {
          writeBody(httpRequest, request.body);
        });
      } else {
        writeBody(httpRequest, request.body);
      }
    }
    exports.writeRequestBody = writeRequestBody;
    function writeBody(httpRequest, body) {
      if (body instanceof stream_1.Readable) {
        body.pipe(httpRequest);
      } else if (body) {
        httpRequest.end(Buffer.from(body));
      } else {
        httpRequest.end();
      }
    }
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.272.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http-handler.js
var require_node_http_handler = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.272.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http-handler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeHttpHandler = void 0;
    var protocol_http_1 = require_dist_cjs7();
    var querystring_builder_1 = require_dist_cjs24();
    var http_1 = __require("http");
    var https_1 = __require("https");
    var constants_1 = require_constants2();
    var get_transformed_headers_1 = require_get_transformed_headers();
    var set_connection_timeout_1 = require_set_connection_timeout();
    var set_socket_timeout_1 = require_set_socket_timeout();
    var write_request_body_1 = require_write_request_body();
    var NodeHttpHandler = class {
      constructor(options) {
        this.metadata = { handlerProtocol: "http/1.1" };
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === "function") {
            options().then((_options) => {
              resolve(this.resolveDefaultConfig(_options));
            }).catch(reject);
          } else {
            resolve(this.resolveDefaultConfig(options));
          }
        });
      }
      resolveDefaultConfig(options) {
        const { connectionTimeout, socketTimeout, httpAgent, httpsAgent } = options || {};
        const keepAlive = true;
        const maxSockets = 50;
        return {
          connectionTimeout,
          socketTimeout,
          httpAgent: httpAgent || new http_1.Agent({ keepAlive, maxSockets }),
          httpsAgent: httpsAgent || new https_1.Agent({ keepAlive, maxSockets })
        };
      }
      destroy() {
        var _a, _b, _c, _d;
        (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.httpAgent) === null || _b === void 0 ? void 0 : _b.destroy();
        (_d = (_c = this.config) === null || _c === void 0 ? void 0 : _c.httpsAgent) === null || _d === void 0 ? void 0 : _d.destroy();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
        }
        return new Promise((resolve, reject) => {
          if (!this.config) {
            throw new Error("Node HTTP request handler config is not resolved");
          }
          if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            reject(abortError);
            return;
          }
          const isSSL = request.protocol === "https:";
          const queryString = (0, querystring_builder_1.buildQueryString)(request.query || {});
          const nodeHttpsOptions = {
            headers: request.headers,
            host: request.hostname,
            method: request.method,
            path: queryString ? `${request.path}?${queryString}` : request.path,
            port: request.port,
            agent: isSSL ? this.config.httpsAgent : this.config.httpAgent
          };
          const requestFunc = isSSL ? https_1.request : http_1.request;
          const req = requestFunc(nodeHttpsOptions, (res) => {
            const httpResponse = new protocol_http_1.HttpResponse({
              statusCode: res.statusCode || -1,
              headers: (0, get_transformed_headers_1.getTransformedHeaders)(res.headers),
              body: res
            });
            resolve({ response: httpResponse });
          });
          req.on("error", (err) => {
            if (constants_1.NODEJS_TIMEOUT_ERROR_CODES.includes(err.code)) {
              reject(Object.assign(err, { name: "TimeoutError" }));
            } else {
              reject(err);
            }
          });
          (0, set_connection_timeout_1.setConnectionTimeout)(req, reject, this.config.connectionTimeout);
          (0, set_socket_timeout_1.setSocketTimeout)(req, reject, this.config.socketTimeout);
          if (abortSignal) {
            abortSignal.onabort = () => {
              req.abort();
              const abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              reject(abortError);
            };
          }
          (0, write_request_body_1.writeRequestBody)(req, request);
        });
      }
    };
    exports.NodeHttpHandler = NodeHttpHandler;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.272.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http2-handler.js
var require_node_http2_handler = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.272.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http2-handler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeHttp2Handler = void 0;
    var protocol_http_1 = require_dist_cjs7();
    var querystring_builder_1 = require_dist_cjs24();
    var http2_1 = __require("http2");
    var get_transformed_headers_1 = require_get_transformed_headers();
    var write_request_body_1 = require_write_request_body();
    var NodeHttp2Handler = class {
      constructor(options) {
        this.metadata = { handlerProtocol: "h2" };
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === "function") {
            options().then((opts) => {
              resolve(opts || {});
            }).catch(reject);
          } else {
            resolve(options || {});
          }
        });
        this.sessionCache = /* @__PURE__ */ new Map();
      }
      destroy() {
        for (const sessions of this.sessionCache.values()) {
          sessions.forEach((session) => this.destroySession(session));
        }
        this.sessionCache.clear();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
        }
        const { requestTimeout, disableConcurrentStreams } = this.config;
        return new Promise((resolve, rejectOriginal) => {
          let fulfilled = false;
          if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            fulfilled = true;
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            rejectOriginal(abortError);
            return;
          }
          const { hostname, method, port, protocol, path: path20, query } = request;
          const authority = `${protocol}//${hostname}${port ? `:${port}` : ""}`;
          const session = this.getSession(authority, disableConcurrentStreams || false);
          const reject = (err) => {
            if (disableConcurrentStreams) {
              this.destroySession(session);
            }
            fulfilled = true;
            rejectOriginal(err);
          };
          const queryString = (0, querystring_builder_1.buildQueryString)(query || {});
          const req = session.request({
            ...request.headers,
            [http2_1.constants.HTTP2_HEADER_PATH]: queryString ? `${path20}?${queryString}` : path20,
            [http2_1.constants.HTTP2_HEADER_METHOD]: method
          });
          session.ref();
          req.on("response", (headers) => {
            const httpResponse = new protocol_http_1.HttpResponse({
              statusCode: headers[":status"] || -1,
              headers: (0, get_transformed_headers_1.getTransformedHeaders)(headers),
              body: req
            });
            fulfilled = true;
            resolve({ response: httpResponse });
            if (disableConcurrentStreams) {
              session.close();
              this.deleteSessionFromCache(authority, session);
            }
          });
          if (requestTimeout) {
            req.setTimeout(requestTimeout, () => {
              req.close();
              const timeoutError = new Error(`Stream timed out because of no activity for ${requestTimeout} ms`);
              timeoutError.name = "TimeoutError";
              reject(timeoutError);
            });
          }
          if (abortSignal) {
            abortSignal.onabort = () => {
              req.close();
              const abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              reject(abortError);
            };
          }
          req.on("frameError", (type, code, id) => {
            reject(new Error(`Frame type id ${type} in stream id ${id} has failed with code ${code}.`));
          });
          req.on("error", reject);
          req.on("aborted", () => {
            reject(new Error(`HTTP/2 stream is abnormally aborted in mid-communication with result code ${req.rstCode}.`));
          });
          req.on("close", () => {
            session.unref();
            if (disableConcurrentStreams) {
              session.destroy();
            }
            if (!fulfilled) {
              reject(new Error("Unexpected error: http2 request did not get a response"));
            }
          });
          (0, write_request_body_1.writeRequestBody)(req, request);
        });
      }
      getSession(authority, disableConcurrentStreams) {
        var _a;
        const sessionCache = this.sessionCache;
        const existingSessions = sessionCache.get(authority) || [];
        if (existingSessions.length > 0 && !disableConcurrentStreams)
          return existingSessions[0];
        const newSession = (0, http2_1.connect)(authority);
        newSession.unref();
        const destroySessionCb = () => {
          this.destroySession(newSession);
          this.deleteSessionFromCache(authority, newSession);
        };
        newSession.on("goaway", destroySessionCb);
        newSession.on("error", destroySessionCb);
        newSession.on("frameError", destroySessionCb);
        newSession.on("close", () => this.deleteSessionFromCache(authority, newSession));
        if ((_a = this.config) === null || _a === void 0 ? void 0 : _a.sessionTimeout) {
          newSession.setTimeout(this.config.sessionTimeout, destroySessionCb);
        }
        existingSessions.push(newSession);
        sessionCache.set(authority, existingSessions);
        return newSession;
      }
      destroySession(session) {
        if (!session.destroyed) {
          session.destroy();
        }
      }
      deleteSessionFromCache(authority, session) {
        const existingSessions = this.sessionCache.get(authority) || [];
        if (!existingSessions.includes(session)) {
          return;
        }
        this.sessionCache.set(authority, existingSessions.filter((s) => s !== session));
      }
    };
    exports.NodeHttp2Handler = NodeHttp2Handler;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.272.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/collector.js
var require_collector = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.272.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/collector.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Collector = void 0;
    var stream_1 = __require("stream");
    var Collector = class extends stream_1.Writable {
      constructor() {
        super(...arguments);
        this.bufferedBytes = [];
      }
      _write(chunk, encoding, callback) {
        this.bufferedBytes.push(chunk);
        callback();
      }
    };
    exports.Collector = Collector;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.272.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/index.js
var require_stream_collector = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.272.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.streamCollector = void 0;
    var collector_1 = require_collector();
    var streamCollector = (stream) => new Promise((resolve, reject) => {
      const collector = new collector_1.Collector();
      stream.pipe(collector);
      stream.on("error", (err) => {
        collector.end();
        reject(err);
      });
      collector.on("error", reject);
      collector.on("finish", function() {
        const bytes = new Uint8Array(Buffer.concat(this.bufferedBytes));
        resolve(bytes);
      });
    });
    exports.streamCollector = streamCollector;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.272.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/index.js
var require_dist_cjs25 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.272.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_node_http_handler(), exports);
    tslib_1.__exportStar(require_node_http2_handler(), exports);
    tslib_1.__exportStar(require_stream_collector(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-body-length-node@3.208.0/node_modules/@aws-sdk/util-body-length-node/dist-cjs/calculateBodyLength.js
var require_calculateBodyLength = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-body-length-node@3.208.0/node_modules/@aws-sdk/util-body-length-node/dist-cjs/calculateBodyLength.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.calculateBodyLength = void 0;
    var fs_1 = __require("fs");
    var calculateBodyLength = (body) => {
      if (!body) {
        return 0;
      }
      if (typeof body === "string") {
        return Buffer.from(body).length;
      } else if (typeof body.byteLength === "number") {
        return body.byteLength;
      } else if (typeof body.size === "number") {
        return body.size;
      } else if (typeof body.path === "string" || Buffer.isBuffer(body.path)) {
        return (0, fs_1.lstatSync)(body.path).size;
      } else if (typeof body.fd === "number") {
        return (0, fs_1.fstatSync)(body.fd).size;
      }
      throw new Error(`Body Length computation failed for ${body}`);
    };
    exports.calculateBodyLength = calculateBodyLength;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-body-length-node@3.208.0/node_modules/@aws-sdk/util-body-length-node/dist-cjs/index.js
var require_dist_cjs26 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-body-length-node@3.208.0/node_modules/@aws-sdk/util-body-length-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_calculateBodyLength(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-retry@3.272.0/node_modules/@aws-sdk/util-retry/dist-cjs/config.js
var require_config = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-retry@3.272.0/node_modules/@aws-sdk/util-retry/dist-cjs/config.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DEFAULT_RETRY_MODE = exports.DEFAULT_MAX_ATTEMPTS = exports.RETRY_MODES = void 0;
    var RETRY_MODES;
    (function(RETRY_MODES2) {
      RETRY_MODES2["STANDARD"] = "standard";
      RETRY_MODES2["ADAPTIVE"] = "adaptive";
    })(RETRY_MODES = exports.RETRY_MODES || (exports.RETRY_MODES = {}));
    exports.DEFAULT_MAX_ATTEMPTS = 3;
    exports.DEFAULT_RETRY_MODE = "STANDARD";
  }
});

// ../../node_modules/.pnpm/@aws-sdk+service-error-classification@3.272.0/node_modules/@aws-sdk/service-error-classification/dist-cjs/constants.js
var require_constants3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+service-error-classification@3.272.0/node_modules/@aws-sdk/service-error-classification/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODEJS_TIMEOUT_ERROR_CODES = exports.TRANSIENT_ERROR_STATUS_CODES = exports.TRANSIENT_ERROR_CODES = exports.THROTTLING_ERROR_CODES = exports.CLOCK_SKEW_ERROR_CODES = void 0;
    exports.CLOCK_SKEW_ERROR_CODES = [
      "AuthFailure",
      "InvalidSignatureException",
      "RequestExpired",
      "RequestInTheFuture",
      "RequestTimeTooSkewed",
      "SignatureDoesNotMatch"
    ];
    exports.THROTTLING_ERROR_CODES = [
      "BandwidthLimitExceeded",
      "EC2ThrottledException",
      "LimitExceededException",
      "PriorRequestNotComplete",
      "ProvisionedThroughputExceededException",
      "RequestLimitExceeded",
      "RequestThrottled",
      "RequestThrottledException",
      "SlowDown",
      "ThrottledException",
      "Throttling",
      "ThrottlingException",
      "TooManyRequestsException",
      "TransactionInProgressException"
    ];
    exports.TRANSIENT_ERROR_CODES = ["AbortError", "TimeoutError", "RequestTimeout", "RequestTimeoutException"];
    exports.TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];
    exports.NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "EPIPE", "ETIMEDOUT"];
  }
});

// ../../node_modules/.pnpm/@aws-sdk+service-error-classification@3.272.0/node_modules/@aws-sdk/service-error-classification/dist-cjs/index.js
var require_dist_cjs27 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+service-error-classification@3.272.0/node_modules/@aws-sdk/service-error-classification/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isServerError = exports.isTransientError = exports.isThrottlingError = exports.isClockSkewError = exports.isRetryableByTrait = void 0;
    var constants_1 = require_constants3();
    var isRetryableByTrait = (error2) => error2.$retryable !== void 0;
    exports.isRetryableByTrait = isRetryableByTrait;
    var isClockSkewError = (error2) => constants_1.CLOCK_SKEW_ERROR_CODES.includes(error2.name);
    exports.isClockSkewError = isClockSkewError;
    var isThrottlingError = (error2) => {
      var _a, _b;
      return ((_a = error2.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) === 429 || constants_1.THROTTLING_ERROR_CODES.includes(error2.name) || ((_b = error2.$retryable) === null || _b === void 0 ? void 0 : _b.throttling) == true;
    };
    exports.isThrottlingError = isThrottlingError;
    var isTransientError = (error2) => {
      var _a;
      return constants_1.TRANSIENT_ERROR_CODES.includes(error2.name) || constants_1.NODEJS_TIMEOUT_ERROR_CODES.includes((error2 === null || error2 === void 0 ? void 0 : error2.code) || "") || constants_1.TRANSIENT_ERROR_STATUS_CODES.includes(((_a = error2.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) || 0);
    };
    exports.isTransientError = isTransientError;
    var isServerError = (error2) => {
      var _a;
      if (((_a = error2.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) !== void 0) {
        const statusCode = error2.$metadata.httpStatusCode;
        if (500 <= statusCode && statusCode <= 599 && !(0, exports.isTransientError)(error2)) {
          return true;
        }
        return false;
      }
      return false;
    };
    exports.isServerError = isServerError;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-retry@3.272.0/node_modules/@aws-sdk/util-retry/dist-cjs/DefaultRateLimiter.js
var require_DefaultRateLimiter = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-retry@3.272.0/node_modules/@aws-sdk/util-retry/dist-cjs/DefaultRateLimiter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DefaultRateLimiter = void 0;
    var service_error_classification_1 = require_dist_cjs27();
    var DefaultRateLimiter = class {
      constructor(options) {
        var _a, _b, _c, _d, _e;
        this.currentCapacity = 0;
        this.enabled = false;
        this.lastMaxRate = 0;
        this.measuredTxRate = 0;
        this.requestCount = 0;
        this.lastTimestamp = 0;
        this.timeWindow = 0;
        this.beta = (_a = options === null || options === void 0 ? void 0 : options.beta) !== null && _a !== void 0 ? _a : 0.7;
        this.minCapacity = (_b = options === null || options === void 0 ? void 0 : options.minCapacity) !== null && _b !== void 0 ? _b : 1;
        this.minFillRate = (_c = options === null || options === void 0 ? void 0 : options.minFillRate) !== null && _c !== void 0 ? _c : 0.5;
        this.scaleConstant = (_d = options === null || options === void 0 ? void 0 : options.scaleConstant) !== null && _d !== void 0 ? _d : 0.4;
        this.smooth = (_e = options === null || options === void 0 ? void 0 : options.smooth) !== null && _e !== void 0 ? _e : 0.8;
        const currentTimeInSeconds = this.getCurrentTimeInSeconds();
        this.lastThrottleTime = currentTimeInSeconds;
        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());
        this.fillRate = this.minFillRate;
        this.maxCapacity = this.minCapacity;
      }
      getCurrentTimeInSeconds() {
        return Date.now() / 1e3;
      }
      async getSendToken() {
        return this.acquireTokenBucket(1);
      }
      async acquireTokenBucket(amount) {
        if (!this.enabled) {
          return;
        }
        this.refillTokenBucket();
        if (amount > this.currentCapacity) {
          const delay = (amount - this.currentCapacity) / this.fillRate * 1e3;
          await new Promise((resolve) => setTimeout(resolve, delay));
        }
        this.currentCapacity = this.currentCapacity - amount;
      }
      refillTokenBucket() {
        const timestamp = this.getCurrentTimeInSeconds();
        if (!this.lastTimestamp) {
          this.lastTimestamp = timestamp;
          return;
        }
        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;
        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);
        this.lastTimestamp = timestamp;
      }
      updateClientSendingRate(response) {
        let calculatedRate;
        this.updateMeasuredRate();
        if ((0, service_error_classification_1.isThrottlingError)(response)) {
          const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);
          this.lastMaxRate = rateToUse;
          this.calculateTimeWindow();
          this.lastThrottleTime = this.getCurrentTimeInSeconds();
          calculatedRate = this.cubicThrottle(rateToUse);
          this.enableTokenBucket();
        } else {
          this.calculateTimeWindow();
          calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());
        }
        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);
        this.updateTokenBucketRate(newRate);
      }
      calculateTimeWindow() {
        this.timeWindow = this.getPrecise(Math.pow(this.lastMaxRate * (1 - this.beta) / this.scaleConstant, 1 / 3));
      }
      cubicThrottle(rateToUse) {
        return this.getPrecise(rateToUse * this.beta);
      }
      cubicSuccess(timestamp) {
        return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);
      }
      enableTokenBucket() {
        this.enabled = true;
      }
      updateTokenBucketRate(newRate) {
        this.refillTokenBucket();
        this.fillRate = Math.max(newRate, this.minFillRate);
        this.maxCapacity = Math.max(newRate, this.minCapacity);
        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);
      }
      updateMeasuredRate() {
        const t = this.getCurrentTimeInSeconds();
        const timeBucket = Math.floor(t * 2) / 2;
        this.requestCount++;
        if (timeBucket > this.lastTxRateBucket) {
          const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);
          this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));
          this.requestCount = 0;
          this.lastTxRateBucket = timeBucket;
        }
      }
      getPrecise(num) {
        return parseFloat(num.toFixed(8));
      }
    };
    exports.DefaultRateLimiter = DefaultRateLimiter;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-retry@3.272.0/node_modules/@aws-sdk/util-retry/dist-cjs/constants.js
var require_constants4 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-retry@3.272.0/node_modules/@aws-sdk/util-retry/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.REQUEST_HEADER = exports.INVOCATION_ID_HEADER = exports.NO_RETRY_INCREMENT = exports.TIMEOUT_RETRY_COST = exports.RETRY_COST = exports.INITIAL_RETRY_TOKENS = exports.THROTTLING_RETRY_DELAY_BASE = exports.MAXIMUM_RETRY_DELAY = exports.DEFAULT_RETRY_DELAY_BASE = void 0;
    exports.DEFAULT_RETRY_DELAY_BASE = 100;
    exports.MAXIMUM_RETRY_DELAY = 20 * 1e3;
    exports.THROTTLING_RETRY_DELAY_BASE = 500;
    exports.INITIAL_RETRY_TOKENS = 500;
    exports.RETRY_COST = 5;
    exports.TIMEOUT_RETRY_COST = 10;
    exports.NO_RETRY_INCREMENT = 1;
    exports.INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
    exports.REQUEST_HEADER = "amz-sdk-request";
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-retry@3.272.0/node_modules/@aws-sdk/util-retry/dist-cjs/defaultRetryBackoffStrategy.js
var require_defaultRetryBackoffStrategy = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-retry@3.272.0/node_modules/@aws-sdk/util-retry/dist-cjs/defaultRetryBackoffStrategy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getDefaultRetryBackoffStrategy = void 0;
    var constants_1 = require_constants4();
    var getDefaultRetryBackoffStrategy = () => {
      let delayBase = constants_1.DEFAULT_RETRY_DELAY_BASE;
      const computeNextBackoffDelay = (attempts) => {
        return Math.floor(Math.min(constants_1.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
      };
      const setDelayBase = (delay) => {
        delayBase = delay;
      };
      return {
        computeNextBackoffDelay,
        setDelayBase
      };
    };
    exports.getDefaultRetryBackoffStrategy = getDefaultRetryBackoffStrategy;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-retry@3.272.0/node_modules/@aws-sdk/util-retry/dist-cjs/defaultRetryToken.js
var require_defaultRetryToken = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-retry@3.272.0/node_modules/@aws-sdk/util-retry/dist-cjs/defaultRetryToken.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getDefaultRetryToken = void 0;
    var constants_1 = require_constants4();
    var defaultRetryBackoffStrategy_1 = require_defaultRetryBackoffStrategy();
    var getDefaultRetryToken = (initialRetryTokens, initialRetryDelay, initialRetryCount, options) => {
      var _a, _b, _c;
      const MAX_CAPACITY = initialRetryTokens;
      const retryCost = (_a = options === null || options === void 0 ? void 0 : options.retryCost) !== null && _a !== void 0 ? _a : constants_1.RETRY_COST;
      const timeoutRetryCost = (_b = options === null || options === void 0 ? void 0 : options.timeoutRetryCost) !== null && _b !== void 0 ? _b : constants_1.TIMEOUT_RETRY_COST;
      const retryBackoffStrategy = (_c = options === null || options === void 0 ? void 0 : options.retryBackoffStrategy) !== null && _c !== void 0 ? _c : (0, defaultRetryBackoffStrategy_1.getDefaultRetryBackoffStrategy)();
      let availableCapacity = initialRetryTokens;
      let retryDelay = Math.min(constants_1.MAXIMUM_RETRY_DELAY, initialRetryDelay);
      let lastRetryCost = void 0;
      let retryCount = initialRetryCount !== null && initialRetryCount !== void 0 ? initialRetryCount : 0;
      const getCapacityAmount = (errorType) => errorType === "TRANSIENT" ? timeoutRetryCost : retryCost;
      const getRetryCount = () => retryCount;
      const getRetryDelay = () => retryDelay;
      const getLastRetryCost = () => lastRetryCost;
      const hasRetryTokens = (errorType) => getCapacityAmount(errorType) <= availableCapacity;
      const getRetryTokenCount = (errorInfo) => {
        const errorType = errorInfo.errorType;
        if (!hasRetryTokens(errorType)) {
          throw new Error("No retry token available");
        }
        const capacityAmount = getCapacityAmount(errorType);
        const delayBase = errorType === "THROTTLING" ? constants_1.THROTTLING_RETRY_DELAY_BASE : constants_1.DEFAULT_RETRY_DELAY_BASE;
        retryBackoffStrategy.setDelayBase(delayBase);
        const delayFromErrorType = retryBackoffStrategy.computeNextBackoffDelay(retryCount);
        if (errorInfo.retryAfterHint) {
          const delayFromRetryAfterHint = errorInfo.retryAfterHint.getTime() - Date.now();
          retryDelay = Math.max(delayFromRetryAfterHint || 0, delayFromErrorType);
        } else {
          retryDelay = delayFromErrorType;
        }
        retryCount++;
        lastRetryCost = capacityAmount;
        availableCapacity -= capacityAmount;
        return capacityAmount;
      };
      const releaseRetryTokens = (releaseAmount) => {
        availableCapacity += releaseAmount !== null && releaseAmount !== void 0 ? releaseAmount : constants_1.NO_RETRY_INCREMENT;
        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
      };
      return {
        getRetryCount,
        getRetryDelay,
        getLastRetryCost,
        hasRetryTokens,
        getRetryTokenCount,
        releaseRetryTokens
      };
    };
    exports.getDefaultRetryToken = getDefaultRetryToken;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-retry@3.272.0/node_modules/@aws-sdk/util-retry/dist-cjs/StandardRetryStrategy.js
var require_StandardRetryStrategy = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-retry@3.272.0/node_modules/@aws-sdk/util-retry/dist-cjs/StandardRetryStrategy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StandardRetryStrategy = void 0;
    var config_1 = require_config();
    var constants_1 = require_constants4();
    var defaultRetryToken_1 = require_defaultRetryToken();
    var StandardRetryStrategy2 = class {
      constructor(maxAttemptsProvider) {
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = config_1.RETRY_MODES.STANDARD;
        this.retryToken = (0, defaultRetryToken_1.getDefaultRetryToken)(constants_1.INITIAL_RETRY_TOKENS, constants_1.DEFAULT_RETRY_DELAY_BASE);
        this.maxAttemptsProvider = maxAttemptsProvider;
      }
      async acquireInitialRetryToken(retryTokenScope) {
        return this.retryToken;
      }
      async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        const maxAttempts = await this.getMaxAttempts();
        if (this.shouldRetry(tokenToRenew, errorInfo, maxAttempts)) {
          tokenToRenew.getRetryTokenCount(errorInfo);
          return tokenToRenew;
        }
        throw new Error("No retry token available");
      }
      recordSuccess(token) {
        this.retryToken.releaseRetryTokens(token.getLastRetryCost());
      }
      async getMaxAttempts() {
        let maxAttempts;
        try {
          return await this.maxAttemptsProvider();
        } catch (error2) {
          console.warn(`Max attempts provider could not resolve. Using default of ${config_1.DEFAULT_MAX_ATTEMPTS}`);
          return config_1.DEFAULT_MAX_ATTEMPTS;
        }
      }
      shouldRetry(tokenToRenew, errorInfo, maxAttempts) {
        const attempts = tokenToRenew.getRetryCount();
        return attempts < maxAttempts && tokenToRenew.hasRetryTokens(errorInfo.errorType) && this.isRetryableError(errorInfo.errorType);
      }
      isRetryableError(errorType) {
        return errorType === "THROTTLING" || errorType === "TRANSIENT";
      }
    };
    exports.StandardRetryStrategy = StandardRetryStrategy2;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-retry@3.272.0/node_modules/@aws-sdk/util-retry/dist-cjs/AdaptiveRetryStrategy.js
var require_AdaptiveRetryStrategy = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-retry@3.272.0/node_modules/@aws-sdk/util-retry/dist-cjs/AdaptiveRetryStrategy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AdaptiveRetryStrategy = void 0;
    var config_1 = require_config();
    var DefaultRateLimiter_1 = require_DefaultRateLimiter();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy();
    var AdaptiveRetryStrategy = class {
      constructor(maxAttemptsProvider, options) {
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = config_1.RETRY_MODES.ADAPTIVE;
        const { rateLimiter } = options !== null && options !== void 0 ? options : {};
        this.rateLimiter = rateLimiter !== null && rateLimiter !== void 0 ? rateLimiter : new DefaultRateLimiter_1.DefaultRateLimiter();
        this.standardRetryStrategy = new StandardRetryStrategy_1.StandardRetryStrategy(maxAttemptsProvider);
      }
      async acquireInitialRetryToken(retryTokenScope) {
        await this.rateLimiter.getSendToken();
        return this.standardRetryStrategy.acquireInitialRetryToken(retryTokenScope);
      }
      async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        this.rateLimiter.updateClientSendingRate(errorInfo);
        return this.standardRetryStrategy.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
      }
      recordSuccess(token) {
        this.rateLimiter.updateClientSendingRate({});
        this.standardRetryStrategy.recordSuccess(token);
      }
    };
    exports.AdaptiveRetryStrategy = AdaptiveRetryStrategy;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-retry@3.272.0/node_modules/@aws-sdk/util-retry/dist-cjs/types.js
var require_types4 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-retry@3.272.0/node_modules/@aws-sdk/util-retry/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-retry@3.272.0/node_modules/@aws-sdk/util-retry/dist-cjs/index.js
var require_dist_cjs28 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-retry@3.272.0/node_modules/@aws-sdk/util-retry/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AdaptiveRetryStrategy(), exports);
    tslib_1.__exportStar(require_DefaultRateLimiter(), exports);
    tslib_1.__exportStar(require_StandardRetryStrategy(), exports);
    tslib_1.__exportStar(require_config(), exports);
    tslib_1.__exportStar(require_constants4(), exports);
    tslib_1.__exportStar(require_types4(), exports);
  }
});

// ../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/package.json
var require_package3 = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/package.json"(exports, module) {
    module.exports = {
      name: "aws-crt",
      version: "1.15.9",
      description: "NodeJS/browser bindings to the aws-c-* libraries",
      homepage: "https://github.com/awslabs/aws-crt-nodejs",
      repository: {
        type: "git",
        url: "git+https://github.com/awslabs/aws-crt-nodejs.git"
      },
      contributors: [
        "AWS Common Runtime Team <aws-sdk-common-runtime@amazon.com>"
      ],
      license: "Apache-2.0",
      main: "./dist/index.js",
      browser: "./dist.browser/browser.js",
      types: "./dist/index.d.ts",
      scripts: {
        tsc: "node ./scripts/tsc.js",
        test: "npm run test:native",
        "test:node": "npm run test:native",
        "test:native": "npx jest --runInBand --verbose --config test/native/jest.config.js --forceExit",
        "test:browser": "npx jest --runInBand --verbose --config test/browser/jest.config.js --forceExit",
        "test:browser:ci": "npm run install:puppeteer && npm run test:browser",
        "install:puppeteer": "npm install --save-dev jest-puppeteer puppeteer @types/puppeteer",
        prepare: "node ./scripts/tsc.js && node ./scripts/install.js",
        install: "node ./scripts/install.js"
      },
      devDependencies: {
        "@types/crypto-js": "^3.1.43",
        "@types/jest": "^27.0.1",
        "@types/node": "^10.17.54",
        "@types/prettier": "2.6.0",
        "@types/puppeteer": "^5.4.4",
        "@types/uuid": "^3.4.8",
        "@types/ws": "^7.4.7",
        "aws-sdk": "^2.848.0",
        "https-proxy-agent": "^5.0.1",
        jest: "^27.2.1",
        "jest-puppeteer": "^5.0.4",
        "jest-runtime": "^27.2.1",
        puppeteer: "^3.3.0",
        "ts-jest": "^27.0.5",
        typedoc: "^0.22.18",
        "typedoc-plugin-merge-modules": "^3.1.0",
        typescript: "^4.7.4",
        uuid: "^8.3.2",
        yargs: "^17.2.1",
        "cmake-js": "^6.3.2",
        tar: "^6.1.11"
      },
      dependencies: {
        "@aws-sdk/util-utf8-browser": "^3.109.0",
        "@httptoolkit/websocket-stream": "^6.0.0",
        axios: "^0.24.0",
        "crypto-js": "^4.0.0",
        mqtt: "^4.3.7",
        "cmake-js": "^6.3.2",
        tar: "^6.1.11"
      }
    };
  }
});

// ../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/common/platform.js
var require_platform = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/common/platform.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.crt_version = exports.package_info = exports.is_browser = exports.is_nodejs = void 0;
    function is_nodejs() {
      return typeof process === "object" && typeof process.versions === "object" && typeof process.versions.node !== "undefined";
    }
    exports.is_nodejs = is_nodejs;
    function is_browser() {
      return !is_nodejs();
    }
    exports.is_browser = is_browser;
    function package_info() {
      try {
        const pkg = require_package3();
        return pkg;
      } catch (err) {
        return {
          name: "aws-crt-nodejs",
          version: "UNKNOWN"
        };
      }
    }
    exports.package_info = package_info;
    function crt_version() {
      const pkg = package_info();
      return pkg.version;
    }
    exports.crt_version = crt_version;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/common/resource_safety.js
var require_resource_safety = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/common/resource_safety.js"(exports) {
    "use strict";
    var __awaiter2 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator2) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator2.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator2["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator2 = generator2.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.using = void 0;
    function using(resource, func) {
      return __awaiter2(this, void 0, void 0, function* () {
        try {
          yield func(resource);
        } finally {
          resource.close();
        }
      });
    }
    exports.using = using;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/native/binding.js
var require_binding = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/native/binding.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var path20 = __importStar2(__require("path"));
    var os_1 = __require("os");
    var fs_1 = __require("fs");
    var process_1 = __require("process");
    var upgrade_string = "Please upgrade to node >=10.16.0, or use the provided browser implementation.";
    if ("napi" in process_1.versions) {
      const napi_version = parseInt(process_1.versions["napi"]);
      if (napi_version < 4) {
        throw new Error("The AWS CRT native implementation requires that NAPI version 4 be present. " + upgrade_string);
      }
    } else {
      throw new Error("The current runtime is not reporting an NAPI version. " + upgrade_string);
    }
    var binary_name = "aws-crt-nodejs";
    var platformDir = `${os_1.platform}-${os_1.arch}`;
    var source_root = path20.resolve(__dirname, "..", "..");
    var dist = path20.join(source_root, "dist");
    if ((0, fs_1.existsSync)(dist)) {
      source_root = dist;
    }
    var bin_path = path20.resolve(source_root, "bin");
    var search_paths = [
      path20.join(bin_path, platformDir, binary_name)
    ];
    var binding;
    for (const path21 of search_paths) {
      if ((0, fs_1.existsSync)(path21 + ".node")) {
        binding = __require(path21);
        break;
      }
    }
    if (binding == void 0) {
      throw new Error("AWS CRT binary not present in any of the following locations:\n	" + search_paths.join("\n	"));
    }
    exports.default = binding;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/native/error.js
var require_error = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/native/error.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CrtError = void 0;
    var binding_1 = __importDefault2(require_binding());
    var CrtError = class extends Error {
      constructor(error2) {
        super(extract_message(error2));
        this.error = error2;
        this.error_code = extract_code(error2);
        this.error_name = extract_name(error2);
      }
    };
    exports.CrtError = CrtError;
    function extract_message(error2) {
      if (typeof error2 === "number") {
        return binding_1.default.error_code_to_string(error2);
      } else if (error2 instanceof CrtError) {
        return error2.message;
      }
      return error2.toString();
    }
    function extract_code(error2) {
      if (typeof error2 === "number") {
        return error2;
      } else if (error2 instanceof CrtError) {
        return error2.error_code;
      }
      return void 0;
    }
    function extract_name(error2) {
      if (typeof error2 === "number") {
        return binding_1.default.error_code_to_name(error2);
      } else if (error2 instanceof CrtError) {
        return error2.error_name;
      }
      return void 0;
    }
  }
});

// ../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/native/native_resource.js
var require_native_resource = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/native/native_resource.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NativeResourceMixin = exports.NativeResource = void 0;
    var NativeResource = class {
      constructor(handle) {
        this.handle = handle;
      }
      native_handle() {
        return this.handle;
      }
    };
    exports.NativeResource = NativeResource;
    function NativeResourceMixin(Base) {
      return class extends Base {
        constructor(...args) {
          const handle = args.shift();
          super(...args);
          this._handle = handle;
        }
        _super(handle) {
          this._handle = handle;
        }
        native_handle() {
          return this._handle;
        }
      };
    }
    exports.NativeResourceMixin = NativeResourceMixin;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/common/io.js
var require_io = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/common/io.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SocketDomain = exports.SocketType = exports.TlsVersion = void 0;
    var TlsVersion;
    (function(TlsVersion2) {
      TlsVersion2[TlsVersion2["SSLv3"] = 0] = "SSLv3";
      TlsVersion2[TlsVersion2["TLSv1"] = 1] = "TLSv1";
      TlsVersion2[TlsVersion2["TLSv1_1"] = 2] = "TLSv1_1";
      TlsVersion2[TlsVersion2["TLSv1_2"] = 3] = "TLSv1_2";
      TlsVersion2[TlsVersion2["TLSv1_3"] = 4] = "TLSv1_3";
      TlsVersion2[TlsVersion2["Default"] = 128] = "Default";
    })(TlsVersion = exports.TlsVersion || (exports.TlsVersion = {}));
    var SocketType;
    (function(SocketType2) {
      SocketType2[SocketType2["STREAM"] = 0] = "STREAM";
      SocketType2[SocketType2["DGRAM"] = 1] = "DGRAM";
    })(SocketType = exports.SocketType || (exports.SocketType = {}));
    var SocketDomain;
    (function(SocketDomain2) {
      SocketDomain2[SocketDomain2["IPV4"] = 0] = "IPV4";
      SocketDomain2[SocketDomain2["IPV6"] = 1] = "IPV6";
      SocketDomain2[SocketDomain2["LOCAL"] = 2] = "LOCAL";
    })(SocketDomain = exports.SocketDomain || (exports.SocketDomain = {}));
  }
});

// ../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/native/io.js
var require_io2 = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/native/io.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Pkcs11Lib = exports.TlsConnectionOptions = exports.ServerTlsContext = exports.ClientTlsContext = exports.TlsContext = exports.TlsContextOptions = exports.SocketOptions = exports.ClientBootstrap = exports.InputStream = exports.is_alpn_available = exports.enable_logging = exports.LogLevel = exports.error_code_to_name = exports.error_code_to_string = exports.SocketDomain = exports.SocketType = exports.TlsVersion = void 0;
    var binding_1 = __importDefault2(require_binding());
    var native_resource_1 = require_native_resource();
    var io_1 = require_io();
    var io_2 = require_io();
    Object.defineProperty(exports, "TlsVersion", { enumerable: true, get: function() {
      return io_2.TlsVersion;
    } });
    Object.defineProperty(exports, "SocketType", { enumerable: true, get: function() {
      return io_2.SocketType;
    } });
    Object.defineProperty(exports, "SocketDomain", { enumerable: true, get: function() {
      return io_2.SocketDomain;
    } });
    function error_code_to_string(error_code) {
      return binding_1.default.error_code_to_string(error_code);
    }
    exports.error_code_to_string = error_code_to_string;
    function error_code_to_name(error_code) {
      return binding_1.default.error_code_to_name(error_code);
    }
    exports.error_code_to_name = error_code_to_name;
    var LogLevel;
    (function(LogLevel2) {
      LogLevel2[LogLevel2["NONE"] = 0] = "NONE";
      LogLevel2[LogLevel2["FATAL"] = 1] = "FATAL";
      LogLevel2[LogLevel2["ERROR"] = 2] = "ERROR";
      LogLevel2[LogLevel2["WARN"] = 3] = "WARN";
      LogLevel2[LogLevel2["INFO"] = 4] = "INFO";
      LogLevel2[LogLevel2["DEBUG"] = 5] = "DEBUG";
      LogLevel2[LogLevel2["TRACE"] = 6] = "TRACE";
    })(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
    function enable_logging(level) {
      binding_1.default.io_logging_enable(level);
    }
    exports.enable_logging = enable_logging;
    function is_alpn_available() {
      return binding_1.default.is_alpn_available();
    }
    exports.is_alpn_available = is_alpn_available;
    var InputStream = class extends native_resource_1.NativeResource {
      constructor(source) {
        super(binding_1.default.io_input_stream_new(16 * 1024));
        this.source = source;
        this.source.on("data", (data2) => {
          data2 = Buffer.isBuffer(data2) ? data2 : new Buffer(data2.toString(), "utf8");
          binding_1.default.io_input_stream_append(this.native_handle(), data2);
        });
        this.source.on("end", () => {
          binding_1.default.io_input_stream_append(this.native_handle(), void 0);
        });
      }
    };
    exports.InputStream = InputStream;
    var ClientBootstrap = class extends native_resource_1.NativeResource {
      constructor() {
        super(binding_1.default.io_client_bootstrap_new());
      }
    };
    exports.ClientBootstrap = ClientBootstrap;
    var SocketOptions = class extends native_resource_1.NativeResource {
      constructor(type = io_1.SocketType.STREAM, domain = io_1.SocketDomain.IPV6, connect_timeout_ms = 5e3, keepalive = false, keep_alive_interval_sec = 0, keep_alive_timeout_sec = 0, keep_alive_max_failed_probes = 0) {
        super(binding_1.default.io_socket_options_new(type, domain, connect_timeout_ms, keep_alive_interval_sec, keep_alive_timeout_sec, keep_alive_max_failed_probes, keepalive));
      }
    };
    exports.SocketOptions = SocketOptions;
    var TlsContextOptions = class {
      constructor() {
        this.min_tls_version = io_1.TlsVersion.Default;
        this.alpn_list = [];
        this.verify_peer = true;
      }
      override_default_trust_store_from_path(ca_dirpath, ca_filepath) {
        this.ca_dirpath = ca_dirpath;
        this.ca_filepath = ca_filepath;
      }
      override_default_trust_store(certificate_authority) {
        this.certificate_authority = certificate_authority;
      }
      static create_client_with_mtls(certificate, private_key) {
        let opt = new TlsContextOptions();
        opt.certificate = certificate;
        opt.private_key = private_key;
        opt.verify_peer = true;
        return opt;
      }
      static create_client_with_mtls_from_path(certificate_filepath, private_key_filepath) {
        let opt = new TlsContextOptions();
        opt.certificate_filepath = certificate_filepath;
        opt.private_key_filepath = private_key_filepath;
        opt.verify_peer = true;
        return opt;
      }
      static create_client_with_mtls_pkcs12_from_path(pkcs12_filepath, pkcs12_password) {
        let opt = new TlsContextOptions();
        opt.pkcs12_filepath = pkcs12_filepath;
        opt.pkcs12_password = pkcs12_password;
        opt.verify_peer = true;
        return opt;
      }
      static create_client_with_mtls_pkcs_from_path(pkcs12_filepath, pkcs12_password) {
        return this.create_client_with_mtls_pkcs12_from_path(pkcs12_filepath, pkcs12_password);
      }
      static create_client_with_mtls_pkcs11(options) {
        let opt = new TlsContextOptions();
        opt.pkcs11_options = options;
        opt.verify_peer = true;
        return opt;
      }
      static create_client_with_mtls_windows_cert_store_path(certificate_path) {
        let opt = new TlsContextOptions();
        opt.windows_cert_store_path = certificate_path;
        opt.verify_peer = true;
        return opt;
      }
      static create_server_with_mtls_from_path(certificate_filepath, private_key_filepath) {
        let opt = new TlsContextOptions();
        opt.certificate_filepath = certificate_filepath;
        opt.private_key_filepath = private_key_filepath;
        opt.verify_peer = false;
        return opt;
      }
      static create_server_with_mtls_pkcs_from_path(pkcs12_filepath, pkcs12_password) {
        let opt = new TlsContextOptions();
        opt.pkcs12_filepath = pkcs12_filepath;
        opt.pkcs12_password = pkcs12_password;
        opt.verify_peer = false;
        return opt;
      }
    };
    exports.TlsContextOptions = TlsContextOptions;
    var TlsContext = class extends native_resource_1.NativeResource {
      constructor(ctx_opt) {
        super(binding_1.default.io_tls_ctx_new(ctx_opt.min_tls_version, ctx_opt.ca_filepath, ctx_opt.ca_dirpath, ctx_opt.certificate_authority, ctx_opt.alpn_list && ctx_opt.alpn_list.length > 0 ? ctx_opt.alpn_list.join(";") : void 0, ctx_opt.certificate_filepath, ctx_opt.certificate, ctx_opt.private_key_filepath, ctx_opt.private_key, ctx_opt.pkcs12_filepath, ctx_opt.pkcs12_password, ctx_opt.pkcs11_options, ctx_opt.windows_cert_store_path, ctx_opt.verify_peer));
      }
    };
    exports.TlsContext = TlsContext;
    var ClientTlsContext = class extends TlsContext {
      constructor(ctx_opt) {
        if (!ctx_opt) {
          ctx_opt = new TlsContextOptions();
          ctx_opt.verify_peer = true;
        }
        super(ctx_opt);
      }
    };
    exports.ClientTlsContext = ClientTlsContext;
    var ServerTlsContext = class extends TlsContext {
      constructor(ctx_opt) {
        if (!ctx_opt) {
          ctx_opt = new TlsContextOptions();
          ctx_opt.verify_peer = false;
        }
        super(ctx_opt);
      }
    };
    exports.ServerTlsContext = ServerTlsContext;
    var TlsConnectionOptions = class extends native_resource_1.NativeResource {
      constructor(tls_ctx, server_name, alpn_list = []) {
        super(binding_1.default.io_tls_connection_options_new(tls_ctx.native_handle(), server_name, alpn_list && alpn_list.length > 0 ? alpn_list.join(";") : void 0));
        this.tls_ctx = tls_ctx;
        this.server_name = server_name;
        this.alpn_list = alpn_list;
      }
    };
    exports.TlsConnectionOptions = TlsConnectionOptions;
    var Pkcs11Lib = class extends native_resource_1.NativeResource {
      constructor(path20, behavior = Pkcs11Lib.InitializeFinalizeBehavior.DEFAULT) {
        super(binding_1.default.io_pkcs11_lib_new(path20, behavior));
      }
      close() {
        binding_1.default.io_pkcs11_lib_close(this.native_handle());
      }
    };
    exports.Pkcs11Lib = Pkcs11Lib;
    (function(Pkcs11Lib2) {
      let InitializeFinalizeBehavior;
      (function(InitializeFinalizeBehavior2) {
        InitializeFinalizeBehavior2[InitializeFinalizeBehavior2["DEFAULT"] = 0] = "DEFAULT";
        InitializeFinalizeBehavior2[InitializeFinalizeBehavior2["OMIT"] = 1] = "OMIT";
        InitializeFinalizeBehavior2[InitializeFinalizeBehavior2["STRICT"] = 2] = "STRICT";
      })(InitializeFinalizeBehavior = Pkcs11Lib2.InitializeFinalizeBehavior || (Pkcs11Lib2.InitializeFinalizeBehavior = {}));
    })(Pkcs11Lib = exports.Pkcs11Lib || (exports.Pkcs11Lib = {}));
  }
});

// ../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/native/auth.js
var require_auth2 = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/native/auth.js"(exports) {
    "use strict";
    var __awaiter2 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator2) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator2.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator2["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator2 = generator2.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.aws_verify_sigv4a_signing = exports.aws_sign_request = exports.AwsSignedBodyHeaderType = exports.AwsSignedBodyValue = exports.AwsSignatureType = exports.AwsSigningAlgorithm = exports.AwsCredentialsProvider = void 0;
    var binding_1 = __importDefault2(require_binding());
    var error_1 = require_error();
    var io_1 = require_io2();
    var AwsCredentialsProvider = class extends binding_1.default.AwsCredentialsProvider {
      static newDefault(bootstrap2 = void 0) {
        return super.newDefault(bootstrap2 != null ? bootstrap2.native_handle() : null);
      }
      static newStatic(access_key, secret_key, session_token) {
        return super.newStatic(access_key, secret_key, session_token);
      }
      static newCognito(config) {
        return super.newCognito(config, config.tlsContext != null ? config.tlsContext.native_handle() : new io_1.ClientTlsContext().native_handle(), config.bootstrap != null ? config.bootstrap.native_handle() : null, config.httpProxyOptions ? config.httpProxyOptions.create_native_handle() : null);
      }
    };
    exports.AwsCredentialsProvider = AwsCredentialsProvider;
    var AwsSigningAlgorithm;
    (function(AwsSigningAlgorithm2) {
      AwsSigningAlgorithm2[AwsSigningAlgorithm2["SigV4"] = 0] = "SigV4";
      AwsSigningAlgorithm2[AwsSigningAlgorithm2["SigV4Asymmetric"] = 1] = "SigV4Asymmetric";
    })(AwsSigningAlgorithm = exports.AwsSigningAlgorithm || (exports.AwsSigningAlgorithm = {}));
    var AwsSignatureType;
    (function(AwsSignatureType2) {
      AwsSignatureType2[AwsSignatureType2["HttpRequestViaHeaders"] = 0] = "HttpRequestViaHeaders";
      AwsSignatureType2[AwsSignatureType2["HttpRequestViaQueryParams"] = 1] = "HttpRequestViaQueryParams";
      AwsSignatureType2[AwsSignatureType2["HttpRequestChunk"] = 2] = "HttpRequestChunk";
      AwsSignatureType2[AwsSignatureType2["HttpRequestEvent"] = 3] = "HttpRequestEvent";
    })(AwsSignatureType = exports.AwsSignatureType || (exports.AwsSignatureType = {}));
    var AwsSignedBodyValue;
    (function(AwsSignedBodyValue2) {
      AwsSignedBodyValue2["EmptySha256"] = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
      AwsSignedBodyValue2["UnsignedPayload"] = "UNSIGNED-PAYLOAD";
      AwsSignedBodyValue2["StreamingAws4HmacSha256Payload"] = "STREAMING-AWS4-HMAC-SHA256-PAYLOAD";
      AwsSignedBodyValue2["StreamingAws4HmacSha256Events"] = "STREAMING-AWS4-HMAC-SHA256-EVENTS";
    })(AwsSignedBodyValue = exports.AwsSignedBodyValue || (exports.AwsSignedBodyValue = {}));
    var AwsSignedBodyHeaderType;
    (function(AwsSignedBodyHeaderType2) {
      AwsSignedBodyHeaderType2[AwsSignedBodyHeaderType2["None"] = 0] = "None";
      AwsSignedBodyHeaderType2[AwsSignedBodyHeaderType2["XAmzContentSha256"] = 1] = "XAmzContentSha256";
    })(AwsSignedBodyHeaderType = exports.AwsSignedBodyHeaderType || (exports.AwsSignedBodyHeaderType = {}));
    function aws_sign_request(request, config) {
      return __awaiter2(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
          try {
            binding_1.default.aws_sign_request(request, config, (error_code) => {
              if (error_code == 0) {
                resolve(request);
              } else {
                reject(new error_1.CrtError(error_code));
              }
            });
          } catch (error2) {
            reject(error2);
          }
        });
      });
    }
    exports.aws_sign_request = aws_sign_request;
    function aws_verify_sigv4a_signing(request, config, expected_canonical_request, signature, ecc_key_pub_x, ecc_key_pub_y) {
      return binding_1.default.aws_verify_sigv4a_signing(request, config, expected_canonical_request, signature, ecc_key_pub_x, ecc_key_pub_y);
    }
    exports.aws_verify_sigv4a_signing = aws_verify_sigv4a_signing;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/native/checksums.js
var require_checksums = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/native/checksums.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.crc32c = exports.crc32 = void 0;
    var binding_1 = __importDefault2(require_binding());
    function crc32(data2, previous2) {
      return binding_1.default.checksums_crc32(data2, previous2);
    }
    exports.crc32 = crc32;
    function crc32c(data2, previous2) {
      return binding_1.default.checksums_crc32c(data2, previous2);
    }
    exports.crc32c = crc32c;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/native/crt.js
var require_crt = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/native/crt.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.native_memory_dump = exports.native_memory = void 0;
    var binding_1 = __importDefault2(require_binding());
    function native_memory() {
      return binding_1.default.native_memory();
    }
    exports.native_memory = native_memory;
    function native_memory_dump() {
      return binding_1.default.native_memory_dump();
    }
    exports.native_memory_dump = native_memory_dump;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/native/crypto.js
var require_crypto2 = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/native/crypto.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hmac_sha256 = exports.Sha256Hmac = exports.hash_sha1 = exports.Sha1Hash = exports.hash_sha256 = exports.Sha256Hash = exports.hash_md5 = exports.Md5Hash = void 0;
    var binding_1 = __importDefault2(require_binding());
    var native_resource_1 = require_native_resource();
    var Hash = class extends native_resource_1.NativeResource {
      update(data2) {
        binding_1.default.hash_update(this.native_handle(), data2);
      }
      finalize(truncate_to) {
        return binding_1.default.hash_digest(this.native_handle(), truncate_to);
      }
      constructor(hash_handle) {
        super(hash_handle);
      }
    };
    var Md5Hash = class extends Hash {
      constructor() {
        super(binding_1.default.hash_md5_new());
      }
    };
    exports.Md5Hash = Md5Hash;
    function hash_md5(data2, truncate_to) {
      return binding_1.default.hash_md5_compute(data2, truncate_to);
    }
    exports.hash_md5 = hash_md5;
    var Sha256Hash = class extends Hash {
      constructor() {
        super(binding_1.default.hash_sha256_new());
      }
    };
    exports.Sha256Hash = Sha256Hash;
    function hash_sha256(data2, truncate_to) {
      return binding_1.default.hash_sha256_compute(data2, truncate_to);
    }
    exports.hash_sha256 = hash_sha256;
    var Sha1Hash = class extends Hash {
      constructor() {
        super(binding_1.default.hash_sha1_new());
      }
    };
    exports.Sha1Hash = Sha1Hash;
    function hash_sha1(data2, truncate_to) {
      return binding_1.default.hash_sha1_compute(data2, truncate_to);
    }
    exports.hash_sha1 = hash_sha1;
    var Hmac = class extends native_resource_1.NativeResource {
      update(data2) {
        binding_1.default.hmac_update(this.native_handle(), data2);
      }
      finalize(truncate_to) {
        return binding_1.default.hmac_digest(this.native_handle(), truncate_to);
      }
      constructor(hash_handle) {
        super(hash_handle);
      }
    };
    var Sha256Hmac = class extends Hmac {
      constructor(secret) {
        super(binding_1.default.hmac_sha256_new(secret));
      }
    };
    exports.Sha256Hmac = Sha256Hmac;
    function hmac_sha256(secret, data2, truncate_to) {
      return binding_1.default.hmac_sha256_compute(secret, data2, truncate_to);
    }
    exports.hmac_sha256 = hmac_sha256;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/common/http.js
var require_http2 = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/common/http.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CommonHttpProxyOptions = exports.HttpProxyAuthenticationType = exports.HttpVersion = void 0;
    var HttpVersion;
    (function(HttpVersion2) {
      HttpVersion2[HttpVersion2["Unknown"] = 0] = "Unknown";
      HttpVersion2[HttpVersion2["Http1_0"] = 1] = "Http1_0";
      HttpVersion2[HttpVersion2["Http1_1"] = 2] = "Http1_1";
      HttpVersion2[HttpVersion2["Http2"] = 3] = "Http2";
    })(HttpVersion = exports.HttpVersion || (exports.HttpVersion = {}));
    var HttpProxyAuthenticationType;
    (function(HttpProxyAuthenticationType2) {
      HttpProxyAuthenticationType2[HttpProxyAuthenticationType2["None"] = 0] = "None";
      HttpProxyAuthenticationType2[HttpProxyAuthenticationType2["Basic"] = 1] = "Basic";
    })(HttpProxyAuthenticationType = exports.HttpProxyAuthenticationType || (exports.HttpProxyAuthenticationType = {}));
    var CommonHttpProxyOptions = class {
      constructor(host_name, port, auth_method = HttpProxyAuthenticationType.None, auth_username, auth_password) {
        this.host_name = host_name;
        this.port = port;
        this.auth_method = auth_method;
        this.auth_username = auth_username;
        this.auth_password = auth_password;
      }
    };
    exports.CommonHttpProxyOptions = CommonHttpProxyOptions;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/common/event.js
var require_event = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/common/event.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BufferedEventEmitter = void 0;
    var events_1 = __require("events");
    var BufferedEvent = class {
      constructor(event, args) {
        this.event = event;
        this.args = args;
      }
    };
    var BufferedEventEmitter = class extends events_1.EventEmitter {
      constructor() {
        super();
        this.corked = false;
      }
      cork() {
        this.corked = true;
      }
      uncork() {
        this.corked = false;
        while (this.eventQueue) {
          const event = this.eventQueue;
          super.emit(event.event, ...event.args);
          this.eventQueue = this.eventQueue.next;
        }
      }
      emit(event, ...args) {
        if (this.corked) {
          let last2 = this.lastQueuedEvent;
          this.lastQueuedEvent = new BufferedEvent(event, args);
          if (last2) {
            last2.next = this.lastQueuedEvent;
          } else {
            this.eventQueue = this.lastQueuedEvent;
          }
          return this.listeners(event).length > 0;
        }
        return super.emit(event, ...args);
      }
    };
    exports.BufferedEventEmitter = BufferedEventEmitter;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/native/http.js
var require_http3 = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/native/http.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HttpClientConnectionManager = exports.HttpClientStream = exports.HttpStream = exports.HttpClientConnection = exports.HttpProxyOptions = exports.HttpProxyConnectionType = exports.HttpConnection = exports.HttpRequest = exports.HttpHeaders = exports.HttpProxyAuthenticationType = void 0;
    var binding_1 = __importDefault2(require_binding());
    var native_resource_1 = require_native_resource();
    var error_1 = require_error();
    var http_1 = require_http2();
    var http_2 = require_http2();
    Object.defineProperty(exports, "HttpProxyAuthenticationType", { enumerable: true, get: function() {
      return http_2.HttpProxyAuthenticationType;
    } });
    var event_1 = require_event();
    exports.HttpHeaders = binding_1.default.HttpHeaders;
    var nativeHttpRequest = binding_1.default.HttpRequest;
    var HttpRequest = class extends nativeHttpRequest {
      constructor(method, path20, headers, body) {
        super(method, path20, headers, body === null || body === void 0 ? void 0 : body.native_handle());
      }
    };
    exports.HttpRequest = HttpRequest;
    var HttpConnection = class extends (0, native_resource_1.NativeResourceMixin)(event_1.BufferedEventEmitter) {
      constructor(native_handle) {
        super();
        this._super(native_handle);
      }
      close() {
        binding_1.default.http_connection_close(this.native_handle());
      }
      on(event, listener) {
        super.on(event, listener);
        if (event == "connect") {
          process.nextTick(() => {
            this.uncork();
          });
        }
        return this;
      }
    };
    exports.HttpConnection = HttpConnection;
    HttpConnection.CONNECT = "connect";
    HttpConnection.ERROR = "error";
    HttpConnection.CLOSE = "close";
    var HttpProxyConnectionType;
    (function(HttpProxyConnectionType2) {
      HttpProxyConnectionType2[HttpProxyConnectionType2["Legacy"] = 0] = "Legacy";
      HttpProxyConnectionType2[HttpProxyConnectionType2["Forwarding"] = 1] = "Forwarding";
      HttpProxyConnectionType2[HttpProxyConnectionType2["Tunneling"] = 2] = "Tunneling";
    })(HttpProxyConnectionType = exports.HttpProxyConnectionType || (exports.HttpProxyConnectionType = {}));
    var HttpProxyOptions = class extends http_1.CommonHttpProxyOptions {
      constructor(host_name, port, auth_method = http_1.HttpProxyAuthenticationType.None, auth_username, auth_password, tls_opts, connection_type) {
        super(host_name, port, auth_method, auth_username, auth_password);
        this.tls_opts = tls_opts;
        this.connection_type = connection_type;
      }
      create_native_handle() {
        return binding_1.default.http_proxy_options_new(this.host_name, this.port, this.auth_method, this.auth_username, this.auth_password, this.tls_opts ? this.tls_opts.native_handle() : void 0, this.connection_type ? this.connection_type : HttpProxyConnectionType.Legacy);
      }
    };
    exports.HttpProxyOptions = HttpProxyOptions;
    var HttpClientConnection = class extends HttpConnection {
      constructor(bootstrap2, host_name, port, socket_options, tls_opts, proxy_options, handle) {
        super(handle ? handle : binding_1.default.http_connection_new(bootstrap2 != null ? bootstrap2.native_handle() : null, (handle2, error_code) => {
          this._on_setup(handle2, error_code);
        }, (handle2, error_code) => {
          this._on_shutdown(handle2, error_code);
        }, host_name, port, socket_options.native_handle(), tls_opts ? tls_opts.native_handle() : void 0, proxy_options ? proxy_options.create_native_handle() : void 0));
        this.bootstrap = bootstrap2;
        this.socket_options = socket_options;
        this.tls_opts = tls_opts;
      }
      _on_setup(native_handle, error_code) {
        if (error_code) {
          this.emit("error", new error_1.CrtError(error_code));
          return;
        }
        this.emit("connect");
      }
      _on_shutdown(native_handle, error_code) {
        if (error_code) {
          this.emit("error", new error_1.CrtError(error_code));
          return;
        }
        this.emit("close");
      }
      request(request) {
        let stream;
        const on_response_impl = (status_code, headers) => {
          stream._on_response(status_code, headers);
        };
        const on_body_impl = (data2) => {
          stream._on_body(data2);
        };
        const on_complete_impl = (error_code) => {
          stream._on_complete(error_code);
        };
        const native_handle = binding_1.default.http_stream_new(this.native_handle(), request, on_complete_impl, on_response_impl, on_body_impl);
        return stream = new HttpClientStream(native_handle, this, request);
      }
    };
    exports.HttpClientConnection = HttpClientConnection;
    var HttpStream = class extends (0, native_resource_1.NativeResourceMixin)(event_1.BufferedEventEmitter) {
      constructor(native_handle, connection) {
        super();
        this.connection = connection;
        this._super(native_handle);
        this.cork();
      }
      activate() {
        binding_1.default.http_stream_activate(this.native_handle());
      }
      close() {
        binding_1.default.http_stream_close(this.native_handle());
      }
      _on_body(data2) {
        this.emit("data", data2);
      }
      _on_complete(error_code) {
        if (error_code) {
          this.emit("error", new error_1.CrtError(error_code));
          this.close();
          return;
        }
        this.on("end", () => {
          this.close();
        });
        this.emit("end");
      }
    };
    exports.HttpStream = HttpStream;
    var HttpClientStream = class extends HttpStream {
      constructor(native_handle, connection, request) {
        super(native_handle, connection);
        this.request = request;
      }
      status_code() {
        return this.response_status_code;
      }
      on(event, listener) {
        super.on(event, listener);
        if (event == "response") {
          process.nextTick(() => {
            this.uncork();
          });
        }
        return this;
      }
      _on_response(status_code, header_array) {
        this.response_status_code = status_code;
        let headers = new exports.HttpHeaders(header_array);
        this.emit("response", status_code, headers);
      }
    };
    exports.HttpClientStream = HttpClientStream;
    HttpClientStream.RESPONSE = "response";
    HttpClientStream.DATA = "data";
    HttpClientStream.ERROR = "error";
    HttpClientStream.END = "end";
    HttpClientStream.HEADERS = "headers";
    var HttpClientConnectionManager = class extends native_resource_1.NativeResource {
      constructor(bootstrap2, host, port, max_connections, initial_window_size, socket_options, tls_opts, proxy_options) {
        super(binding_1.default.http_connection_manager_new(bootstrap2 != null ? bootstrap2.native_handle() : null, host, port, max_connections, initial_window_size, socket_options.native_handle(), tls_opts ? tls_opts.native_handle() : void 0, proxy_options ? proxy_options.create_native_handle() : void 0, void 0));
        this.bootstrap = bootstrap2;
        this.host = host;
        this.port = port;
        this.max_connections = max_connections;
        this.initial_window_size = initial_window_size;
        this.socket_options = socket_options;
        this.tls_opts = tls_opts;
        this.proxy_options = proxy_options;
        this.connections = /* @__PURE__ */ new Map();
      }
      acquire() {
        return new Promise((resolve, reject) => {
          const on_acquired = (handle, error_code) => {
            if (error_code) {
              reject(new error_1.CrtError(error_code));
              return;
            }
            let connection = this.connections.get(handle);
            if (!connection) {
              connection = new HttpClientConnection(this.bootstrap, this.host, this.port, this.socket_options, this.tls_opts, this.proxy_options, handle);
              this.connections.set(handle, connection);
              connection.on("close", () => {
                this.connections.delete(handle);
              });
            }
            resolve(connection);
          };
          binding_1.default.http_connection_manager_acquire(this.native_handle(), on_acquired);
        });
      }
      release(connection) {
        binding_1.default.http_connection_manager_release(this.native_handle(), connection.native_handle());
      }
      close() {
        binding_1.default.http_connection_manager_close(this.native_handle());
      }
    };
    exports.HttpClientConnectionManager = HttpClientConnectionManager;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/common/mqtt.js
var require_mqtt = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/common/mqtt.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DEFAULT_RECONNECT_MIN_SEC = exports.DEFAULT_RECONNECT_MAX_SEC = exports.MqttWill = exports.QoS = void 0;
    var QoS;
    (function(QoS2) {
      QoS2[QoS2["AtMostOnce"] = 0] = "AtMostOnce";
      QoS2[QoS2["AtLeastOnce"] = 1] = "AtLeastOnce";
      QoS2[QoS2["ExactlyOnce"] = 2] = "ExactlyOnce";
    })(QoS = exports.QoS || (exports.QoS = {}));
    var MqttWill = class {
      constructor(topic, qos, payload, retain = false) {
        this.topic = topic;
        this.qos = qos;
        this.payload = payload;
        this.retain = retain;
      }
    };
    exports.MqttWill = MqttWill;
    exports.DEFAULT_RECONNECT_MAX_SEC = 128;
    exports.DEFAULT_RECONNECT_MIN_SEC = 1;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/common/aws_iot_shared.js
var require_aws_iot_shared = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/common/aws_iot_shared.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.extractRegionFromEndpoint = exports.buildMqtt5FinalUsername = exports.populate_username_string_with_custom_authorizer = exports.is_string_and_not_empty = exports.add_to_username_parameter = void 0;
    var platform = __importStar2(require_platform());
    function add_to_username_parameter(current_username, parameter_value, parameter_pre_text) {
      let return_string = current_username;
      if (return_string.indexOf("?") != -1) {
        return_string += "&";
      } else {
        return_string += "?";
      }
      if (parameter_value.indexOf(parameter_pre_text) != -1) {
        return return_string + parameter_value;
      } else {
        return return_string + parameter_pre_text + parameter_value;
      }
    }
    exports.add_to_username_parameter = add_to_username_parameter;
    function is_string_and_not_empty(item) {
      return item != void 0 && typeof item == "string" && item != "";
    }
    exports.is_string_and_not_empty = is_string_and_not_empty;
    function populate_username_string_with_custom_authorizer(current_username, input_username, input_authorizer, input_signature, input_builder_username) {
      let username_string = "";
      if (current_username) {
        username_string += current_username;
      }
      if (is_string_and_not_empty(input_username) == false) {
        if (is_string_and_not_empty(input_builder_username) && input_builder_username) {
          username_string += input_builder_username;
        }
      } else {
        username_string += input_username;
      }
      if (is_string_and_not_empty(input_authorizer) && input_authorizer) {
        username_string = add_to_username_parameter(username_string, input_authorizer, "x-amz-customauthorizer-name=");
      }
      if (is_string_and_not_empty(input_signature) && input_signature) {
        username_string = add_to_username_parameter(username_string, input_signature, "x-amz-customauthorizer-signature=");
      }
      return username_string;
    }
    exports.populate_username_string_with_custom_authorizer = populate_username_string_with_custom_authorizer;
    function addParam(paramName, paramValue, paramSet) {
      if (paramValue) {
        paramSet.push([paramName, paramValue]);
      }
    }
    function buildMqtt5FinalUsername(customAuthConfig) {
      let path20 = "";
      let paramList = [];
      if (customAuthConfig) {
        let usingSigning = false;
        if (customAuthConfig.tokenValue || customAuthConfig.tokenKeyName || customAuthConfig.tokenSignature) {
          usingSigning = true;
          if (!customAuthConfig.tokenValue || !customAuthConfig.tokenKeyName || !customAuthConfig.tokenSignature) {
            throw new Error("Token-based custom authentication requires all token-related properties to be set");
          }
        }
        let username = customAuthConfig.username;
        let pathSplit = (username !== null && username !== void 0 ? username : "").split("?");
        let params = pathSplit.slice(1);
        path20 = pathSplit[0];
        if (params.length > 1) {
          throw new Error("Custom auth username property value is invalid");
        } else if (params.length == 1) {
          params[0].split("&").forEach((keyValue, index, array) => {
            var _a;
            let kvPair = keyValue.split("=");
            paramList.push([kvPair[0], (_a = kvPair[1]) !== null && _a !== void 0 ? _a : ""]);
          });
        }
        addParam("x-amz-customauthorizer-name", customAuthConfig.authorizerName, paramList);
        if (usingSigning) {
          addParam(customAuthConfig.tokenKeyName, customAuthConfig.tokenValue, paramList);
          addParam("x-amz-customauthorizer-signature", customAuthConfig.tokenSignature, paramList);
        }
      }
      paramList.push(["SDK", "NodeJSv2"]);
      paramList.push(["Version", platform.crt_version()]);
      return (path20 !== null && path20 !== void 0 ? path20 : "") + "?" + paramList.map((value) => `${value[0]}=${value[1]}`).join("&");
    }
    exports.buildMqtt5FinalUsername = buildMqtt5FinalUsername;
    function extractRegionFromEndpoint(endpoint) {
      const regexpRegion = /^[\w\-]+\.[\w\-]+\.([\w+\-]+)\./;
      const match = endpoint.match(regexpRegion);
      if (match) {
        return match[1];
      }
      throw new Error("AWS region could not be extracted from endpoint.  Use 'region' property on WebsocketConfig to set manually.");
    }
    exports.extractRegionFromEndpoint = extractRegionFromEndpoint;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/native/aws_iot.js
var require_aws_iot = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/native/aws_iot.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    var __awaiter2 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator2) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator2.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator2["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator2 = generator2.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AwsIotMqttConnectionConfigBuilder = void 0;
    var mqtt_1 = require_mqtt();
    var io = __importStar2(require_io2());
    var io_1 = require_io2();
    var platform = __importStar2(require_platform());
    var error_1 = require_error();
    var auth_1 = require_auth2();
    var iot_shared = __importStar2(require_aws_iot_shared());
    var AwsIotMqttConnectionConfigBuilder = class {
      constructor(tls_ctx_options) {
        this.tls_ctx_options = tls_ctx_options;
        this.params = {
          client_id: "",
          host_name: "",
          socket_options: new io.SocketOptions(),
          port: 8883,
          use_websocket: false,
          clean_session: false,
          keep_alive: void 0,
          will: void 0,
          username: "",
          password: void 0,
          tls_ctx: void 0,
          reconnect_min_sec: mqtt_1.DEFAULT_RECONNECT_MIN_SEC,
          reconnect_max_sec: mqtt_1.DEFAULT_RECONNECT_MAX_SEC
        };
        this.is_using_custom_authorizer = false;
      }
      static new_mtls_builder_from_path(cert_path, key_path) {
        let builder = new AwsIotMqttConnectionConfigBuilder(io_1.TlsContextOptions.create_client_with_mtls_from_path(cert_path, key_path));
        builder.params.port = 8883;
        if (io.is_alpn_available()) {
          builder.tls_ctx_options.alpn_list.unshift("x-amzn-mqtt-ca");
        }
        return builder;
      }
      static new_mtls_builder(cert, private_key) {
        let builder = new AwsIotMqttConnectionConfigBuilder(io_1.TlsContextOptions.create_client_with_mtls(cert, private_key));
        builder.params.port = 8883;
        if (io.is_alpn_available()) {
          builder.tls_ctx_options.alpn_list.unshift("x-amzn-mqtt-ca");
        }
        return builder;
      }
      static new_mtls_pkcs11_builder(pkcs11_options) {
        let builder = new AwsIotMqttConnectionConfigBuilder(io_1.TlsContextOptions.create_client_with_mtls_pkcs11(pkcs11_options));
        builder.params.port = 8883;
        if (io.is_alpn_available()) {
          builder.tls_ctx_options.alpn_list.unshift("x-amzn-mqtt-ca");
        }
        return builder;
      }
      static new_mtls_windows_cert_store_path_builder(certificate_path) {
        let builder = new AwsIotMqttConnectionConfigBuilder(io_1.TlsContextOptions.create_client_with_mtls_windows_cert_store_path(certificate_path));
        builder.params.port = 8883;
        if (io.is_alpn_available()) {
          builder.tls_ctx_options.alpn_list.unshift("x-amzn-mqtt-ca");
        }
        return builder;
      }
      static new_default_builder() {
        let ctx_options = new io.TlsContextOptions();
        let builder = new AwsIotMqttConnectionConfigBuilder(ctx_options);
        return builder;
      }
      static new_websocket_builder(...args) {
        return this.new_with_websockets(...args);
      }
      static configure_websocket_handshake(builder, options) {
        if (options) {
          builder.params.websocket_handshake_transform = (request, done) => __awaiter2(this, void 0, void 0, function* () {
            var _a, _b, _c;
            const signing_config = (_b = (_a = options.create_signing_config) === null || _a === void 0 ? void 0 : _a.call(options)) !== null && _b !== void 0 ? _b : {
              algorithm: auth_1.AwsSigningAlgorithm.SigV4,
              signature_type: auth_1.AwsSignatureType.HttpRequestViaQueryParams,
              provider: options.credentials_provider,
              region: options.region,
              service: (_c = options.service) !== null && _c !== void 0 ? _c : "iotdevicegateway",
              signed_body_value: auth_1.AwsSignedBodyValue.EmptySha256,
              omit_session_token: true
            };
            try {
              yield (0, auth_1.aws_sign_request)(request, signing_config);
              done();
            } catch (error2) {
              if (error2 instanceof error_1.CrtError) {
                done(error2.error_code);
              } else {
                done(3);
              }
            }
          });
        }
        return builder;
      }
      static new_with_websockets(options) {
        let tls_ctx_options = options === null || options === void 0 ? void 0 : options.tls_ctx_options;
        if (!tls_ctx_options) {
          tls_ctx_options = new io_1.TlsContextOptions();
          tls_ctx_options.alpn_list = [];
        }
        let builder = new AwsIotMqttConnectionConfigBuilder(tls_ctx_options);
        builder.params.use_websocket = true;
        builder.params.proxy_options = options === null || options === void 0 ? void 0 : options.proxy_options;
        if (builder.tls_ctx_options) {
          builder.params.port = 443;
        }
        this.configure_websocket_handshake(builder, options);
        return builder;
      }
      with_certificate_authority_from_path(ca_dirpath, ca_filepath) {
        this.tls_ctx_options.override_default_trust_store_from_path(ca_dirpath, ca_filepath);
        return this;
      }
      with_certificate_authority(ca) {
        this.tls_ctx_options.override_default_trust_store(ca);
        return this;
      }
      with_endpoint(endpoint) {
        this.params.host_name = endpoint;
        return this;
      }
      with_port(port) {
        this.params.port = port;
        return this;
      }
      with_client_id(client_id) {
        this.params.client_id = client_id;
        return this;
      }
      with_clean_session(clean_session) {
        this.params.clean_session = clean_session;
        return this;
      }
      with_keep_alive_seconds(keep_alive) {
        this.params.keep_alive = keep_alive;
        return this;
      }
      with_timeout_ms(timeout_ms) {
        this.with_ping_timeout_ms(timeout_ms);
        return this;
      }
      with_ping_timeout_ms(ping_timeout) {
        this.params.ping_timeout = ping_timeout;
        return this;
      }
      with_protocol_operation_timeout_ms(protocol_operation_timeout) {
        this.params.protocol_operation_timeout = protocol_operation_timeout;
        return this;
      }
      with_will(will) {
        this.params.will = will;
        return this;
      }
      with_socket_options(socket_options) {
        this.params.socket_options = socket_options;
        return this;
      }
      with_credentials(aws_region, aws_access_id, aws_secret_key, aws_sts_token) {
        return AwsIotMqttConnectionConfigBuilder.configure_websocket_handshake(this, {
          credentials_provider: auth_1.AwsCredentialsProvider.newStatic(aws_access_id, aws_secret_key, aws_sts_token),
          region: aws_region,
          service: "iotdevicegateway"
        });
      }
      with_http_proxy_options(proxy_options) {
        this.params.proxy_options = proxy_options;
        return this;
      }
      with_custom_authorizer(username, authorizer_name, authorizer_signature, password) {
        this.is_using_custom_authorizer = true;
        let username_string = iot_shared.populate_username_string_with_custom_authorizer("", username, authorizer_name, authorizer_signature, this.params.username);
        this.params.username = username_string;
        this.params.password = password;
        if (!this.params.use_websocket) {
          this.tls_ctx_options.alpn_list = ["mqtt"];
        }
        this.params.port = 443;
        return this;
      }
      with_username(username) {
        this.params.username = username;
        return this;
      }
      with_password(password) {
        this.params.password = password;
        return this;
      }
      with_reconnect_max_sec(max_sec) {
        this.params.reconnect_max_sec = max_sec;
        return this;
      }
      with_reconnect_min_sec(min_sec) {
        this.params.reconnect_min_sec = min_sec;
        return this;
      }
      build() {
        var _a, _b, _c;
        if (this.params.client_id === void 0 || this.params.host_name === void 0) {
          throw "client_id and endpoint are required";
        }
        if (this.is_using_custom_authorizer == false) {
          if (iot_shared.is_string_and_not_empty(this.params.username)) {
            if (((_a = this.params.username) === null || _a === void 0 ? void 0 : _a.indexOf("x-amz-customauthorizer-name=")) != -1 || ((_b = this.params.username) === null || _b === void 0 ? void 0 : _b.indexOf("x-amz-customauthorizer-signature=")) != -1) {
              this.is_using_custom_authorizer = true;
            }
          }
        }
        if (this.is_using_custom_authorizer == true) {
          if (this.params.port != 443) {
            console.log("Warning: Attempting to connect to authorizer with unsupported port. Port is not 443...");
          }
        }
        if (this.params.tls_ctx === void 0) {
          this.params.tls_ctx = new io.ClientTlsContext(this.tls_ctx_options);
        }
        if (iot_shared.is_string_and_not_empty(this.params.username) == false) {
          this.params.username = "?SDK=NodeJSv2&Version=";
        } else {
          if (((_c = this.params.username) === null || _c === void 0 ? void 0 : _c.indexOf("?")) != -1) {
            this.params.username += "&SDK=NodeJSv2&Version=";
          } else {
            this.params.username += "?SDK=NodeJSv2&Version=";
          }
        }
        this.params.username += platform.crt_version();
        return this.params;
      }
    };
    exports.AwsIotMqttConnectionConfigBuilder = AwsIotMqttConnectionConfigBuilder;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/common/mqtt_shared.js
var require_mqtt_shared = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/common/mqtt_shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DEFAULT_KEEP_ALIVE = exports.normalize_payload = void 0;
    function normalize_payload(payload) {
      if (payload instanceof Buffer) {
        return payload;
      }
      if (typeof payload === "string") {
        return payload;
      }
      if (ArrayBuffer.isView(payload)) {
        const view = payload;
        return Buffer.from(view.buffer, view.byteOffset, view.byteLength);
      }
      if (payload instanceof ArrayBuffer) {
        return Buffer.from(payload);
      }
      if (typeof payload === "object") {
        return JSON.stringify(payload);
      }
      if (!payload) {
        return "";
      }
      throw new TypeError("payload parameter must be a string, object, or DataView.");
    }
    exports.normalize_payload = normalize_payload;
    exports.DEFAULT_KEEP_ALIVE = 1200;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/common/mqtt5.js
var require_mqtt5 = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/common/mqtt5.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RetryJitterType = exports.ClientSessionBehavior = void 0;
    var ClientSessionBehavior;
    (function(ClientSessionBehavior2) {
      ClientSessionBehavior2[ClientSessionBehavior2["Default"] = 0] = "Default";
      ClientSessionBehavior2[ClientSessionBehavior2["Clean"] = 1] = "Clean";
      ClientSessionBehavior2[ClientSessionBehavior2["RejoinPostSuccess"] = 2] = "RejoinPostSuccess";
      ClientSessionBehavior2[ClientSessionBehavior2["RejoinAlways"] = 3] = "RejoinAlways";
    })(ClientSessionBehavior = exports.ClientSessionBehavior || (exports.ClientSessionBehavior = {}));
    var RetryJitterType;
    (function(RetryJitterType2) {
      RetryJitterType2[RetryJitterType2["Default"] = 0] = "Default";
      RetryJitterType2[RetryJitterType2["None"] = 1] = "None";
      RetryJitterType2[RetryJitterType2["Full"] = 2] = "Full";
      RetryJitterType2[RetryJitterType2["Decorrelated"] = 3] = "Decorrelated";
    })(RetryJitterType = exports.RetryJitterType || (exports.RetryJitterType = {}));
  }
});

// ../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/common/mqtt5_packet.js
var require_mqtt5_packet = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/common/mqtt5_packet.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PacketType = exports.RetainHandlingType = exports.QoS = exports.PayloadFormatIndicator = exports.isSuccessfulPubackReasonCode = exports.PubackReasonCode = exports.isSuccessfulUnsubackReasonCode = exports.UnsubackReasonCode = exports.isSuccessfulSubackReasonCode = exports.SubackReasonCode = exports.isSuccessfulDisconnectReasonCode = exports.DisconnectReasonCode = exports.isSuccessfulConnectReasonCode = exports.ConnectReasonCode = void 0;
    var ConnectReasonCode;
    (function(ConnectReasonCode2) {
      ConnectReasonCode2[ConnectReasonCode2["Success"] = 0] = "Success";
      ConnectReasonCode2[ConnectReasonCode2["UnspecifiedError"] = 128] = "UnspecifiedError";
      ConnectReasonCode2[ConnectReasonCode2["MalformedPacket"] = 129] = "MalformedPacket";
      ConnectReasonCode2[ConnectReasonCode2["ProtocolError"] = 130] = "ProtocolError";
      ConnectReasonCode2[ConnectReasonCode2["ImplementationSpecificError"] = 131] = "ImplementationSpecificError";
      ConnectReasonCode2[ConnectReasonCode2["UnsupportedProtocolVersion"] = 132] = "UnsupportedProtocolVersion";
      ConnectReasonCode2[ConnectReasonCode2["ClientIdentifierNotValid"] = 133] = "ClientIdentifierNotValid";
      ConnectReasonCode2[ConnectReasonCode2["BadUsernameOrPassword"] = 134] = "BadUsernameOrPassword";
      ConnectReasonCode2[ConnectReasonCode2["NotAuthorized"] = 135] = "NotAuthorized";
      ConnectReasonCode2[ConnectReasonCode2["ServerUnavailable"] = 136] = "ServerUnavailable";
      ConnectReasonCode2[ConnectReasonCode2["ServerBusy"] = 137] = "ServerBusy";
      ConnectReasonCode2[ConnectReasonCode2["Banned"] = 138] = "Banned";
      ConnectReasonCode2[ConnectReasonCode2["BadAuthenticationMethod"] = 140] = "BadAuthenticationMethod";
      ConnectReasonCode2[ConnectReasonCode2["TopicNameInvalid"] = 144] = "TopicNameInvalid";
      ConnectReasonCode2[ConnectReasonCode2["PacketTooLarge"] = 149] = "PacketTooLarge";
      ConnectReasonCode2[ConnectReasonCode2["QuotaExceeded"] = 151] = "QuotaExceeded";
      ConnectReasonCode2[ConnectReasonCode2["PayloadFormatInvalid"] = 153] = "PayloadFormatInvalid";
      ConnectReasonCode2[ConnectReasonCode2["RetainNotSupported"] = 154] = "RetainNotSupported";
      ConnectReasonCode2[ConnectReasonCode2["QosNotSupported"] = 155] = "QosNotSupported";
      ConnectReasonCode2[ConnectReasonCode2["UseAnotherServer"] = 156] = "UseAnotherServer";
      ConnectReasonCode2[ConnectReasonCode2["ServerMoved"] = 157] = "ServerMoved";
      ConnectReasonCode2[ConnectReasonCode2["ConnectionRateExceeded"] = 159] = "ConnectionRateExceeded";
    })(ConnectReasonCode = exports.ConnectReasonCode || (exports.ConnectReasonCode = {}));
    function isSuccessfulConnectReasonCode(reasonCode) {
      return reasonCode < 128;
    }
    exports.isSuccessfulConnectReasonCode = isSuccessfulConnectReasonCode;
    var DisconnectReasonCode;
    (function(DisconnectReasonCode2) {
      DisconnectReasonCode2[DisconnectReasonCode2["NormalDisconnection"] = 0] = "NormalDisconnection";
      DisconnectReasonCode2[DisconnectReasonCode2["DisconnectWithWillMessage"] = 4] = "DisconnectWithWillMessage";
      DisconnectReasonCode2[DisconnectReasonCode2["UnspecifiedError"] = 128] = "UnspecifiedError";
      DisconnectReasonCode2[DisconnectReasonCode2["MalformedPacket"] = 129] = "MalformedPacket";
      DisconnectReasonCode2[DisconnectReasonCode2["ProtocolError"] = 130] = "ProtocolError";
      DisconnectReasonCode2[DisconnectReasonCode2["ImplementationSpecificError"] = 131] = "ImplementationSpecificError";
      DisconnectReasonCode2[DisconnectReasonCode2["NotAuthorized"] = 135] = "NotAuthorized";
      DisconnectReasonCode2[DisconnectReasonCode2["ServerBusy"] = 137] = "ServerBusy";
      DisconnectReasonCode2[DisconnectReasonCode2["ServerShuttingDown"] = 139] = "ServerShuttingDown";
      DisconnectReasonCode2[DisconnectReasonCode2["KeepAliveTimeout"] = 141] = "KeepAliveTimeout";
      DisconnectReasonCode2[DisconnectReasonCode2["SessionTakenOver"] = 142] = "SessionTakenOver";
      DisconnectReasonCode2[DisconnectReasonCode2["TopicFilterInvalid"] = 143] = "TopicFilterInvalid";
      DisconnectReasonCode2[DisconnectReasonCode2["TopicNameInvalid"] = 144] = "TopicNameInvalid";
      DisconnectReasonCode2[DisconnectReasonCode2["ReceiveMaximumExceeded"] = 147] = "ReceiveMaximumExceeded";
      DisconnectReasonCode2[DisconnectReasonCode2["TopicAliasInvalid"] = 148] = "TopicAliasInvalid";
      DisconnectReasonCode2[DisconnectReasonCode2["PacketTooLarge"] = 149] = "PacketTooLarge";
      DisconnectReasonCode2[DisconnectReasonCode2["MessageRateTooHigh"] = 150] = "MessageRateTooHigh";
      DisconnectReasonCode2[DisconnectReasonCode2["QuotaExceeded"] = 151] = "QuotaExceeded";
      DisconnectReasonCode2[DisconnectReasonCode2["AdministrativeAction"] = 152] = "AdministrativeAction";
      DisconnectReasonCode2[DisconnectReasonCode2["PayloadFormatInvalid"] = 153] = "PayloadFormatInvalid";
      DisconnectReasonCode2[DisconnectReasonCode2["RetainNotSupported"] = 154] = "RetainNotSupported";
      DisconnectReasonCode2[DisconnectReasonCode2["QosNotSupported"] = 155] = "QosNotSupported";
      DisconnectReasonCode2[DisconnectReasonCode2["UseAnotherServer"] = 156] = "UseAnotherServer";
      DisconnectReasonCode2[DisconnectReasonCode2["ServerMoved"] = 157] = "ServerMoved";
      DisconnectReasonCode2[DisconnectReasonCode2["SharedSubscriptionsNotSupported"] = 158] = "SharedSubscriptionsNotSupported";
      DisconnectReasonCode2[DisconnectReasonCode2["ConnectionRateExceeded"] = 159] = "ConnectionRateExceeded";
      DisconnectReasonCode2[DisconnectReasonCode2["MaximumConnectTime"] = 160] = "MaximumConnectTime";
      DisconnectReasonCode2[DisconnectReasonCode2["SubscriptionIdentifiersNotSupported"] = 161] = "SubscriptionIdentifiersNotSupported";
      DisconnectReasonCode2[DisconnectReasonCode2["WildcardSubscriptionsNotSupported"] = 162] = "WildcardSubscriptionsNotSupported";
    })(DisconnectReasonCode = exports.DisconnectReasonCode || (exports.DisconnectReasonCode = {}));
    function isSuccessfulDisconnectReasonCode(reasonCode) {
      return reasonCode < 128;
    }
    exports.isSuccessfulDisconnectReasonCode = isSuccessfulDisconnectReasonCode;
    var SubackReasonCode;
    (function(SubackReasonCode2) {
      SubackReasonCode2[SubackReasonCode2["GrantedQoS0"] = 0] = "GrantedQoS0";
      SubackReasonCode2[SubackReasonCode2["GrantedQoS1"] = 1] = "GrantedQoS1";
      SubackReasonCode2[SubackReasonCode2["GrantedQoS2"] = 2] = "GrantedQoS2";
      SubackReasonCode2[SubackReasonCode2["UnspecifiedError"] = 128] = "UnspecifiedError";
      SubackReasonCode2[SubackReasonCode2["ImplementationSpecificError"] = 131] = "ImplementationSpecificError";
      SubackReasonCode2[SubackReasonCode2["NotAuthorized"] = 135] = "NotAuthorized";
      SubackReasonCode2[SubackReasonCode2["TopicFilterInvalid"] = 143] = "TopicFilterInvalid";
      SubackReasonCode2[SubackReasonCode2["PacketIdentifierInUse"] = 145] = "PacketIdentifierInUse";
      SubackReasonCode2[SubackReasonCode2["QuotaExceeded"] = 151] = "QuotaExceeded";
      SubackReasonCode2[SubackReasonCode2["SharedSubscriptionsNotSupported"] = 158] = "SharedSubscriptionsNotSupported";
      SubackReasonCode2[SubackReasonCode2["SubscriptionIdentifiersNotSupported"] = 161] = "SubscriptionIdentifiersNotSupported";
      SubackReasonCode2[SubackReasonCode2["WildcardSubscriptionsNotSupported"] = 162] = "WildcardSubscriptionsNotSupported";
    })(SubackReasonCode = exports.SubackReasonCode || (exports.SubackReasonCode = {}));
    function isSuccessfulSubackReasonCode(reasonCode) {
      return reasonCode < 128;
    }
    exports.isSuccessfulSubackReasonCode = isSuccessfulSubackReasonCode;
    var UnsubackReasonCode;
    (function(UnsubackReasonCode2) {
      UnsubackReasonCode2[UnsubackReasonCode2["Success"] = 0] = "Success";
      UnsubackReasonCode2[UnsubackReasonCode2["NoSubscriptionExisted"] = 17] = "NoSubscriptionExisted";
      UnsubackReasonCode2[UnsubackReasonCode2["UnspecifiedError"] = 128] = "UnspecifiedError";
      UnsubackReasonCode2[UnsubackReasonCode2["ImplementationSpecificError"] = 131] = "ImplementationSpecificError";
      UnsubackReasonCode2[UnsubackReasonCode2["NotAuthorized"] = 135] = "NotAuthorized";
      UnsubackReasonCode2[UnsubackReasonCode2["TopicFilterInvalid"] = 143] = "TopicFilterInvalid";
      UnsubackReasonCode2[UnsubackReasonCode2["PacketIdentifierInUse"] = 145] = "PacketIdentifierInUse";
    })(UnsubackReasonCode = exports.UnsubackReasonCode || (exports.UnsubackReasonCode = {}));
    function isSuccessfulUnsubackReasonCode(reasonCode) {
      return reasonCode < 128;
    }
    exports.isSuccessfulUnsubackReasonCode = isSuccessfulUnsubackReasonCode;
    var PubackReasonCode;
    (function(PubackReasonCode2) {
      PubackReasonCode2[PubackReasonCode2["Success"] = 0] = "Success";
      PubackReasonCode2[PubackReasonCode2["NoMatchingSubscribers"] = 16] = "NoMatchingSubscribers";
      PubackReasonCode2[PubackReasonCode2["UnspecifiedError"] = 128] = "UnspecifiedError";
      PubackReasonCode2[PubackReasonCode2["ImplementationSpecificError"] = 131] = "ImplementationSpecificError";
      PubackReasonCode2[PubackReasonCode2["NotAuthorized"] = 135] = "NotAuthorized";
      PubackReasonCode2[PubackReasonCode2["TopicNameInvalid"] = 144] = "TopicNameInvalid";
      PubackReasonCode2[PubackReasonCode2["PacketIdentifierInUse"] = 145] = "PacketIdentifierInUse";
      PubackReasonCode2[PubackReasonCode2["QuotaExceeded"] = 151] = "QuotaExceeded";
      PubackReasonCode2[PubackReasonCode2["PayloadFormatInvalid"] = 153] = "PayloadFormatInvalid";
    })(PubackReasonCode = exports.PubackReasonCode || (exports.PubackReasonCode = {}));
    function isSuccessfulPubackReasonCode(reasonCode) {
      return reasonCode < 128;
    }
    exports.isSuccessfulPubackReasonCode = isSuccessfulPubackReasonCode;
    var PayloadFormatIndicator;
    (function(PayloadFormatIndicator2) {
      PayloadFormatIndicator2[PayloadFormatIndicator2["Bytes"] = 0] = "Bytes";
      PayloadFormatIndicator2[PayloadFormatIndicator2["Utf8"] = 1] = "Utf8";
    })(PayloadFormatIndicator = exports.PayloadFormatIndicator || (exports.PayloadFormatIndicator = {}));
    var QoS;
    (function(QoS2) {
      QoS2[QoS2["AtMostOnce"] = 0] = "AtMostOnce";
      QoS2[QoS2["AtLeastOnce"] = 1] = "AtLeastOnce";
      QoS2[QoS2["ExactlyOnce"] = 2] = "ExactlyOnce";
    })(QoS = exports.QoS || (exports.QoS = {}));
    var RetainHandlingType;
    (function(RetainHandlingType2) {
      RetainHandlingType2[RetainHandlingType2["SendOnSubscribe"] = 0] = "SendOnSubscribe";
      RetainHandlingType2[RetainHandlingType2["SendOnSubscribeIfNew"] = 1] = "SendOnSubscribeIfNew";
      RetainHandlingType2[RetainHandlingType2["DontSend"] = 2] = "DontSend";
    })(RetainHandlingType = exports.RetainHandlingType || (exports.RetainHandlingType = {}));
    var PacketType;
    (function(PacketType2) {
      PacketType2[PacketType2["Connect"] = 1] = "Connect";
      PacketType2[PacketType2["Connack"] = 2] = "Connack";
      PacketType2[PacketType2["Publish"] = 3] = "Publish";
      PacketType2[PacketType2["Puback"] = 4] = "Puback";
      PacketType2[PacketType2["Pubrec"] = 5] = "Pubrec";
      PacketType2[PacketType2["Pubrel"] = 6] = "Pubrel";
      PacketType2[PacketType2["Pubcomp"] = 7] = "Pubcomp";
      PacketType2[PacketType2["Subscribe"] = 8] = "Subscribe";
      PacketType2[PacketType2["Suback"] = 9] = "Suback";
      PacketType2[PacketType2["Unsubscribe"] = 10] = "Unsubscribe";
      PacketType2[PacketType2["Unsuback"] = 11] = "Unsuback";
      PacketType2[PacketType2["Pingreq"] = 12] = "Pingreq";
      PacketType2[PacketType2["Pingresp"] = 13] = "Pingresp";
      PacketType2[PacketType2["Disconnect"] = 14] = "Disconnect";
      PacketType2[PacketType2["Auth"] = 15] = "Auth";
    })(PacketType = exports.PacketType || (exports.PacketType = {}));
  }
});

// ../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/native/mqtt5.js
var require_mqtt52 = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/native/mqtt5.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding2(exports2, m, p);
    };
    var __awaiter2 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator2) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator2.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator2["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator2 = generator2.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Mqtt5Client = exports.ClientExtendedValidationAndFlowControl = exports.ClientOperationQueueBehavior = exports.HttpProxyOptions = void 0;
    var binding_1 = __importDefault2(require_binding());
    var native_resource_1 = require_native_resource();
    var event_1 = require_event();
    var io = __importStar2(require_io2());
    var mqtt_shared = __importStar2(require_mqtt_shared());
    var error_1 = require_error();
    var http_1 = require_http3();
    Object.defineProperty(exports, "HttpProxyOptions", { enumerable: true, get: function() {
      return http_1.HttpProxyOptions;
    } });
    __exportStar2(require_mqtt5(), exports);
    __exportStar2(require_mqtt5_packet(), exports);
    var ClientOperationQueueBehavior;
    (function(ClientOperationQueueBehavior2) {
      ClientOperationQueueBehavior2[ClientOperationQueueBehavior2["Default"] = 0] = "Default";
      ClientOperationQueueBehavior2[ClientOperationQueueBehavior2["FailNonQos1PublishOnDisconnect"] = 1] = "FailNonQos1PublishOnDisconnect";
      ClientOperationQueueBehavior2[ClientOperationQueueBehavior2["FailQos0PublishOnDisconnect"] = 2] = "FailQos0PublishOnDisconnect";
      ClientOperationQueueBehavior2[ClientOperationQueueBehavior2["FailAllOnDisconnect"] = 3] = "FailAllOnDisconnect";
    })(ClientOperationQueueBehavior = exports.ClientOperationQueueBehavior || (exports.ClientOperationQueueBehavior = {}));
    var ClientExtendedValidationAndFlowControl;
    (function(ClientExtendedValidationAndFlowControl2) {
      ClientExtendedValidationAndFlowControl2[ClientExtendedValidationAndFlowControl2["None"] = 0] = "None";
      ClientExtendedValidationAndFlowControl2[ClientExtendedValidationAndFlowControl2["AwsIotCoreDefaults"] = 1] = "AwsIotCoreDefaults";
    })(ClientExtendedValidationAndFlowControl = exports.ClientExtendedValidationAndFlowControl || (exports.ClientExtendedValidationAndFlowControl = {}));
    var Mqtt5Client = class extends (0, native_resource_1.NativeResourceMixin)(event_1.BufferedEventEmitter) {
      constructor(config) {
        super();
        this._super(binding_1.default.mqtt5_client_new(this, config, (client) => {
          Mqtt5Client._s_on_stopped(client);
        }, (client) => {
          Mqtt5Client._s_on_attempting_connect(client);
        }, (client, connack, settings) => {
          Mqtt5Client._s_on_connection_success(client, connack, settings);
        }, (client, errorCode, connack) => {
          Mqtt5Client._s_on_connection_failure(client, new error_1.CrtError(errorCode), connack);
        }, (client, errorCode, disconnect) => {
          Mqtt5Client._s_on_disconnection(client, new error_1.CrtError(errorCode), disconnect);
        }, (client, message) => {
          Mqtt5Client._s_on_message_received(client, message);
        }, config.clientBootstrap ? config.clientBootstrap.native_handle() : null, config.socketOptions ? config.socketOptions.native_handle() : null, config.tlsCtx ? config.tlsCtx.native_handle() : null, config.httpProxyOptions ? config.httpProxyOptions.create_native_handle() : null));
      }
      close() {
        binding_1.default.mqtt5_client_close(this.native_handle());
      }
      start() {
        binding_1.default.mqtt5_client_start(this.native_handle());
      }
      stop(disconnectPacket) {
        binding_1.default.mqtt5_client_stop(this.native_handle(), disconnectPacket);
      }
      subscribe(packet) {
        return __awaiter2(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => {
            function curriedPromiseCallback(client, errorCode, suback) {
              return Mqtt5Client._s_on_suback_callback(resolve, reject, client, errorCode, suback);
            }
            try {
              binding_1.default.mqtt5_client_subscribe(this.native_handle(), packet, curriedPromiseCallback);
            } catch (e) {
              reject(e);
            }
          });
        });
      }
      unsubscribe(packet) {
        return __awaiter2(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => {
            function curriedPromiseCallback(client, errorCode, unsuback) {
              return Mqtt5Client._s_on_unsuback_callback(resolve, reject, client, errorCode, unsuback);
            }
            try {
              binding_1.default.mqtt5_client_unsubscribe(this.native_handle(), packet, curriedPromiseCallback);
            } catch (e) {
              reject(e);
            }
          });
        });
      }
      publish(packet) {
        return __awaiter2(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => {
            if (packet && packet.payload) {
              packet.payload = mqtt_shared.normalize_payload(packet.payload);
            }
            function curriedPromiseCallback(client, errorCode, result) {
              return Mqtt5Client._s_on_puback_callback(resolve, reject, client, errorCode, result);
            }
            try {
              binding_1.default.mqtt5_client_publish(this.native_handle(), packet, curriedPromiseCallback);
            } catch (e) {
              reject(e);
            }
          });
        });
      }
      getQueueStatistics() {
        return binding_1.default.mqtt5_client_get_queue_statistics(this.native_handle());
      }
      on(event, listener) {
        super.on(event, listener);
        return this;
      }
      static _s_on_stopped(client) {
        process.nextTick(() => {
          let stoppedEvent = {};
          client.emit(Mqtt5Client.STOPPED, stoppedEvent);
        });
      }
      static _s_on_attempting_connect(client) {
        process.nextTick(() => {
          let attemptingConnectEvent = {};
          client.emit(Mqtt5Client.ATTEMPTING_CONNECT, attemptingConnectEvent);
        });
      }
      static _s_on_connection_success(client, connack, settings) {
        let connectionSuccessEvent = {
          connack,
          settings
        };
        process.nextTick(() => {
          client.emit(Mqtt5Client.CONNECTION_SUCCESS, connectionSuccessEvent);
        });
      }
      static _s_on_connection_failure(client, error2, connack) {
        let connectionFailureEvent = {
          error: error2
        };
        if (connack !== null && connack !== void 0) {
          connectionFailureEvent.connack = connack;
        }
        process.nextTick(() => {
          client.emit(Mqtt5Client.CONNECTION_FAILURE, connectionFailureEvent);
        });
      }
      static _s_on_disconnection(client, error2, disconnect) {
        let disconnectionEvent = {
          error: error2
        };
        if (disconnect !== null && disconnect !== void 0) {
          disconnectionEvent.disconnect = disconnect;
        }
        process.nextTick(() => {
          client.emit(Mqtt5Client.DISCONNECTION, disconnectionEvent);
        });
      }
      static _s_on_suback_callback(resolve, reject, client, errorCode, suback) {
        if (errorCode == 0 && suback !== void 0) {
          resolve(suback);
        } else {
          reject(io.error_code_to_string(errorCode));
        }
      }
      static _s_on_unsuback_callback(resolve, reject, client, errorCode, unsuback) {
        if (errorCode == 0 && unsuback !== void 0) {
          resolve(unsuback);
        } else {
          reject(io.error_code_to_string(errorCode));
        }
      }
      static _s_on_puback_callback(resolve, reject, client, errorCode, result) {
        if (errorCode == 0) {
          resolve(result);
        } else {
          reject(io.error_code_to_string(errorCode));
        }
      }
      static _s_on_message_received(client, message) {
        let messageReceivedEvent = {
          message
        };
        process.nextTick(() => {
          client.emit(Mqtt5Client.MESSAGE_RECEIVED, messageReceivedEvent);
        });
      }
    };
    exports.Mqtt5Client = Mqtt5Client;
    Mqtt5Client.ERROR = "error";
    Mqtt5Client.MESSAGE_RECEIVED = "messageReceived";
    Mqtt5Client.ATTEMPTING_CONNECT = "attemptingConnect";
    Mqtt5Client.CONNECTION_SUCCESS = "connectionSuccess";
    Mqtt5Client.CONNECTION_FAILURE = "connectionFailure";
    Mqtt5Client.DISCONNECTION = "disconnection";
    Mqtt5Client.STOPPED = "stopped";
  }
});

// ../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/native/aws_iot_mqtt5.js
var require_aws_iot_mqtt5 = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/native/aws_iot_mqtt5.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    var __awaiter2 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator2) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator2.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator2["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator2 = generator2.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AwsIotMqtt5ClientConfigBuilder = void 0;
    var mqtt5 = __importStar2(require_mqtt52());
    var io = __importStar2(require_io2());
    var auth = __importStar2(require_auth2());
    var error_1 = require_error();
    var iot_shared = __importStar2(require_aws_iot_shared());
    var mqtt_shared = __importStar2(require_mqtt_shared());
    var AwsIotMqtt5ClientConfigBuilder = class {
      constructor(hostName, port, tlsContextOptions) {
        this.tlsContextOptions = tlsContextOptions;
        this.config = {
          hostName,
          port,
          connectProperties: {
            keepAliveIntervalSeconds: mqtt_shared.DEFAULT_KEEP_ALIVE
          },
          extendedValidationAndFlowControlOptions: mqtt5.ClientExtendedValidationAndFlowControl.AwsIotCoreDefaults
        };
      }
      static newDirectMqttBuilderWithMtlsFromPath(hostName, certPath, keyPath) {
        let builder = new AwsIotMqtt5ClientConfigBuilder(hostName, AwsIotMqtt5ClientConfigBuilder.DEFAULT_DIRECT_MQTT_PORT, io.TlsContextOptions.create_client_with_mtls_from_path(certPath, keyPath));
        if (io.is_alpn_available()) {
          builder.tlsContextOptions.alpn_list.unshift("x-amzn-mqtt-ca");
        }
        return builder;
      }
      static newDirectMqttBuilderWithMtlsFromMemory(hostName, cert, privateKey) {
        let builder = new AwsIotMqtt5ClientConfigBuilder(hostName, AwsIotMqtt5ClientConfigBuilder.DEFAULT_DIRECT_MQTT_PORT, io.TlsContextOptions.create_client_with_mtls(cert, privateKey));
        if (io.is_alpn_available()) {
          builder.tlsContextOptions.alpn_list.unshift("x-amzn-mqtt-ca");
        }
        return builder;
      }
      static newDirectMqttBuilderWithMtlsFromPkcs11(hostName, pkcs11Options) {
        let builder = new AwsIotMqtt5ClientConfigBuilder(hostName, AwsIotMqtt5ClientConfigBuilder.DEFAULT_DIRECT_MQTT_PORT, io.TlsContextOptions.create_client_with_mtls_pkcs11(pkcs11Options));
        if (io.is_alpn_available()) {
          builder.tlsContextOptions.alpn_list.unshift("x-amzn-mqtt-ca");
        }
        return builder;
      }
      static newDirectMqttBuilderWithMtlsFromWindowsCertStorePath(hostName, certificatePath) {
        let builder = new AwsIotMqtt5ClientConfigBuilder(hostName, AwsIotMqtt5ClientConfigBuilder.DEFAULT_DIRECT_MQTT_PORT, io.TlsContextOptions.create_client_with_mtls_windows_cert_store_path(certificatePath));
        if (io.is_alpn_available()) {
          builder.tlsContextOptions.alpn_list.unshift("x-amzn-mqtt-ca");
        }
        return builder;
      }
      static newDirectMqttBuilderWithCustomAuth(hostName, customAuthConfig) {
        let builder = new AwsIotMqtt5ClientConfigBuilder(hostName, AwsIotMqtt5ClientConfigBuilder.DEFAULT_WEBSOCKET_MQTT_PORT, new io.TlsContextOptions());
        builder.customAuthConfig = customAuthConfig;
        builder.tlsContextOptions.alpn_list = ["mqtt"];
        return builder;
      }
      static newWebsocketMqttBuilderWithSigv4Auth(hostName, options) {
        let tlsContextOptions = new io.TlsContextOptions();
        tlsContextOptions.alpn_list = [];
        let builder = new AwsIotMqtt5ClientConfigBuilder(hostName, AwsIotMqtt5ClientConfigBuilder.DEFAULT_WEBSOCKET_MQTT_PORT, tlsContextOptions);
        let credentialsProvider = options === null || options === void 0 ? void 0 : options.credentialsProvider;
        if (!credentialsProvider) {
          credentialsProvider = auth.AwsCredentialsProvider.newDefault();
        }
        builder.config.websocketHandshakeTransform = (request, done) => __awaiter2(this, void 0, void 0, function* () {
          var _a;
          try {
            const signingConfig = {
              algorithm: auth.AwsSigningAlgorithm.SigV4,
              signature_type: auth.AwsSignatureType.HttpRequestViaQueryParams,
              provider: credentialsProvider,
              region: (_a = options === null || options === void 0 ? void 0 : options.region) !== null && _a !== void 0 ? _a : iot_shared.extractRegionFromEndpoint(hostName),
              service: "iotdevicegateway",
              signed_body_value: auth.AwsSignedBodyValue.EmptySha256,
              omit_session_token: true
            };
            yield auth.aws_sign_request(request, signingConfig);
            done();
          } catch (error2) {
            if (error2 instanceof error_1.CrtError) {
              done(error2.error_code);
            } else {
              done(3);
            }
          }
        });
        return builder;
      }
      static newWebsocketMqttBuilderWithCustomAuth(hostName, customAuthConfig) {
        let builder = new AwsIotMqtt5ClientConfigBuilder(hostName, AwsIotMqtt5ClientConfigBuilder.DEFAULT_WEBSOCKET_MQTT_PORT, new io.TlsContextOptions());
        builder.customAuthConfig = customAuthConfig;
        builder.config.websocketHandshakeTransform = (request, done) => __awaiter2(this, void 0, void 0, function* () {
          done(0);
        });
        return builder;
      }
      withCertificateAuthorityFromPath(caDirpath, caFilepath) {
        this.tlsContextOptions.override_default_trust_store_from_path(caDirpath, caFilepath);
        return this;
      }
      withCertificateAuthority(ca) {
        this.tlsContextOptions.override_default_trust_store(ca);
        return this;
      }
      withPort(port) {
        this.config.port = port;
        return this;
      }
      withConnectProperties(connectPacket) {
        this.config.connectProperties = connectPacket;
        return this;
      }
      withSessionBehavior(sessionBehavior) {
        this.config.sessionBehavior = sessionBehavior;
        return this;
      }
      withRetryJitterMode(retryJitterMode) {
        this.config.retryJitterMode = retryJitterMode;
        return this;
      }
      withMinReconnectDelayMs(minReconnectDelayMs) {
        this.config.minReconnectDelayMs = minReconnectDelayMs;
        return this;
      }
      withMaxReconnectDelayMs(maxReconnectDelayMs) {
        this.config.maxReconnectDelayMs = maxReconnectDelayMs;
        return this;
      }
      withMinConnectedTimeToResetReconnectDelayMs(minConnectedTimeToResetReconnectDelayMs) {
        this.config.minConnectedTimeToResetReconnectDelayMs = minConnectedTimeToResetReconnectDelayMs;
        return this;
      }
      withConnackTimeoutMs(connackTimeoutMs) {
        this.config.connackTimeoutMs = connackTimeoutMs;
        return this;
      }
      withOfflineQueueBehavior(offlineQueueBehavior) {
        this.config.offlineQueueBehavior = offlineQueueBehavior;
        return this;
      }
      withPingTimeoutMs(pingTimeoutMs) {
        this.config.pingTimeoutMs = pingTimeoutMs;
        return this;
      }
      withAckTimeoutSeconds(ackTimeoutSeconds) {
        this.config.ackTimeoutSeconds = ackTimeoutSeconds;
        return this;
      }
      withSocketOptions(socketOptions) {
        this.config.socketOptions = socketOptions;
        return this;
      }
      withHttpProxyOptions(httpProxyOptions) {
        this.config.httpProxyOptions = httpProxyOptions;
        return this;
      }
      withExtendedValidationAndFlowControlOptions(extendedValidationAndFlowControlOptions) {
        this.config.extendedValidationAndFlowControlOptions = extendedValidationAndFlowControlOptions;
        return this;
      }
      build() {
        var _a, _b;
        if (this.config.tlsCtx === void 0) {
          this.config.tlsCtx = new io.ClientTlsContext(this.tlsContextOptions);
        }
        if (this.config.connectProperties) {
          this.config.connectProperties.username = iot_shared.buildMqtt5FinalUsername(this.customAuthConfig);
          if ((_a = this.customAuthConfig) === null || _a === void 0 ? void 0 : _a.password) {
            this.config.connectProperties.password = (_b = this.customAuthConfig) === null || _b === void 0 ? void 0 : _b.password;
          }
        }
        return this.config;
      }
    };
    exports.AwsIotMqtt5ClientConfigBuilder = AwsIotMqtt5ClientConfigBuilder;
    AwsIotMqtt5ClientConfigBuilder.DEFAULT_WEBSOCKET_MQTT_PORT = 443;
    AwsIotMqtt5ClientConfigBuilder.DEFAULT_DIRECT_MQTT_PORT = 8883;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/native/iot.js
var require_iot = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/native/iot.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar2(require_aws_iot(), exports);
    __exportStar2(require_aws_iot_mqtt5(), exports);
  }
});

// ../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/native/mqtt.js
var require_mqtt2 = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/native/mqtt.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    var __awaiter2 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator2) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator2.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator2["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator2 = generator2.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MqttClientConnection = exports.MqttClient = exports.MqttWill = exports.QoS = exports.HttpProxyOptions = void 0;
    var binding_1 = __importDefault2(require_binding());
    var native_resource_1 = require_native_resource();
    var event_1 = require_event();
    var crt = __importStar2(require_mqtt_shared());
    var error_1 = require_error();
    var io = __importStar2(require_io2());
    var http_1 = require_http3();
    Object.defineProperty(exports, "HttpProxyOptions", { enumerable: true, get: function() {
      return http_1.HttpProxyOptions;
    } });
    var mqtt_1 = require_mqtt();
    var mqtt_2 = require_mqtt();
    Object.defineProperty(exports, "QoS", { enumerable: true, get: function() {
      return mqtt_2.QoS;
    } });
    Object.defineProperty(exports, "MqttWill", { enumerable: true, get: function() {
      return mqtt_2.MqttWill;
    } });
    var MqttClient = class extends native_resource_1.NativeResource {
      constructor(bootstrap2 = void 0) {
        super(binding_1.default.mqtt_client_new(bootstrap2 != null ? bootstrap2.native_handle() : null));
        this.bootstrap = bootstrap2;
      }
      new_connection(config) {
        return new MqttClientConnection(this, config);
      }
    };
    exports.MqttClient = MqttClient;
    var MqttClientConnection = class extends (0, native_resource_1.NativeResourceMixin)(event_1.BufferedEventEmitter) {
      constructor(client, config) {
        super();
        this.client = client;
        this.config = config;
        const will = config.will ? {
          topic: config.will.topic,
          qos: config.will.qos,
          payload: crt.normalize_payload(config.will.payload),
          retain: config.will.retain
        } : void 0;
        var min_sec = mqtt_1.DEFAULT_RECONNECT_MIN_SEC;
        var max_sec = mqtt_1.DEFAULT_RECONNECT_MAX_SEC;
        if (config.reconnect_min_sec) {
          min_sec = config.reconnect_min_sec;
          max_sec = Math.max(min_sec, max_sec);
        }
        if (config.reconnect_max_sec) {
          max_sec = config.reconnect_max_sec;
          min_sec = Math.min(min_sec, max_sec);
        }
        this._super(binding_1.default.mqtt_client_connection_new(client.native_handle(), (error_code) => {
          this._on_connection_interrupted(error_code);
        }, (return_code, session_present) => {
          this._on_connection_resumed(return_code, session_present);
        }, config.tls_ctx ? config.tls_ctx.native_handle() : null, will, config.username, config.password, config.use_websocket, config.proxy_options ? config.proxy_options.create_native_handle() : void 0, config.websocket_handshake_transform, min_sec, max_sec));
        this.tls_ctx = config.tls_ctx;
        binding_1.default.mqtt_client_connection_on_message(this.native_handle(), this._on_any_publish.bind(this));
        this.on("error", (error2) => {
        });
      }
      close() {
        binding_1.default.mqtt_client_connection_close(this.native_handle());
      }
      on(event, listener) {
        super.on(event, listener);
        if (event == "connect") {
          process.nextTick(() => {
            this.uncork();
          });
        }
        return this;
      }
      connect() {
        return __awaiter2(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => {
            reject = this._reject(reject);
            try {
              binding_1.default.mqtt_client_connection_connect(this.native_handle(), this.config.client_id, this.config.host_name, this.config.port, this.config.socket_options.native_handle(), this.config.keep_alive, this.config.ping_timeout, this.config.protocol_operation_timeout, this.config.clean_session, this._on_connect_callback.bind(this, resolve, reject));
            } catch (e) {
              reject(e);
            }
          });
        });
      }
      reconnect() {
        return __awaiter2(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => {
            reject = this._reject(reject);
            try {
              binding_1.default.mqtt_client_connection_reconnect(this.native_handle(), this._on_connect_callback.bind(this, resolve, reject));
            } catch (e) {
              reject(e);
            }
          });
        });
      }
      publish(topic, payload, qos, retain = false) {
        return __awaiter2(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => {
            reject = this._reject(reject);
            try {
              binding_1.default.mqtt_client_connection_publish(this.native_handle(), topic, crt.normalize_payload(payload), qos, retain, this._on_puback_callback.bind(this, resolve, reject));
            } catch (e) {
              reject(e);
            }
          });
        });
      }
      subscribe(topic, qos, on_message) {
        return __awaiter2(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => {
            reject = this._reject(reject);
            try {
              binding_1.default.mqtt_client_connection_subscribe(this.native_handle(), topic, qos, on_message, this._on_suback_callback.bind(this, resolve, reject));
            } catch (e) {
              reject(e);
            }
          });
        });
      }
      unsubscribe(topic) {
        return __awaiter2(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => {
            reject = this._reject(reject);
            try {
              binding_1.default.mqtt_client_connection_unsubscribe(this.native_handle(), topic, this._on_unsuback_callback.bind(this, resolve, reject));
            } catch (e) {
              reject(e);
            }
          });
        });
      }
      disconnect() {
        return __awaiter2(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => {
            reject = this._reject(reject);
            try {
              binding_1.default.mqtt_client_connection_disconnect(this.native_handle(), this._on_disconnect_callback.bind(this, resolve));
            } catch (e) {
              reject(e);
            }
          });
        });
      }
      getQueueStatistics() {
        return binding_1.default.mqtt_client_connection_get_queue_statistics(this.native_handle());
      }
      _reject(reject) {
        return (reason) => {
          reject(reason);
          process.nextTick(() => {
            this.emit("error", new error_1.CrtError(reason));
          });
        };
      }
      _on_connection_interrupted(error_code) {
        this.emit("interrupt", new error_1.CrtError(error_code));
      }
      _on_connection_resumed(return_code, session_present) {
        this.emit("resume", return_code, session_present);
      }
      _on_any_publish(topic, payload, dup, qos, retain) {
        this.emit("message", topic, payload, dup, qos, retain);
      }
      _on_connect_callback(resolve, reject, error_code, return_code, session_present) {
        if (error_code == 0 && return_code == 0) {
          resolve(session_present);
          this.emit("connect", session_present);
        } else if (error_code != 0) {
          reject("Failed to connect: " + io.error_code_to_string(error_code));
        } else {
          reject("Server rejected connection.");
        }
      }
      _on_puback_callback(resolve, reject, packet_id, error_code) {
        if (error_code == 0) {
          resolve({ packet_id });
        } else {
          reject("Failed to publish: " + io.error_code_to_string(error_code));
        }
      }
      _on_suback_callback(resolve, reject, packet_id, topic, qos, error_code) {
        if (error_code == 0) {
          resolve({ packet_id, topic, qos, error_code });
        } else {
          reject("Failed to subscribe: " + io.error_code_to_string(error_code));
        }
      }
      _on_unsuback_callback(resolve, reject, packet_id, error_code) {
        if (error_code == 0) {
          resolve({ packet_id });
        } else {
          reject("Failed to unsubscribe: " + io.error_code_to_string(error_code));
        }
      }
      _on_disconnect_callback(resolve) {
        resolve();
        this.emit("disconnect");
        this.close();
      }
    };
    exports.MqttClientConnection = MqttClientConnection;
    MqttClientConnection.CONNECT = "connect";
    MqttClientConnection.DISCONNECT = "disconnect";
    MqttClientConnection.ERROR = "error";
    MqttClientConnection.INTERRUPT = "interrupt";
    MqttClientConnection.RESUME = "resume";
    MqttClientConnection.MESSAGE = "message";
  }
});

// ../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/index.js
var require_dist = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.15.9/node_modules/aws-crt/dist/index.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CrtError = exports.resource_safety = exports.platform = exports.mqtt5 = exports.mqtt = exports.iot = exports.io = exports.http = exports.crt = exports.crypto = exports.checksums = exports.auth = void 0;
    var platform = __importStar2(require_platform());
    exports.platform = platform;
    var resource_safety = __importStar2(require_resource_safety());
    exports.resource_safety = resource_safety;
    var auth = __importStar2(require_auth2());
    exports.auth = auth;
    var checksums = __importStar2(require_checksums());
    exports.checksums = checksums;
    var crt = __importStar2(require_crt());
    exports.crt = crt;
    var crypto2 = __importStar2(require_crypto2());
    exports.crypto = crypto2;
    var http2 = __importStar2(require_http3());
    exports.http = http2;
    var io = __importStar2(require_io2());
    exports.io = io;
    var iot2 = __importStar2(require_iot());
    exports.iot = iot2;
    var mqtt = __importStar2(require_mqtt2());
    exports.mqtt = mqtt;
    var mqtt5 = __importStar2(require_mqtt52());
    exports.mqtt5 = mqtt5;
    var error_1 = require_error();
    Object.defineProperty(exports, "CrtError", { enumerable: true, get: function() {
      return error_1.CrtError;
    } });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-user-agent-node@3.272.0/node_modules/@aws-sdk/util-user-agent-node/dist-cjs/is-crt-available.js
var require_is_crt_available = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-user-agent-node@3.272.0/node_modules/@aws-sdk/util-user-agent-node/dist-cjs/is-crt-available.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isCrtAvailable = void 0;
    var isCrtAvailable = () => {
      try {
        if (typeof __require === "function" && typeof module !== "undefined" && module.require && require_dist()) {
          return ["md/crt-avail"];
        }
        return null;
      } catch (e) {
        return null;
      }
    };
    exports.isCrtAvailable = isCrtAvailable;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-user-agent-node@3.272.0/node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js
var require_dist_cjs29 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-user-agent-node@3.272.0/node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultUserAgent = exports.UA_APP_ID_INI_NAME = exports.UA_APP_ID_ENV_NAME = void 0;
    var node_config_provider_1 = require_dist_cjs16();
    var os_1 = __require("os");
    var process_1 = __require("process");
    var is_crt_available_1 = require_is_crt_available();
    exports.UA_APP_ID_ENV_NAME = "AWS_SDK_UA_APP_ID";
    exports.UA_APP_ID_INI_NAME = "sdk-ua-app-id";
    var defaultUserAgent = ({ serviceId, clientVersion }) => {
      const sections = [
        ["aws-sdk-js", clientVersion],
        [`os/${(0, os_1.platform)()}`, (0, os_1.release)()],
        ["lang/js"],
        ["md/nodejs", `${process_1.versions.node}`]
      ];
      const crtAvailable = (0, is_crt_available_1.isCrtAvailable)();
      if (crtAvailable) {
        sections.push(crtAvailable);
      }
      if (serviceId) {
        sections.push([`api/${serviceId}`, clientVersion]);
      }
      if (process_1.env.AWS_EXECUTION_ENV) {
        sections.push([`exec-env/${process_1.env.AWS_EXECUTION_ENV}`]);
      }
      const appIdPromise = (0, node_config_provider_1.loadConfig)({
        environmentVariableSelector: (env) => env[exports.UA_APP_ID_ENV_NAME],
        configFileSelector: (profile) => profile[exports.UA_APP_ID_INI_NAME],
        default: void 0
      })();
      let resolvedUserAgent = void 0;
      return async () => {
        if (!resolvedUserAgent) {
          const appId = await appIdPromise;
          resolvedUserAgent = appId ? [...sections, [`app/${appId}`]] : [...sections];
        }
        return resolvedUserAgent;
      };
    };
    exports.defaultUserAgent = defaultUserAgent;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-base64@3.208.0/node_modules/@aws-sdk/util-base64/dist-cjs/fromBase64.js
var require_fromBase64 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-base64@3.208.0/node_modules/@aws-sdk/util-base64/dist-cjs/fromBase64.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromBase64 = void 0;
    var util_buffer_from_1 = require_dist_cjs20();
    var BASE64_REGEX = /^[A-Za-z0-9+/]*={0,2}$/;
    var fromBase64 = (input) => {
      if (input.length * 3 % 4 !== 0) {
        throw new TypeError(`Incorrect padding on base64 string.`);
      }
      if (!BASE64_REGEX.exec(input)) {
        throw new TypeError(`Invalid base64 string.`);
      }
      const buffer = (0, util_buffer_from_1.fromString)(input, "base64");
      return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
    };
    exports.fromBase64 = fromBase64;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-base64@3.208.0/node_modules/@aws-sdk/util-base64/dist-cjs/toBase64.js
var require_toBase64 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-base64@3.208.0/node_modules/@aws-sdk/util-base64/dist-cjs/toBase64.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toBase64 = void 0;
    var util_buffer_from_1 = require_dist_cjs20();
    var toBase64 = (input) => (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("base64");
    exports.toBase64 = toBase64;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-base64@3.208.0/node_modules/@aws-sdk/util-base64/dist-cjs/index.js
var require_dist_cjs30 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-base64@3.208.0/node_modules/@aws-sdk/util-base64/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromBase64(), exports);
    tslib_1.__exportStar(require_toBase64(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partitions.json
var require_partitions = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partitions.json"(exports, module) {
    module.exports = {
      partitions: [{
        id: "aws",
        outputs: {
          dnsSuffix: "amazonaws.com",
          dualStackDnsSuffix: "api.aws",
          name: "aws",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^(us|eu|ap|sa|ca|me|af)\\-\\w+\\-\\d+$",
        regions: {
          "af-south-1": {
            description: "Africa (Cape Town)"
          },
          "ap-east-1": {
            description: "Asia Pacific (Hong Kong)"
          },
          "ap-northeast-1": {
            description: "Asia Pacific (Tokyo)"
          },
          "ap-northeast-2": {
            description: "Asia Pacific (Seoul)"
          },
          "ap-northeast-3": {
            description: "Asia Pacific (Osaka)"
          },
          "ap-south-1": {
            description: "Asia Pacific (Mumbai)"
          },
          "ap-south-2": {
            description: "Asia Pacific (Hyderabad)"
          },
          "ap-southeast-1": {
            description: "Asia Pacific (Singapore)"
          },
          "ap-southeast-2": {
            description: "Asia Pacific (Sydney)"
          },
          "ap-southeast-3": {
            description: "Asia Pacific (Jakarta)"
          },
          "ap-southeast-4": {
            description: "Asia Pacific (Melbourne)"
          },
          "aws-global": {
            description: "AWS Standard global region"
          },
          "ca-central-1": {
            description: "Canada (Central)"
          },
          "eu-central-1": {
            description: "Europe (Frankfurt)"
          },
          "eu-central-2": {
            description: "Europe (Zurich)"
          },
          "eu-north-1": {
            description: "Europe (Stockholm)"
          },
          "eu-south-1": {
            description: "Europe (Milan)"
          },
          "eu-south-2": {
            description: "Europe (Spain)"
          },
          "eu-west-1": {
            description: "Europe (Ireland)"
          },
          "eu-west-2": {
            description: "Europe (London)"
          },
          "eu-west-3": {
            description: "Europe (Paris)"
          },
          "me-central-1": {
            description: "Middle East (UAE)"
          },
          "me-south-1": {
            description: "Middle East (Bahrain)"
          },
          "sa-east-1": {
            description: "South America (Sao Paulo)"
          },
          "us-east-1": {
            description: "US East (N. Virginia)"
          },
          "us-east-2": {
            description: "US East (Ohio)"
          },
          "us-west-1": {
            description: "US West (N. California)"
          },
          "us-west-2": {
            description: "US West (Oregon)"
          }
        }
      }, {
        id: "aws-cn",
        outputs: {
          dnsSuffix: "amazonaws.com.cn",
          dualStackDnsSuffix: "api.amazonwebservices.com.cn",
          name: "aws-cn",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^cn\\-\\w+\\-\\d+$",
        regions: {
          "aws-cn-global": {
            description: "AWS China global region"
          },
          "cn-north-1": {
            description: "China (Beijing)"
          },
          "cn-northwest-1": {
            description: "China (Ningxia)"
          }
        }
      }, {
        id: "aws-us-gov",
        outputs: {
          dnsSuffix: "amazonaws.com",
          dualStackDnsSuffix: "api.aws",
          name: "aws-us-gov",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
        regions: {
          "aws-us-gov-global": {
            description: "AWS GovCloud (US) global region"
          },
          "us-gov-east-1": {
            description: "AWS GovCloud (US-East)"
          },
          "us-gov-west-1": {
            description: "AWS GovCloud (US-West)"
          }
        }
      }, {
        id: "aws-iso",
        outputs: {
          dnsSuffix: "c2s.ic.gov",
          dualStackDnsSuffix: "c2s.ic.gov",
          name: "aws-iso",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-global": {
            description: "AWS ISO (US) global region"
          },
          "us-iso-east-1": {
            description: "US ISO East"
          },
          "us-iso-west-1": {
            description: "US ISO WEST"
          }
        }
      }, {
        id: "aws-iso-b",
        outputs: {
          dnsSuffix: "sc2s.sgov.gov",
          dualStackDnsSuffix: "sc2s.sgov.gov",
          name: "aws-iso-b",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-b-global": {
            description: "AWS ISOB (US) global region"
          },
          "us-isob-east-1": {
            description: "US ISOB East (Ohio)"
          }
        }
      }],
      version: "1.1"
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partition.js
var require_partition = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partition.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.partition = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var partitions_json_1 = tslib_1.__importDefault(require_partitions());
    var { partitions } = partitions_json_1.default;
    var DEFAULT_PARTITION = partitions.find((partition2) => partition2.id === "aws");
    var partition = (value) => {
      for (const partition2 of partitions) {
        const { regions, outputs } = partition2;
        for (const [region, regionData] of Object.entries(regions)) {
          if (region === value) {
            return {
              ...outputs,
              ...regionData
            };
          }
        }
      }
      for (const partition2 of partitions) {
        const { regionRegex, outputs } = partition2;
        if (new RegExp(regionRegex).test(value)) {
          return {
            ...outputs
          };
        }
      }
      if (!DEFAULT_PARTITION) {
        throw new Error("Provided region was not found in the partition array or regex, and default partition with id 'aws' doesn't exist.");
      }
      return {
        ...DEFAULT_PARTITION.outputs
      };
    };
    exports.partition = partition;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/debugId.js
var require_debugId = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/debugId.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.debugId = void 0;
    exports.debugId = "endpoints";
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/toDebugString.js
var require_toDebugString = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/toDebugString.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toDebugString = void 0;
    function toDebugString(input) {
      if (typeof input !== "object" || input == null) {
        return input;
      }
      if ("ref" in input) {
        return `$${toDebugString(input.ref)}`;
      }
      if ("fn" in input) {
        return `${input.fn}(${(input.argv || []).map(toDebugString).join(", ")})`;
      }
      return JSON.stringify(input, null, 2);
    }
    exports.toDebugString = toDebugString;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/index.js
var require_debug = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_debugId(), exports);
    tslib_1.__exportStar(require_toDebugString(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/EndpointError.js
var require_EndpointError = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/EndpointError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EndpointError = void 0;
    var EndpointError = class extends Error {
      constructor(message) {
        super(message);
        this.name = "EndpointError";
      }
    };
    exports.EndpointError = EndpointError;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/EndpointRuleObject.js
var require_EndpointRuleObject = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/EndpointRuleObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/ErrorRuleObject.js
var require_ErrorRuleObject = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/ErrorRuleObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/RuleSetObject.js
var require_RuleSetObject = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/RuleSetObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/TreeRuleObject.js
var require_TreeRuleObject = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/TreeRuleObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/shared.js
var require_shared = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/index.js
var require_types5 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_EndpointError(), exports);
    tslib_1.__exportStar(require_EndpointRuleObject(), exports);
    tslib_1.__exportStar(require_ErrorRuleObject(), exports);
    tslib_1.__exportStar(require_RuleSetObject(), exports);
    tslib_1.__exportStar(require_TreeRuleObject(), exports);
    tslib_1.__exportStar(require_shared(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isIpAddress.js
var require_isIpAddress = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isIpAddress.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isIpAddress = void 0;
    var IP_V4_REGEX = new RegExp(`^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$`);
    var isIpAddress = (value) => IP_V4_REGEX.test(value) || value.startsWith("[") && value.endsWith("]");
    exports.isIpAddress = isIpAddress;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isValidHostLabel.js
var require_isValidHostLabel = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isValidHostLabel.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isValidHostLabel = void 0;
    var VALID_HOST_LABEL_REGEX = new RegExp(`^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$`);
    var isValidHostLabel = (value, allowSubDomains = false) => {
      if (!allowSubDomains) {
        return VALID_HOST_LABEL_REGEX.test(value);
      }
      const labels = value.split(".");
      for (const label of labels) {
        if (!(0, exports.isValidHostLabel)(label)) {
          return false;
        }
      }
      return true;
    };
    exports.isValidHostLabel = isValidHostLabel;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/isVirtualHostableS3Bucket.js
var require_isVirtualHostableS3Bucket = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/isVirtualHostableS3Bucket.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isVirtualHostableS3Bucket = void 0;
    var isIpAddress_1 = require_isIpAddress();
    var isValidHostLabel_1 = require_isValidHostLabel();
    var isVirtualHostableS3Bucket = (value, allowSubDomains = false) => {
      if (allowSubDomains) {
        for (const label of value.split(".")) {
          if (!(0, exports.isVirtualHostableS3Bucket)(label)) {
            return false;
          }
        }
        return true;
      }
      if (!(0, isValidHostLabel_1.isValidHostLabel)(value)) {
        return false;
      }
      if (value.length < 3 || value.length > 63) {
        return false;
      }
      if (value !== value.toLowerCase()) {
        return false;
      }
      if ((0, isIpAddress_1.isIpAddress)(value)) {
        return false;
      }
      return true;
    };
    exports.isVirtualHostableS3Bucket = isVirtualHostableS3Bucket;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/parseArn.js
var require_parseArn = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/parseArn.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseArn = void 0;
    var parseArn = (value) => {
      const segments = value.split(":");
      if (segments.length < 6)
        return null;
      const [arn, partition, service, region, accountId, ...resourceId] = segments;
      if (arn !== "arn" || partition === "" || service === "" || resourceId[0] === "")
        return null;
      return {
        partition,
        service,
        region,
        accountId,
        resourceId: resourceId[0].includes("/") ? resourceId[0].split("/") : resourceId
      };
    };
    exports.parseArn = parseArn;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/index.js
var require_aws = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_isVirtualHostableS3Bucket(), exports);
    tslib_1.__exportStar(require_parseArn(), exports);
    tslib_1.__exportStar(require_partition(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/booleanEquals.js
var require_booleanEquals = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/booleanEquals.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.booleanEquals = void 0;
    var booleanEquals = (value1, value2) => value1 === value2;
    exports.booleanEquals = booleanEquals;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/getAttrPathList.js
var require_getAttrPathList = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/getAttrPathList.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getAttrPathList = void 0;
    var types_1 = require_types5();
    var getAttrPathList = (path20) => {
      const parts = path20.split(".");
      const pathList = [];
      for (const part of parts) {
        const squareBracketIndex = part.indexOf("[");
        if (squareBracketIndex !== -1) {
          if (part.indexOf("]") !== part.length - 1) {
            throw new types_1.EndpointError(`Path: '${path20}' does not end with ']'`);
          }
          const arrayIndex = part.slice(squareBracketIndex + 1, -1);
          if (Number.isNaN(parseInt(arrayIndex))) {
            throw new types_1.EndpointError(`Invalid array index: '${arrayIndex}' in path: '${path20}'`);
          }
          if (squareBracketIndex !== 0) {
            pathList.push(part.slice(0, squareBracketIndex));
          }
          pathList.push(arrayIndex);
        } else {
          pathList.push(part);
        }
      }
      return pathList;
    };
    exports.getAttrPathList = getAttrPathList;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/getAttr.js
var require_getAttr = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/getAttr.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getAttr = void 0;
    var types_1 = require_types5();
    var getAttrPathList_1 = require_getAttrPathList();
    var getAttr = (value, path20) => (0, getAttrPathList_1.getAttrPathList)(path20).reduce((acc, index) => {
      if (typeof acc !== "object") {
        throw new types_1.EndpointError(`Index '${index}' in '${path20}' not found in '${JSON.stringify(value)}'`);
      } else if (Array.isArray(acc)) {
        return acc[parseInt(index)];
      }
      return acc[index];
    }, value);
    exports.getAttr = getAttr;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isSet.js
var require_isSet = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isSet.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isSet = void 0;
    var isSet = (value) => value != null;
    exports.isSet = isSet;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/not.js
var require_not = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/not.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.not = void 0;
    var not = (value) => !value;
    exports.not = not;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/parseURL.js
var require_parseURL = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/parseURL.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseURL = void 0;
    var types_1 = require_dist_cjs();
    var isIpAddress_1 = require_isIpAddress();
    var DEFAULT_PORTS = {
      [types_1.EndpointURLScheme.HTTP]: 80,
      [types_1.EndpointURLScheme.HTTPS]: 443
    };
    var parseURL = (value) => {
      const whatwgURL = (() => {
        try {
          if (value instanceof URL) {
            return value;
          }
          if (typeof value === "object" && "hostname" in value) {
            const { hostname: hostname2, port, protocol: protocol2 = "", path: path20 = "", query = {} } = value;
            const url10 = new URL(`${protocol2}//${hostname2}${port ? `:${port}` : ""}${path20}`);
            url10.search = Object.entries(query).map(([k, v]) => `${k}=${v}`).join("&");
            return url10;
          }
          return new URL(value);
        } catch (error2) {
          return null;
        }
      })();
      if (!whatwgURL) {
        console.error(`Unable to parse ${JSON.stringify(value)} as a whatwg URL.`);
        return null;
      }
      const urlString = whatwgURL.href;
      const { host, hostname, pathname, protocol, search } = whatwgURL;
      if (search) {
        return null;
      }
      const scheme = protocol.slice(0, -1);
      if (!Object.values(types_1.EndpointURLScheme).includes(scheme)) {
        return null;
      }
      const isIp = (0, isIpAddress_1.isIpAddress)(hostname);
      const inputContainsDefaultPort = urlString.includes(`${host}:${DEFAULT_PORTS[scheme]}`) || typeof value === "string" && value.includes(`${host}:${DEFAULT_PORTS[scheme]}`);
      const authority = `${host}${inputContainsDefaultPort ? `:${DEFAULT_PORTS[scheme]}` : ``}`;
      return {
        scheme,
        authority,
        path: pathname,
        normalizedPath: pathname.endsWith("/") ? pathname : `${pathname}/`,
        isIp
      };
    };
    exports.parseURL = parseURL;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/stringEquals.js
var require_stringEquals = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/stringEquals.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.stringEquals = void 0;
    var stringEquals = (value1, value2) => value1 === value2;
    exports.stringEquals = stringEquals;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/substring.js
var require_substring = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/substring.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.substring = void 0;
    var substring = (input, start, stop, reverse) => {
      if (start >= stop || input.length < stop) {
        return null;
      }
      if (!reverse) {
        return input.substring(start, stop);
      }
      return input.substring(input.length - stop, input.length - start);
    };
    exports.substring = substring;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/uriEncode.js
var require_uriEncode = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/uriEncode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.uriEncode = void 0;
    var uriEncode = (value) => encodeURIComponent(value).replace(/[!*'()]/g, (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`);
    exports.uriEncode = uriEncode;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/index.js
var require_lib = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.aws = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    exports.aws = tslib_1.__importStar(require_aws());
    tslib_1.__exportStar(require_booleanEquals(), exports);
    tslib_1.__exportStar(require_getAttr(), exports);
    tslib_1.__exportStar(require_isSet(), exports);
    tslib_1.__exportStar(require_isValidHostLabel(), exports);
    tslib_1.__exportStar(require_not(), exports);
    tslib_1.__exportStar(require_parseURL(), exports);
    tslib_1.__exportStar(require_stringEquals(), exports);
    tslib_1.__exportStar(require_substring(), exports);
    tslib_1.__exportStar(require_uriEncode(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateTemplate.js
var require_evaluateTemplate = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateTemplate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateTemplate = void 0;
    var lib_1 = require_lib();
    var evaluateTemplate = (template2, options) => {
      const evaluatedTemplateArr = [];
      const templateContext = {
        ...options.endpointParams,
        ...options.referenceRecord
      };
      let currentIndex = 0;
      while (currentIndex < template2.length) {
        const openingBraceIndex = template2.indexOf("{", currentIndex);
        if (openingBraceIndex === -1) {
          evaluatedTemplateArr.push(template2.slice(currentIndex));
          break;
        }
        evaluatedTemplateArr.push(template2.slice(currentIndex, openingBraceIndex));
        const closingBraceIndex = template2.indexOf("}", openingBraceIndex);
        if (closingBraceIndex === -1) {
          evaluatedTemplateArr.push(template2.slice(openingBraceIndex));
          break;
        }
        if (template2[openingBraceIndex + 1] === "{" && template2[closingBraceIndex + 1] === "}") {
          evaluatedTemplateArr.push(template2.slice(openingBraceIndex + 1, closingBraceIndex));
          currentIndex = closingBraceIndex + 2;
        }
        const parameterName = template2.substring(openingBraceIndex + 1, closingBraceIndex);
        if (parameterName.includes("#")) {
          const [refName, attrName] = parameterName.split("#");
          evaluatedTemplateArr.push((0, lib_1.getAttr)(templateContext[refName], attrName));
        } else {
          evaluatedTemplateArr.push(templateContext[parameterName]);
        }
        currentIndex = closingBraceIndex + 1;
      }
      return evaluatedTemplateArr.join("");
    };
    exports.evaluateTemplate = evaluateTemplate;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getReferenceValue.js
var require_getReferenceValue = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getReferenceValue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getReferenceValue = void 0;
    var getReferenceValue = ({ ref }, options) => {
      const referenceRecord = {
        ...options.endpointParams,
        ...options.referenceRecord
      };
      return referenceRecord[ref];
    };
    exports.getReferenceValue = getReferenceValue;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateExpression.js
var require_evaluateExpression = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateExpression.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateExpression = void 0;
    var types_1 = require_types5();
    var callFunction_1 = require_callFunction();
    var evaluateTemplate_1 = require_evaluateTemplate();
    var getReferenceValue_1 = require_getReferenceValue();
    var evaluateExpression = (obj, keyName, options) => {
      if (typeof obj === "string") {
        return (0, evaluateTemplate_1.evaluateTemplate)(obj, options);
      } else if (obj["fn"]) {
        return (0, callFunction_1.callFunction)(obj, options);
      } else if (obj["ref"]) {
        return (0, getReferenceValue_1.getReferenceValue)(obj, options);
      }
      throw new types_1.EndpointError(`'${keyName}': ${String(obj)} is not a string, function or reference.`);
    };
    exports.evaluateExpression = evaluateExpression;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/callFunction.js
var require_callFunction = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/callFunction.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.callFunction = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var lib = tslib_1.__importStar(require_lib());
    var evaluateExpression_1 = require_evaluateExpression();
    var callFunction = ({ fn, argv }, options) => {
      const evaluatedArgs = argv.map((arg) => ["boolean", "number"].includes(typeof arg) ? arg : (0, evaluateExpression_1.evaluateExpression)(arg, "arg", options));
      return fn.split(".").reduce((acc, key) => acc[key], lib)(...evaluatedArgs);
    };
    exports.callFunction = callFunction;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateCondition.js
var require_evaluateCondition = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateCondition.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateCondition = void 0;
    var debug_1 = require_debug();
    var types_1 = require_types5();
    var callFunction_1 = require_callFunction();
    var evaluateCondition = ({ assign, ...fnArgs }, options) => {
      var _a, _b;
      if (assign && assign in options.referenceRecord) {
        throw new types_1.EndpointError(`'${assign}' is already defined in Reference Record.`);
      }
      const value = (0, callFunction_1.callFunction)(fnArgs, options);
      (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, debug_1.debugId, `evaluateCondition: ${(0, debug_1.toDebugString)(fnArgs)} = ${(0, debug_1.toDebugString)(value)}`);
      return {
        result: value === "" ? true : !!value,
        ...assign != null && { toAssign: { name: assign, value } }
      };
    };
    exports.evaluateCondition = evaluateCondition;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateConditions.js
var require_evaluateConditions = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateConditions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateConditions = void 0;
    var debug_1 = require_debug();
    var evaluateCondition_1 = require_evaluateCondition();
    var evaluateConditions = (conditions = [], options) => {
      var _a, _b;
      const conditionsReferenceRecord = {};
      for (const condition of conditions) {
        const { result, toAssign } = (0, evaluateCondition_1.evaluateCondition)(condition, {
          ...options,
          referenceRecord: {
            ...options.referenceRecord,
            ...conditionsReferenceRecord
          }
        });
        if (!result) {
          return { result };
        }
        if (toAssign) {
          conditionsReferenceRecord[toAssign.name] = toAssign.value;
          (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, debug_1.debugId, `assign: ${toAssign.name} := ${(0, debug_1.toDebugString)(toAssign.value)}`);
        }
      }
      return { result: true, referenceRecord: conditionsReferenceRecord };
    };
    exports.evaluateConditions = evaluateConditions;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointHeaders.js
var require_getEndpointHeaders = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointHeaders.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointHeaders = void 0;
    var types_1 = require_types5();
    var evaluateExpression_1 = require_evaluateExpression();
    var getEndpointHeaders = (headers, options) => Object.entries(headers).reduce((acc, [headerKey, headerVal]) => ({
      ...acc,
      [headerKey]: headerVal.map((headerValEntry) => {
        const processedExpr = (0, evaluateExpression_1.evaluateExpression)(headerValEntry, "Header value entry", options);
        if (typeof processedExpr !== "string") {
          throw new types_1.EndpointError(`Header '${headerKey}' value '${processedExpr}' is not a string`);
        }
        return processedExpr;
      })
    }), {});
    exports.getEndpointHeaders = getEndpointHeaders;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointProperty.js
var require_getEndpointProperty = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointProperty.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointProperty = void 0;
    var types_1 = require_types5();
    var evaluateTemplate_1 = require_evaluateTemplate();
    var getEndpointProperties_1 = require_getEndpointProperties();
    var getEndpointProperty = (property, options) => {
      if (Array.isArray(property)) {
        return property.map((propertyEntry) => (0, exports.getEndpointProperty)(propertyEntry, options));
      }
      switch (typeof property) {
        case "string":
          return (0, evaluateTemplate_1.evaluateTemplate)(property, options);
        case "object":
          if (property === null) {
            throw new types_1.EndpointError(`Unexpected endpoint property: ${property}`);
          }
          return (0, getEndpointProperties_1.getEndpointProperties)(property, options);
        case "boolean":
          return property;
        default:
          throw new types_1.EndpointError(`Unexpected endpoint property type: ${typeof property}`);
      }
    };
    exports.getEndpointProperty = getEndpointProperty;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointProperties.js
var require_getEndpointProperties = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointProperties.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointProperties = void 0;
    var getEndpointProperty_1 = require_getEndpointProperty();
    var getEndpointProperties = (properties, options) => Object.entries(properties).reduce((acc, [propertyKey, propertyVal]) => ({
      ...acc,
      [propertyKey]: (0, getEndpointProperty_1.getEndpointProperty)(propertyVal, options)
    }), {});
    exports.getEndpointProperties = getEndpointProperties;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointUrl.js
var require_getEndpointUrl = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointUrl.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointUrl = void 0;
    var types_1 = require_types5();
    var evaluateExpression_1 = require_evaluateExpression();
    var getEndpointUrl = (endpointUrl, options) => {
      const expression = (0, evaluateExpression_1.evaluateExpression)(endpointUrl, "Endpoint URL", options);
      if (typeof expression === "string") {
        try {
          return new URL(expression);
        } catch (error2) {
          console.error(`Failed to construct URL with ${expression}`, error2);
          throw error2;
        }
      }
      throw new types_1.EndpointError(`Endpoint URL must be a string, got ${typeof expression}`);
    };
    exports.getEndpointUrl = getEndpointUrl;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateEndpointRule.js
var require_evaluateEndpointRule = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateEndpointRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateEndpointRule = void 0;
    var debug_1 = require_debug();
    var evaluateConditions_1 = require_evaluateConditions();
    var getEndpointHeaders_1 = require_getEndpointHeaders();
    var getEndpointProperties_1 = require_getEndpointProperties();
    var getEndpointUrl_1 = require_getEndpointUrl();
    var evaluateEndpointRule = (endpointRule, options) => {
      var _a, _b;
      const { conditions, endpoint } = endpointRule;
      const { result, referenceRecord } = (0, evaluateConditions_1.evaluateConditions)(conditions, options);
      if (!result) {
        return;
      }
      const endpointRuleOptions = {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      };
      const { url: url10, properties, headers } = endpoint;
      (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, debug_1.debugId, `Resolving endpoint from template: ${(0, debug_1.toDebugString)(endpoint)}`);
      return {
        ...headers != void 0 && {
          headers: (0, getEndpointHeaders_1.getEndpointHeaders)(headers, endpointRuleOptions)
        },
        ...properties != void 0 && {
          properties: (0, getEndpointProperties_1.getEndpointProperties)(properties, endpointRuleOptions)
        },
        url: (0, getEndpointUrl_1.getEndpointUrl)(url10, endpointRuleOptions)
      };
    };
    exports.evaluateEndpointRule = evaluateEndpointRule;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateErrorRule.js
var require_evaluateErrorRule = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateErrorRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateErrorRule = void 0;
    var types_1 = require_types5();
    var evaluateConditions_1 = require_evaluateConditions();
    var evaluateExpression_1 = require_evaluateExpression();
    var evaluateErrorRule = (errorRule, options) => {
      const { conditions, error: error2 } = errorRule;
      const { result, referenceRecord } = (0, evaluateConditions_1.evaluateConditions)(conditions, options);
      if (!result) {
        return;
      }
      throw new types_1.EndpointError((0, evaluateExpression_1.evaluateExpression)(error2, "Error", {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      }));
    };
    exports.evaluateErrorRule = evaluateErrorRule;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateTreeRule.js
var require_evaluateTreeRule = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateTreeRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateTreeRule = void 0;
    var evaluateConditions_1 = require_evaluateConditions();
    var evaluateRules_1 = require_evaluateRules();
    var evaluateTreeRule = (treeRule, options) => {
      const { conditions, rules } = treeRule;
      const { result, referenceRecord } = (0, evaluateConditions_1.evaluateConditions)(conditions, options);
      if (!result) {
        return;
      }
      return (0, evaluateRules_1.evaluateRules)(rules, {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      });
    };
    exports.evaluateTreeRule = evaluateTreeRule;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateRules.js
var require_evaluateRules = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateRules.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateRules = void 0;
    var types_1 = require_types5();
    var evaluateEndpointRule_1 = require_evaluateEndpointRule();
    var evaluateErrorRule_1 = require_evaluateErrorRule();
    var evaluateTreeRule_1 = require_evaluateTreeRule();
    var evaluateRules = (rules, options) => {
      for (const rule of rules) {
        if (rule.type === "endpoint") {
          const endpointOrUndefined = (0, evaluateEndpointRule_1.evaluateEndpointRule)(rule, options);
          if (endpointOrUndefined) {
            return endpointOrUndefined;
          }
        } else if (rule.type === "error") {
          (0, evaluateErrorRule_1.evaluateErrorRule)(rule, options);
        } else if (rule.type === "tree") {
          const endpointOrUndefined = (0, evaluateTreeRule_1.evaluateTreeRule)(rule, options);
          if (endpointOrUndefined) {
            return endpointOrUndefined;
          }
        } else {
          throw new types_1.EndpointError(`Unknown endpoint rule: ${rule}`);
        }
      }
      throw new types_1.EndpointError(`Rules evaluation failed`);
    };
    exports.evaluateRules = evaluateRules;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/index.js
var require_utils = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_evaluateRules(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/resolveEndpoint.js
var require_resolveEndpoint = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/resolveEndpoint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveEndpoint = void 0;
    var debug_1 = require_debug();
    var types_1 = require_types5();
    var utils_1 = require_utils();
    var resolveEndpoint = (ruleSetObject, options) => {
      var _a, _b, _c, _d, _e, _f;
      const { endpointParams, logger } = options;
      const { parameters, rules } = ruleSetObject;
      (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, debug_1.debugId, `Initial EndpointParams: ${(0, debug_1.toDebugString)(endpointParams)}`);
      const paramsWithDefault = Object.entries(parameters).filter(([, v]) => v.default != null).map(([k, v]) => [k, v.default]);
      if (paramsWithDefault.length > 0) {
        for (const [paramKey, paramDefaultValue] of paramsWithDefault) {
          endpointParams[paramKey] = (_c = endpointParams[paramKey]) !== null && _c !== void 0 ? _c : paramDefaultValue;
        }
      }
      const requiredParams = Object.entries(parameters).filter(([, v]) => v.required).map(([k]) => k);
      for (const requiredParam of requiredParams) {
        if (endpointParams[requiredParam] == null) {
          throw new types_1.EndpointError(`Missing required parameter: '${requiredParam}'`);
        }
      }
      const endpoint = (0, utils_1.evaluateRules)(rules, { endpointParams, logger, referenceRecord: {} });
      if ((_d = options.endpointParams) === null || _d === void 0 ? void 0 : _d.Endpoint) {
        try {
          const givenEndpoint = new URL(options.endpointParams.Endpoint);
          const { protocol, port } = givenEndpoint;
          endpoint.url.protocol = protocol;
          endpoint.url.port = port;
        } catch (e) {
        }
      }
      (_f = (_e = options.logger) === null || _e === void 0 ? void 0 : _e.debug) === null || _f === void 0 ? void 0 : _f.call(_e, debug_1.debugId, `Resolved endpoint: ${(0, debug_1.toDebugString)(endpoint)}`);
      return endpoint;
    };
    exports.resolveEndpoint = resolveEndpoint;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/index.js
var require_dist_cjs31 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_partition(), exports);
    tslib_1.__exportStar(require_resolveEndpoint(), exports);
    tslib_1.__exportStar(require_types5(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.js
var require_ruleset = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ruleSet = void 0;
    var p = "required";
    var q = "fn";
    var r = "argv";
    var s = "ref";
    var a = "PartitionResult";
    var b = "tree";
    var c = "error";
    var d = "endpoint";
    var e = { [p]: false, "type": "String" };
    var f = { [p]: true, "default": false, "type": "Boolean" };
    var g = { [s]: "Endpoint" };
    var h = { [q]: "booleanEquals", [r]: [{ [s]: "UseFIPS" }, true] };
    var i = { [q]: "booleanEquals", [r]: [{ [s]: "UseDualStack" }, true] };
    var j = {};
    var k = { [q]: "booleanEquals", [r]: [true, { [q]: "getAttr", [r]: [{ [s]: a }, "supportsFIPS"] }] };
    var l = { [q]: "booleanEquals", [r]: [true, { [q]: "getAttr", [r]: [{ [s]: a }, "supportsDualStack"] }] };
    var m = [g];
    var n = [h];
    var o = [i];
    var _data = { version: "1.0", parameters: { Region: e, UseDualStack: f, UseFIPS: f, Endpoint: e }, rules: [{ conditions: [{ [q]: "aws.partition", [r]: [{ [s]: "Region" }], assign: a }], type: b, rules: [{ conditions: [{ [q]: "isSet", [r]: m }, { [q]: "parseURL", [r]: m, assign: "url" }], type: b, rules: [{ conditions: n, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: c }, { type: b, rules: [{ conditions: o, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: c }, { endpoint: { url: g, properties: j, headers: j }, type: d }] }] }, { conditions: [h, i], type: b, rules: [{ conditions: [k, l], type: b, rules: [{ endpoint: { url: "https://portal.sso-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: j, headers: j }, type: d }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: c }] }, { conditions: n, type: b, rules: [{ conditions: [k], type: b, rules: [{ type: b, rules: [{ endpoint: { url: "https://portal.sso-fips.{Region}.{PartitionResult#dnsSuffix}", properties: j, headers: j }, type: d }] }] }, { error: "FIPS is enabled but this partition does not support FIPS", type: c }] }, { conditions: o, type: b, rules: [{ conditions: [l], type: b, rules: [{ endpoint: { url: "https://portal.sso.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: j, headers: j }, type: d }] }, { error: "DualStack is enabled but this partition does not support DualStack", type: c }] }, { endpoint: { url: "https://portal.sso.{Region}.{PartitionResult#dnsSuffix}", properties: j, headers: j }, type: d }] }] };
    exports.ruleSet = _data;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/endpointResolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs31();
    var ruleset_1 = require_ruleset();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var url_parser_1 = require_dist_cjs3();
    var util_base64_1 = require_dist_cjs30();
    var util_utf8_1 = require_dist_cjs21();
    var endpointResolver_1 = require_endpointResolver();
    var getRuntimeConfig = (config) => ({
      apiVersion: "2019-06-10",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
      serviceId: config?.serviceId ?? "SSO",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    });
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-defaults-mode-node@3.279.0/node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/constants.js
var require_constants5 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-defaults-mode-node@3.279.0/node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IMDS_REGION_PATH = exports.DEFAULTS_MODE_OPTIONS = exports.ENV_IMDS_DISABLED = exports.AWS_DEFAULT_REGION_ENV = exports.AWS_REGION_ENV = exports.AWS_EXECUTION_ENV = void 0;
    exports.AWS_EXECUTION_ENV = "AWS_EXECUTION_ENV";
    exports.AWS_REGION_ENV = "AWS_REGION";
    exports.AWS_DEFAULT_REGION_ENV = "AWS_DEFAULT_REGION";
    exports.ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
    exports.DEFAULTS_MODE_OPTIONS = ["in-region", "cross-region", "mobile", "standard", "legacy"];
    exports.IMDS_REGION_PATH = "/latest/meta-data/placement/region";
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-defaults-mode-node@3.279.0/node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/defaultsModeConfig.js
var require_defaultsModeConfig = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-defaults-mode-node@3.279.0/node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/defaultsModeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_DEFAULTS_MODE_CONFIG_OPTIONS = void 0;
    var AWS_DEFAULTS_MODE_ENV = "AWS_DEFAULTS_MODE";
    var AWS_DEFAULTS_MODE_CONFIG = "defaults_mode";
    exports.NODE_DEFAULTS_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        return env[AWS_DEFAULTS_MODE_ENV];
      },
      configFileSelector: (profile) => {
        return profile[AWS_DEFAULTS_MODE_CONFIG];
      },
      default: "legacy"
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-defaults-mode-node@3.279.0/node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/resolveDefaultsModeConfig.js
var require_resolveDefaultsModeConfig = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-defaults-mode-node@3.279.0/node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/resolveDefaultsModeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveDefaultsModeConfig = void 0;
    var config_resolver_1 = __require("@aws-sdk/config-resolver");
    var credential_provider_imds_1 = require_dist_cjs17();
    var node_config_provider_1 = require_dist_cjs16();
    var property_provider_1 = require_dist_cjs13();
    var constants_1 = require_constants5();
    var defaultsModeConfig_1 = require_defaultsModeConfig();
    var resolveDefaultsModeConfig = ({ region = (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS), defaultsMode = (0, node_config_provider_1.loadConfig)(defaultsModeConfig_1.NODE_DEFAULTS_MODE_CONFIG_OPTIONS) } = {}) => (0, property_provider_1.memoize)(async () => {
      const mode = typeof defaultsMode === "function" ? await defaultsMode() : defaultsMode;
      switch (mode === null || mode === void 0 ? void 0 : mode.toLowerCase()) {
        case "auto":
          return resolveNodeDefaultsModeAuto(region);
        case "in-region":
        case "cross-region":
        case "mobile":
        case "standard":
        case "legacy":
          return Promise.resolve(mode === null || mode === void 0 ? void 0 : mode.toLocaleLowerCase());
        case void 0:
          return Promise.resolve("legacy");
        default:
          throw new Error(`Invalid parameter for "defaultsMode", expect ${constants_1.DEFAULTS_MODE_OPTIONS.join(", ")}, got ${mode}`);
      }
    });
    exports.resolveDefaultsModeConfig = resolveDefaultsModeConfig;
    var resolveNodeDefaultsModeAuto = async (clientRegion) => {
      if (clientRegion) {
        const resolvedRegion = typeof clientRegion === "function" ? await clientRegion() : clientRegion;
        const inferredRegion = await inferPhysicalRegion();
        if (!inferredRegion) {
          return "standard";
        }
        if (resolvedRegion === inferredRegion) {
          return "in-region";
        } else {
          return "cross-region";
        }
      }
      return "standard";
    };
    var inferPhysicalRegion = async () => {
      var _a;
      if (process.env[constants_1.AWS_EXECUTION_ENV] && (process.env[constants_1.AWS_REGION_ENV] || process.env[constants_1.AWS_DEFAULT_REGION_ENV])) {
        return (_a = process.env[constants_1.AWS_REGION_ENV]) !== null && _a !== void 0 ? _a : process.env[constants_1.AWS_DEFAULT_REGION_ENV];
      }
      if (!process.env[constants_1.ENV_IMDS_DISABLED]) {
        try {
          const endpoint = await (0, credential_provider_imds_1.getInstanceMetadataEndpoint)();
          return (await (0, credential_provider_imds_1.httpRequest)({ ...endpoint, path: constants_1.IMDS_REGION_PATH })).toString();
        } catch (e) {
        }
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-defaults-mode-node@3.279.0/node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/index.js
var require_dist_cjs32 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-defaults-mode-node@3.279.0/node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_resolveDefaultsModeConfig(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js
var require_runtimeConfig = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package2());
    var config_resolver_1 = __require("@aws-sdk/config-resolver");
    var hash_node_1 = require_dist_cjs22();
    var middleware_retry_1 = __require("@aws-sdk/middleware-retry");
    var node_config_provider_1 = require_dist_cjs16();
    var node_http_handler_1 = require_dist_cjs25();
    var util_body_length_node_1 = require_dist_cjs26();
    var util_retry_1 = require_dist_cjs28();
    var util_user_agent_node_1 = require_dist_cjs29();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var util_defaults_mode_node_1 = require_dist_cjs32();
    var smithy_client_2 = __require("@aws-sdk/smithy-client");
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: config?.requestHandler ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/SSOClient.js
var require_SSOClient = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/SSOClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOClient = void 0;
    var config_resolver_1 = __require("@aws-sdk/config-resolver");
    var middleware_content_length_1 = require_dist_cjs8();
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_host_header_1 = require_dist_cjs9();
    var middleware_logger_1 = require_dist_cjs10();
    var middleware_recursion_detection_1 = require_dist_cjs11();
    var middleware_retry_1 = __require("@aws-sdk/middleware-retry");
    var middleware_user_agent_1 = require_dist_cjs12();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var EndpointParameters_1 = require_EndpointParameters2();
    var runtimeConfig_1 = require_runtimeConfig();
    var SSOClient = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_5);
        super(_config_6);
        this.config = _config_6;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports.SSOClient = SSOClient;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/SSO.js
var require_SSO = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/SSO.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSO = void 0;
    var GetRoleCredentialsCommand_1 = require_GetRoleCredentialsCommand();
    var ListAccountRolesCommand_1 = require_ListAccountRolesCommand();
    var ListAccountsCommand_1 = require_ListAccountsCommand();
    var LogoutCommand_1 = require_LogoutCommand();
    var SSOClient_1 = require_SSOClient();
    var SSO = class extends SSOClient_1.SSOClient {
      getRoleCredentials(args, optionsOrCb, cb) {
        const command = new GetRoleCredentialsCommand_1.GetRoleCredentialsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listAccountRoles(args, optionsOrCb, cb) {
        const command = new ListAccountRolesCommand_1.ListAccountRolesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listAccounts(args, optionsOrCb, cb) {
        const command = new ListAccountsCommand_1.ListAccountsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      logout(args, optionsOrCb, cb) {
        const command = new LogoutCommand_1.LogoutCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports.SSO = SSO;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/commands/index.js
var require_commands = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/commands/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_GetRoleCredentialsCommand(), exports);
    tslib_1.__exportStar(require_ListAccountRolesCommand(), exports);
    tslib_1.__exportStar(require_ListAccountsCommand(), exports);
    tslib_1.__exportStar(require_LogoutCommand(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/models/index.js
var require_models = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/models/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_02(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/pagination/Interfaces.js
var require_Interfaces = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/pagination/Interfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountRolesPaginator.js
var require_ListAccountRolesPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountRolesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAccountRoles = void 0;
    var ListAccountRolesCommand_1 = require_ListAccountRolesCommand();
    var SSO_1 = require_SSO();
    var SSOClient_1 = require_SSOClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAccountRolesCommand_1.ListAccountRolesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listAccountRoles(input, ...args);
    };
    async function* paginateListAccountRoles(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.nextToken = token;
        input["maxResults"] = config.pageSize;
        if (config.client instanceof SSO_1.SSO) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSOClient_1.SSOClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSO | SSOClient");
        }
        yield page;
        const prevToken = token;
        token = page.nextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAccountRoles = paginateListAccountRoles;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountsPaginator.js
var require_ListAccountsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAccounts = void 0;
    var ListAccountsCommand_1 = require_ListAccountsCommand();
    var SSO_1 = require_SSO();
    var SSOClient_1 = require_SSOClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAccountsCommand_1.ListAccountsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listAccounts(input, ...args);
    };
    async function* paginateListAccounts(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.nextToken = token;
        input["maxResults"] = config.pageSize;
        if (config.client instanceof SSO_1.SSO) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSOClient_1.SSOClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSO | SSOClient");
        }
        yield page;
        const prevToken = token;
        token = page.nextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAccounts = paginateListAccounts;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/pagination/index.js
var require_pagination2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/pagination/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Interfaces(), exports);
    tslib_1.__exportStar(require_ListAccountRolesPaginator(), exports);
    tslib_1.__exportStar(require_ListAccountsPaginator(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/index.js
var require_dist_cjs33 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_SSO(), exports);
    tslib_1.__exportStar(require_SSOClient(), exports);
    tslib_1.__exportStar(require_commands(), exports);
    tslib_1.__exportStar(require_models(), exports);
    tslib_1.__exportStar(require_pagination2(), exports);
    var SSOServiceException_1 = require_SSOServiceException();
    Object.defineProperty(exports, "SSOServiceException", { enumerable: true, get: function() {
      return SSOServiceException_1.SSOServiceException;
    } });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+token-providers@3.279.0/node_modules/@aws-sdk/token-providers/dist-cjs/constants.js
var require_constants6 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+token-providers@3.279.0/node_modules/@aws-sdk/token-providers/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.REFRESH_MESSAGE = exports.EXPIRE_WINDOW_MS = void 0;
    exports.EXPIRE_WINDOW_MS = 5 * 60 * 1e3;
    exports.REFRESH_MESSAGE = `To refresh this SSO session run 'aws sso login' with the corresponding profile.`;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/SSOOIDCServiceException.js
var require_SSOOIDCServiceException = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/SSOOIDCServiceException.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOOIDCServiceException = void 0;
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var SSOOIDCServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, SSOOIDCServiceException.prototype);
      }
    };
    exports.SSOOIDCServiceException = SSOOIDCServiceException;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/models_0.js
var require_models_03 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/models_0.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StartDeviceAuthorizationResponseFilterSensitiveLog = exports.StartDeviceAuthorizationRequestFilterSensitiveLog = exports.RegisterClientResponseFilterSensitiveLog = exports.RegisterClientRequestFilterSensitiveLog = exports.CreateTokenResponseFilterSensitiveLog = exports.CreateTokenRequestFilterSensitiveLog = exports.InvalidClientMetadataException = exports.UnsupportedGrantTypeException = exports.UnauthorizedClientException = exports.SlowDownException = exports.InvalidScopeException = exports.InvalidRequestException = exports.InvalidGrantException = exports.InvalidClientException = exports.InternalServerException = exports.ExpiredTokenException = exports.AuthorizationPendingException = exports.AccessDeniedException = void 0;
    var SSOOIDCServiceException_1 = require_SSOOIDCServiceException();
    var AccessDeniedException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "AccessDeniedException",
          $fault: "client",
          ...opts
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.AccessDeniedException = AccessDeniedException;
    var AuthorizationPendingException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "AuthorizationPendingException",
          $fault: "client",
          ...opts
        });
        this.name = "AuthorizationPendingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AuthorizationPendingException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.AuthorizationPendingException = AuthorizationPendingException;
    var ExpiredTokenException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "ExpiredTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "ExpiredTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ExpiredTokenException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.ExpiredTokenException = ExpiredTokenException;
    var InternalServerException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InternalServerException",
          $fault: "server",
          ...opts
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.InternalServerException = InternalServerException;
    var InvalidClientException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidClientException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidClientException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.InvalidClientException = InvalidClientException;
    var InvalidGrantException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidGrantException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidGrantException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidGrantException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.InvalidGrantException = InvalidGrantException;
    var InvalidRequestException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.InvalidRequestException = InvalidRequestException;
    var InvalidScopeException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidScopeException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidScopeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidScopeException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.InvalidScopeException = InvalidScopeException;
    var SlowDownException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "SlowDownException",
          $fault: "client",
          ...opts
        });
        this.name = "SlowDownException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SlowDownException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.SlowDownException = SlowDownException;
    var UnauthorizedClientException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "UnauthorizedClientException",
          $fault: "client",
          ...opts
        });
        this.name = "UnauthorizedClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnauthorizedClientException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.UnauthorizedClientException = UnauthorizedClientException;
    var UnsupportedGrantTypeException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "UnsupportedGrantTypeException",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedGrantTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedGrantTypeException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.UnsupportedGrantTypeException = UnsupportedGrantTypeException;
    var InvalidClientMetadataException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidClientMetadataException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidClientMetadataException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidClientMetadataException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.InvalidClientMetadataException = InvalidClientMetadataException;
    var CreateTokenRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateTokenRequestFilterSensitiveLog = CreateTokenRequestFilterSensitiveLog;
    var CreateTokenResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateTokenResponseFilterSensitiveLog = CreateTokenResponseFilterSensitiveLog;
    var RegisterClientRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RegisterClientRequestFilterSensitiveLog = RegisterClientRequestFilterSensitiveLog;
    var RegisterClientResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RegisterClientResponseFilterSensitiveLog = RegisterClientResponseFilterSensitiveLog;
    var StartDeviceAuthorizationRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StartDeviceAuthorizationRequestFilterSensitiveLog = StartDeviceAuthorizationRequestFilterSensitiveLog;
    var StartDeviceAuthorizationResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StartDeviceAuthorizationResponseFilterSensitiveLog = StartDeviceAuthorizationResponseFilterSensitiveLog;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/protocols/Aws_restJson1.js
var require_Aws_restJson12 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/protocols/Aws_restJson1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deserializeAws_restJson1StartDeviceAuthorizationCommand = exports.deserializeAws_restJson1RegisterClientCommand = exports.deserializeAws_restJson1CreateTokenCommand = exports.serializeAws_restJson1StartDeviceAuthorizationCommand = exports.serializeAws_restJson1RegisterClientCommand = exports.serializeAws_restJson1CreateTokenCommand = void 0;
    var protocol_http_1 = require_dist_cjs7();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_03();
    var SSOOIDCServiceException_1 = require_SSOOIDCServiceException();
    var serializeAws_restJson1CreateTokenCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/token`;
      let body;
      body = JSON.stringify({
        ...input.clientId != null && { clientId: input.clientId },
        ...input.clientSecret != null && { clientSecret: input.clientSecret },
        ...input.code != null && { code: input.code },
        ...input.deviceCode != null && { deviceCode: input.deviceCode },
        ...input.grantType != null && { grantType: input.grantType },
        ...input.redirectUri != null && { redirectUri: input.redirectUri },
        ...input.refreshToken != null && { refreshToken: input.refreshToken },
        ...input.scope != null && { scope: serializeAws_restJson1Scopes(input.scope, context) }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1CreateTokenCommand = serializeAws_restJson1CreateTokenCommand;
    var serializeAws_restJson1RegisterClientCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/client/register`;
      let body;
      body = JSON.stringify({
        ...input.clientName != null && { clientName: input.clientName },
        ...input.clientType != null && { clientType: input.clientType },
        ...input.scopes != null && { scopes: serializeAws_restJson1Scopes(input.scopes, context) }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1RegisterClientCommand = serializeAws_restJson1RegisterClientCommand;
    var serializeAws_restJson1StartDeviceAuthorizationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/device_authorization`;
      let body;
      body = JSON.stringify({
        ...input.clientId != null && { clientId: input.clientId },
        ...input.clientSecret != null && { clientSecret: input.clientSecret },
        ...input.startUrl != null && { startUrl: input.startUrl }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1StartDeviceAuthorizationCommand = serializeAws_restJson1StartDeviceAuthorizationCommand;
    var deserializeAws_restJson1CreateTokenCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateTokenCommandError(output, context);
      }
      const contents = map3({
        $metadata: deserializeMetadata(output)
      });
      const data2 = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data2.accessToken != null) {
        contents.accessToken = (0, smithy_client_1.expectString)(data2.accessToken);
      }
      if (data2.expiresIn != null) {
        contents.expiresIn = (0, smithy_client_1.expectInt32)(data2.expiresIn);
      }
      if (data2.idToken != null) {
        contents.idToken = (0, smithy_client_1.expectString)(data2.idToken);
      }
      if (data2.refreshToken != null) {
        contents.refreshToken = (0, smithy_client_1.expectString)(data2.refreshToken);
      }
      if (data2.tokenType != null) {
        contents.tokenType = (0, smithy_client_1.expectString)(data2.tokenType);
      }
      return contents;
    };
    exports.deserializeAws_restJson1CreateTokenCommand = deserializeAws_restJson1CreateTokenCommand;
    var deserializeAws_restJson1CreateTokenCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.ssooidc#AccessDeniedException":
          throw await deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context);
        case "AuthorizationPendingException":
        case "com.amazonaws.ssooidc#AuthorizationPendingException":
          throw await deserializeAws_restJson1AuthorizationPendingExceptionResponse(parsedOutput, context);
        case "ExpiredTokenException":
        case "com.amazonaws.ssooidc#ExpiredTokenException":
          throw await deserializeAws_restJson1ExpiredTokenExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
          throw await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidClientException":
        case "com.amazonaws.ssooidc#InvalidClientException":
          throw await deserializeAws_restJson1InvalidClientExceptionResponse(parsedOutput, context);
        case "InvalidGrantException":
        case "com.amazonaws.ssooidc#InvalidGrantException":
          throw await deserializeAws_restJson1InvalidGrantExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "InvalidScopeException":
        case "com.amazonaws.ssooidc#InvalidScopeException":
          throw await deserializeAws_restJson1InvalidScopeExceptionResponse(parsedOutput, context);
        case "SlowDownException":
        case "com.amazonaws.ssooidc#SlowDownException":
          throw await deserializeAws_restJson1SlowDownExceptionResponse(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.ssooidc#UnauthorizedClientException":
          throw await deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context);
        case "UnsupportedGrantTypeException":
        case "com.amazonaws.ssooidc#UnsupportedGrantTypeException":
          throw await deserializeAws_restJson1UnsupportedGrantTypeExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOOIDCServiceException_1.SSOOIDCServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1RegisterClientCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1RegisterClientCommandError(output, context);
      }
      const contents = map3({
        $metadata: deserializeMetadata(output)
      });
      const data2 = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data2.authorizationEndpoint != null) {
        contents.authorizationEndpoint = (0, smithy_client_1.expectString)(data2.authorizationEndpoint);
      }
      if (data2.clientId != null) {
        contents.clientId = (0, smithy_client_1.expectString)(data2.clientId);
      }
      if (data2.clientIdIssuedAt != null) {
        contents.clientIdIssuedAt = (0, smithy_client_1.expectLong)(data2.clientIdIssuedAt);
      }
      if (data2.clientSecret != null) {
        contents.clientSecret = (0, smithy_client_1.expectString)(data2.clientSecret);
      }
      if (data2.clientSecretExpiresAt != null) {
        contents.clientSecretExpiresAt = (0, smithy_client_1.expectLong)(data2.clientSecretExpiresAt);
      }
      if (data2.tokenEndpoint != null) {
        contents.tokenEndpoint = (0, smithy_client_1.expectString)(data2.tokenEndpoint);
      }
      return contents;
    };
    exports.deserializeAws_restJson1RegisterClientCommand = deserializeAws_restJson1RegisterClientCommand;
    var deserializeAws_restJson1RegisterClientCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
          throw await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidClientMetadataException":
        case "com.amazonaws.ssooidc#InvalidClientMetadataException":
          throw await deserializeAws_restJson1InvalidClientMetadataExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "InvalidScopeException":
        case "com.amazonaws.ssooidc#InvalidScopeException":
          throw await deserializeAws_restJson1InvalidScopeExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOOIDCServiceException_1.SSOOIDCServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1StartDeviceAuthorizationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1StartDeviceAuthorizationCommandError(output, context);
      }
      const contents = map3({
        $metadata: deserializeMetadata(output)
      });
      const data2 = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data2.deviceCode != null) {
        contents.deviceCode = (0, smithy_client_1.expectString)(data2.deviceCode);
      }
      if (data2.expiresIn != null) {
        contents.expiresIn = (0, smithy_client_1.expectInt32)(data2.expiresIn);
      }
      if (data2.interval != null) {
        contents.interval = (0, smithy_client_1.expectInt32)(data2.interval);
      }
      if (data2.userCode != null) {
        contents.userCode = (0, smithy_client_1.expectString)(data2.userCode);
      }
      if (data2.verificationUri != null) {
        contents.verificationUri = (0, smithy_client_1.expectString)(data2.verificationUri);
      }
      if (data2.verificationUriComplete != null) {
        contents.verificationUriComplete = (0, smithy_client_1.expectString)(data2.verificationUriComplete);
      }
      return contents;
    };
    exports.deserializeAws_restJson1StartDeviceAuthorizationCommand = deserializeAws_restJson1StartDeviceAuthorizationCommand;
    var deserializeAws_restJson1StartDeviceAuthorizationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
          throw await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidClientException":
        case "com.amazonaws.ssooidc#InvalidClientException":
          throw await deserializeAws_restJson1InvalidClientExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "SlowDownException":
        case "com.amazonaws.ssooidc#SlowDownException":
          throw await deserializeAws_restJson1SlowDownExceptionResponse(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.ssooidc#UnauthorizedClientException":
          throw await deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOOIDCServiceException_1.SSOOIDCServiceException,
            errorCode
          });
      }
    };
    var map3 = smithy_client_1.map;
    var deserializeAws_restJson1AccessDeniedExceptionResponse = async (parsedOutput, context) => {
      const contents = map3({});
      const data2 = parsedOutput.body;
      if (data2.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data2.error);
      }
      if (data2.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data2.error_description);
      }
      const exception = new models_0_1.AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1AuthorizationPendingExceptionResponse = async (parsedOutput, context) => {
      const contents = map3({});
      const data2 = parsedOutput.body;
      if (data2.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data2.error);
      }
      if (data2.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data2.error_description);
      }
      const exception = new models_0_1.AuthorizationPendingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1ExpiredTokenExceptionResponse = async (parsedOutput, context) => {
      const contents = map3({});
      const data2 = parsedOutput.body;
      if (data2.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data2.error);
      }
      if (data2.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data2.error_description);
      }
      const exception = new models_0_1.ExpiredTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InternalServerExceptionResponse = async (parsedOutput, context) => {
      const contents = map3({});
      const data2 = parsedOutput.body;
      if (data2.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data2.error);
      }
      if (data2.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data2.error_description);
      }
      const exception = new models_0_1.InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InvalidClientExceptionResponse = async (parsedOutput, context) => {
      const contents = map3({});
      const data2 = parsedOutput.body;
      if (data2.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data2.error);
      }
      if (data2.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data2.error_description);
      }
      const exception = new models_0_1.InvalidClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InvalidClientMetadataExceptionResponse = async (parsedOutput, context) => {
      const contents = map3({});
      const data2 = parsedOutput.body;
      if (data2.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data2.error);
      }
      if (data2.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data2.error_description);
      }
      const exception = new models_0_1.InvalidClientMetadataException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InvalidGrantExceptionResponse = async (parsedOutput, context) => {
      const contents = map3({});
      const data2 = parsedOutput.body;
      if (data2.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data2.error);
      }
      if (data2.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data2.error_description);
      }
      const exception = new models_0_1.InvalidGrantException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InvalidRequestExceptionResponse = async (parsedOutput, context) => {
      const contents = map3({});
      const data2 = parsedOutput.body;
      if (data2.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data2.error);
      }
      if (data2.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data2.error_description);
      }
      const exception = new models_0_1.InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InvalidScopeExceptionResponse = async (parsedOutput, context) => {
      const contents = map3({});
      const data2 = parsedOutput.body;
      if (data2.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data2.error);
      }
      if (data2.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data2.error_description);
      }
      const exception = new models_0_1.InvalidScopeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1SlowDownExceptionResponse = async (parsedOutput, context) => {
      const contents = map3({});
      const data2 = parsedOutput.body;
      if (data2.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data2.error);
      }
      if (data2.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data2.error_description);
      }
      const exception = new models_0_1.SlowDownException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1UnauthorizedClientExceptionResponse = async (parsedOutput, context) => {
      const contents = map3({});
      const data2 = parsedOutput.body;
      if (data2.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data2.error);
      }
      if (data2.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data2.error_description);
      }
      const exception = new models_0_1.UnauthorizedClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1UnsupportedGrantTypeExceptionResponse = async (parsedOutput, context) => {
      const contents = map3({});
      const data2 = parsedOutput.body;
      if (data2.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data2.error);
      }
      if (data2.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data2.error_description);
      }
      const exception = new models_0_1.UnsupportedGrantTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var serializeAws_restJson1Scopes = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        return JSON.parse(encoded);
      }
      return {};
    });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      value.message = value.message ?? value.Message;
      return value;
    };
    var loadRestJsonErrorCode = (output, data2) => {
      const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
          cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data2.code !== void 0) {
        return sanitizeErrorCode(data2.code);
      }
      if (data2["__type"] !== void 0) {
        return sanitizeErrorCode(data2["__type"]);
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/CreateTokenCommand.js
var require_CreateTokenCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/CreateTokenCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateTokenCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson12();
    var CreateTokenCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateTokenCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOOIDCClient";
        const commandName = "CreateTokenCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateTokenRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateTokenResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1CreateTokenCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1CreateTokenCommand)(output, context);
      }
    };
    exports.CreateTokenCommand = CreateTokenCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/RegisterClientCommand.js
var require_RegisterClientCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/RegisterClientCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RegisterClientCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson12();
    var RegisterClientCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, RegisterClientCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOOIDCClient";
        const commandName = "RegisterClientCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.RegisterClientRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.RegisterClientResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1RegisterClientCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1RegisterClientCommand)(output, context);
      }
    };
    exports.RegisterClientCommand = RegisterClientCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/StartDeviceAuthorizationCommand.js
var require_StartDeviceAuthorizationCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/StartDeviceAuthorizationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StartDeviceAuthorizationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson12();
    var StartDeviceAuthorizationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, StartDeviceAuthorizationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOOIDCClient";
        const commandName = "StartDeviceAuthorizationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.StartDeviceAuthorizationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.StartDeviceAuthorizationResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1StartDeviceAuthorizationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1StartDeviceAuthorizationCommand)(output, context);
      }
    };
    exports.StartDeviceAuthorizationCommand = StartDeviceAuthorizationCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/EndpointParameters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "awsssooidc"
      };
    };
    exports.resolveClientEndpointParameters = resolveClientEndpointParameters;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/package.json
var require_package4 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/package.json"(exports, module) {
    module.exports = {
      name: "@aws-sdk/client-sso-oidc",
      description: "AWS SDK for JavaScript Sso Oidc Client for Node.js, Browser and React Native",
      version: "3.279.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sso-oidc"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/config-resolver": "3.272.0",
        "@aws-sdk/fetch-http-handler": "3.272.0",
        "@aws-sdk/hash-node": "3.272.0",
        "@aws-sdk/invalid-dependency": "3.272.0",
        "@aws-sdk/middleware-content-length": "3.272.0",
        "@aws-sdk/middleware-endpoint": "3.272.0",
        "@aws-sdk/middleware-host-header": "3.278.0",
        "@aws-sdk/middleware-logger": "3.272.0",
        "@aws-sdk/middleware-recursion-detection": "3.272.0",
        "@aws-sdk/middleware-retry": "3.272.0",
        "@aws-sdk/middleware-serde": "3.272.0",
        "@aws-sdk/middleware-stack": "3.272.0",
        "@aws-sdk/middleware-user-agent": "3.272.0",
        "@aws-sdk/node-config-provider": "3.272.0",
        "@aws-sdk/node-http-handler": "3.272.0",
        "@aws-sdk/protocol-http": "3.272.0",
        "@aws-sdk/smithy-client": "3.279.0",
        "@aws-sdk/types": "3.272.0",
        "@aws-sdk/url-parser": "3.272.0",
        "@aws-sdk/util-base64": "3.208.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.208.0",
        "@aws-sdk/util-defaults-mode-browser": "3.279.0",
        "@aws-sdk/util-defaults-mode-node": "3.279.0",
        "@aws-sdk/util-endpoints": "3.272.0",
        "@aws-sdk/util-retry": "3.272.0",
        "@aws-sdk/util-user-agent-browser": "3.272.0",
        "@aws-sdk/util-user-agent-node": "3.272.0",
        "@aws-sdk/util-utf8": "3.254.0",
        tslib: "^2.3.1"
      },
      devDependencies: {
        "@aws-sdk/service-client-documentation-generator": "3.208.0",
        "@tsconfig/node14": "1.0.3",
        "@types/node": "^14.14.31",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.19.2",
        typescript: "~4.6.2"
      },
      overrides: {
        typedoc: {
          typescript: "~4.6.2"
        }
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso-oidc",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sso-oidc"
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/ruleset.js
var require_ruleset2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/ruleset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ruleSet = void 0;
    var p = "required";
    var q = "fn";
    var r = "argv";
    var s = "ref";
    var a = "PartitionResult";
    var b = "tree";
    var c = "error";
    var d = "endpoint";
    var e = { [p]: false, "type": "String" };
    var f = { [p]: true, "default": false, "type": "Boolean" };
    var g = { [s]: "Endpoint" };
    var h = { [q]: "booleanEquals", [r]: [{ [s]: "UseFIPS" }, true] };
    var i = { [q]: "booleanEquals", [r]: [{ [s]: "UseDualStack" }, true] };
    var j = {};
    var k = { [q]: "booleanEquals", [r]: [true, { [q]: "getAttr", [r]: [{ [s]: a }, "supportsFIPS"] }] };
    var l = { [q]: "booleanEquals", [r]: [true, { [q]: "getAttr", [r]: [{ [s]: a }, "supportsDualStack"] }] };
    var m = [g];
    var n = [h];
    var o = [i];
    var _data = { version: "1.0", parameters: { Region: e, UseDualStack: f, UseFIPS: f, Endpoint: e }, rules: [{ conditions: [{ [q]: "aws.partition", [r]: [{ [s]: "Region" }], assign: a }], type: b, rules: [{ conditions: [{ [q]: "isSet", [r]: m }, { [q]: "parseURL", [r]: m, assign: "url" }], type: b, rules: [{ conditions: n, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: c }, { type: b, rules: [{ conditions: o, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: c }, { endpoint: { url: g, properties: j, headers: j }, type: d }] }] }, { conditions: [h, i], type: b, rules: [{ conditions: [k, l], type: b, rules: [{ endpoint: { url: "https://oidc-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: j, headers: j }, type: d }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: c }] }, { conditions: n, type: b, rules: [{ conditions: [k], type: b, rules: [{ type: b, rules: [{ endpoint: { url: "https://oidc-fips.{Region}.{PartitionResult#dnsSuffix}", properties: j, headers: j }, type: d }] }] }, { error: "FIPS is enabled but this partition does not support FIPS", type: c }] }, { conditions: o, type: b, rules: [{ conditions: [l], type: b, rules: [{ endpoint: { url: "https://oidc.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: j, headers: j }, type: d }] }, { error: "DualStack is enabled but this partition does not support DualStack", type: c }] }, { endpoint: { url: "https://oidc.{Region}.{PartitionResult#dnsSuffix}", properties: j, headers: j }, type: d }] }] };
    exports.ruleSet = _data;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/endpointResolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs31();
    var ruleset_1 = require_ruleset2();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var url_parser_1 = require_dist_cjs3();
    var util_base64_1 = require_dist_cjs30();
    var util_utf8_1 = require_dist_cjs21();
    var endpointResolver_1 = require_endpointResolver2();
    var getRuntimeConfig = (config) => ({
      apiVersion: "2019-06-10",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
      serviceId: config?.serviceId ?? "SSO OIDC",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    });
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.js
var require_runtimeConfig2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package4());
    var config_resolver_1 = __require("@aws-sdk/config-resolver");
    var hash_node_1 = require_dist_cjs22();
    var middleware_retry_1 = __require("@aws-sdk/middleware-retry");
    var node_config_provider_1 = require_dist_cjs16();
    var node_http_handler_1 = require_dist_cjs25();
    var util_body_length_node_1 = require_dist_cjs26();
    var util_retry_1 = require_dist_cjs28();
    var util_user_agent_node_1 = require_dist_cjs29();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared2();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var util_defaults_mode_node_1 = require_dist_cjs32();
    var smithy_client_2 = __require("@aws-sdk/smithy-client");
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: config?.requestHandler ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/SSOOIDCClient.js
var require_SSOOIDCClient = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/SSOOIDCClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOOIDCClient = void 0;
    var config_resolver_1 = __require("@aws-sdk/config-resolver");
    var middleware_content_length_1 = require_dist_cjs8();
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_host_header_1 = require_dist_cjs9();
    var middleware_logger_1 = require_dist_cjs10();
    var middleware_recursion_detection_1 = require_dist_cjs11();
    var middleware_retry_1 = __require("@aws-sdk/middleware-retry");
    var middleware_user_agent_1 = require_dist_cjs12();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var EndpointParameters_1 = require_EndpointParameters3();
    var runtimeConfig_1 = require_runtimeConfig2();
    var SSOOIDCClient = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_5);
        super(_config_6);
        this.config = _config_6;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports.SSOOIDCClient = SSOOIDCClient;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/SSOOIDC.js
var require_SSOOIDC = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/SSOOIDC.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOOIDC = void 0;
    var CreateTokenCommand_1 = require_CreateTokenCommand();
    var RegisterClientCommand_1 = require_RegisterClientCommand();
    var StartDeviceAuthorizationCommand_1 = require_StartDeviceAuthorizationCommand();
    var SSOOIDCClient_1 = require_SSOOIDCClient();
    var SSOOIDC = class extends SSOOIDCClient_1.SSOOIDCClient {
      createToken(args, optionsOrCb, cb) {
        const command = new CreateTokenCommand_1.CreateTokenCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      registerClient(args, optionsOrCb, cb) {
        const command = new RegisterClientCommand_1.RegisterClientCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      startDeviceAuthorization(args, optionsOrCb, cb) {
        const command = new StartDeviceAuthorizationCommand_1.StartDeviceAuthorizationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports.SSOOIDC = SSOOIDC;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/index.js
var require_commands2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_CreateTokenCommand(), exports);
    tslib_1.__exportStar(require_RegisterClientCommand(), exports);
    tslib_1.__exportStar(require_StartDeviceAuthorizationCommand(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/index.js
var require_models2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_03(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/index.js
var require_dist_cjs34 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOOIDCServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_SSOOIDC(), exports);
    tslib_1.__exportStar(require_SSOOIDCClient(), exports);
    tslib_1.__exportStar(require_commands2(), exports);
    tslib_1.__exportStar(require_models2(), exports);
    var SSOOIDCServiceException_1 = require_SSOOIDCServiceException();
    Object.defineProperty(exports, "SSOOIDCServiceException", { enumerable: true, get: function() {
      return SSOOIDCServiceException_1.SSOOIDCServiceException;
    } });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+token-providers@3.279.0/node_modules/@aws-sdk/token-providers/dist-cjs/getSsoOidcClient.js
var require_getSsoOidcClient = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+token-providers@3.279.0/node_modules/@aws-sdk/token-providers/dist-cjs/getSsoOidcClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSsoOidcClient = void 0;
    var client_sso_oidc_1 = require_dist_cjs34();
    var ssoOidcClientsHash = {};
    var getSsoOidcClient = (ssoRegion) => {
      if (ssoOidcClientsHash[ssoRegion]) {
        return ssoOidcClientsHash[ssoRegion];
      }
      const ssoOidcClient = new client_sso_oidc_1.SSOOIDCClient({ region: ssoRegion });
      ssoOidcClientsHash[ssoRegion] = ssoOidcClient;
      return ssoOidcClient;
    };
    exports.getSsoOidcClient = getSsoOidcClient;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+token-providers@3.279.0/node_modules/@aws-sdk/token-providers/dist-cjs/getNewSsoOidcToken.js
var require_getNewSsoOidcToken = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+token-providers@3.279.0/node_modules/@aws-sdk/token-providers/dist-cjs/getNewSsoOidcToken.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getNewSsoOidcToken = void 0;
    var client_sso_oidc_1 = require_dist_cjs34();
    var getSsoOidcClient_1 = require_getSsoOidcClient();
    var getNewSsoOidcToken = (ssoToken, ssoRegion) => {
      const ssoOidcClient = (0, getSsoOidcClient_1.getSsoOidcClient)(ssoRegion);
      return ssoOidcClient.send(new client_sso_oidc_1.CreateTokenCommand({
        clientId: ssoToken.clientId,
        clientSecret: ssoToken.clientSecret,
        refreshToken: ssoToken.refreshToken,
        grantType: "refresh_token"
      }));
    };
    exports.getNewSsoOidcToken = getNewSsoOidcToken;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+token-providers@3.279.0/node_modules/@aws-sdk/token-providers/dist-cjs/validateTokenExpiry.js
var require_validateTokenExpiry = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+token-providers@3.279.0/node_modules/@aws-sdk/token-providers/dist-cjs/validateTokenExpiry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateTokenExpiry = void 0;
    var property_provider_1 = require_dist_cjs13();
    var constants_1 = require_constants6();
    var validateTokenExpiry = (token) => {
      if (token.expiration && token.expiration.getTime() < Date.now()) {
        throw new property_provider_1.TokenProviderError(`Token is expired. ${constants_1.REFRESH_MESSAGE}`, false);
      }
    };
    exports.validateTokenExpiry = validateTokenExpiry;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+token-providers@3.279.0/node_modules/@aws-sdk/token-providers/dist-cjs/validateTokenKey.js
var require_validateTokenKey = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+token-providers@3.279.0/node_modules/@aws-sdk/token-providers/dist-cjs/validateTokenKey.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateTokenKey = void 0;
    var property_provider_1 = require_dist_cjs13();
    var constants_1 = require_constants6();
    var validateTokenKey = (key, value, forRefresh = false) => {
      if (typeof value === "undefined") {
        throw new property_provider_1.TokenProviderError(`Value not present for '${key}' in SSO Token${forRefresh ? ". Cannot refresh" : ""}. ${constants_1.REFRESH_MESSAGE}`, false);
      }
    };
    exports.validateTokenKey = validateTokenKey;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+token-providers@3.279.0/node_modules/@aws-sdk/token-providers/dist-cjs/writeSSOTokenToFile.js
var require_writeSSOTokenToFile = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+token-providers@3.279.0/node_modules/@aws-sdk/token-providers/dist-cjs/writeSSOTokenToFile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.writeSSOTokenToFile = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs15();
    var fs_1 = __require("fs");
    var { writeFile: writeFile2 } = fs_1.promises;
    var writeSSOTokenToFile = (id, ssoToken) => {
      const tokenFilepath = (0, shared_ini_file_loader_1.getSSOTokenFilepath)(id);
      const tokenString = JSON.stringify(ssoToken, null, 2);
      return writeFile2(tokenFilepath, tokenString);
    };
    exports.writeSSOTokenToFile = writeSSOTokenToFile;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+token-providers@3.279.0/node_modules/@aws-sdk/token-providers/dist-cjs/fromSso.js
var require_fromSso = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+token-providers@3.279.0/node_modules/@aws-sdk/token-providers/dist-cjs/fromSso.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromSso = void 0;
    var property_provider_1 = require_dist_cjs13();
    var shared_ini_file_loader_1 = require_dist_cjs15();
    var constants_1 = require_constants6();
    var getNewSsoOidcToken_1 = require_getNewSsoOidcToken();
    var validateTokenExpiry_1 = require_validateTokenExpiry();
    var validateTokenKey_1 = require_validateTokenKey();
    var writeSSOTokenToFile_1 = require_writeSSOTokenToFile();
    var lastRefreshAttemptTime = new Date(0);
    var fromSso = (init = {}) => async () => {
      const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
      const profileName = (0, shared_ini_file_loader_1.getProfileName)(init);
      const profile = profiles[profileName];
      if (!profile) {
        throw new property_provider_1.TokenProviderError(`Profile '${profileName}' could not be found in shared credentials file.`, false);
      } else if (!profile["sso_session"]) {
        throw new property_provider_1.TokenProviderError(`Profile '${profileName}' is missing required property 'sso_session'.`);
      }
      const ssoSessionName = profile["sso_session"];
      const ssoSessions = await (0, shared_ini_file_loader_1.loadSsoSessionData)(init);
      const ssoSession = ssoSessions[ssoSessionName];
      if (!ssoSession) {
        throw new property_provider_1.TokenProviderError(`Sso session '${ssoSessionName}' could not be found in shared credentials file.`, false);
      }
      for (const ssoSessionRequiredKey of ["sso_start_url", "sso_region"]) {
        if (!ssoSession[ssoSessionRequiredKey]) {
          throw new property_provider_1.TokenProviderError(`Sso session '${ssoSessionName}' is missing required property '${ssoSessionRequiredKey}'.`, false);
        }
      }
      const ssoStartUrl = ssoSession["sso_start_url"];
      const ssoRegion = ssoSession["sso_region"];
      let ssoToken;
      try {
        ssoToken = await (0, shared_ini_file_loader_1.getSSOTokenFromFile)(ssoSessionName);
      } catch (e) {
        throw new property_provider_1.TokenProviderError(`The SSO session token associated with profile=${profileName} was not found or is invalid. ${constants_1.REFRESH_MESSAGE}`, false);
      }
      (0, validateTokenKey_1.validateTokenKey)("accessToken", ssoToken.accessToken);
      (0, validateTokenKey_1.validateTokenKey)("expiresAt", ssoToken.expiresAt);
      const { accessToken, expiresAt } = ssoToken;
      const existingToken = { token: accessToken, expiration: new Date(expiresAt) };
      if (existingToken.expiration.getTime() - Date.now() > constants_1.EXPIRE_WINDOW_MS) {
        return existingToken;
      }
      if (Date.now() - lastRefreshAttemptTime.getTime() < 30 * 1e3) {
        (0, validateTokenExpiry_1.validateTokenExpiry)(existingToken);
        return existingToken;
      }
      (0, validateTokenKey_1.validateTokenKey)("clientId", ssoToken.clientId, true);
      (0, validateTokenKey_1.validateTokenKey)("clientSecret", ssoToken.clientSecret, true);
      (0, validateTokenKey_1.validateTokenKey)("refreshToken", ssoToken.refreshToken, true);
      try {
        lastRefreshAttemptTime.setTime(Date.now());
        const newSsoOidcToken = await (0, getNewSsoOidcToken_1.getNewSsoOidcToken)(ssoToken, ssoRegion);
        (0, validateTokenKey_1.validateTokenKey)("accessToken", newSsoOidcToken.accessToken);
        (0, validateTokenKey_1.validateTokenKey)("expiresIn", newSsoOidcToken.expiresIn);
        const newTokenExpiration = new Date(Date.now() + newSsoOidcToken.expiresIn * 1e3);
        try {
          await (0, writeSSOTokenToFile_1.writeSSOTokenToFile)(ssoSessionName, {
            ...ssoToken,
            accessToken: newSsoOidcToken.accessToken,
            expiresAt: newTokenExpiration.toISOString(),
            refreshToken: newSsoOidcToken.refreshToken
          });
        } catch (error2) {
        }
        return {
          token: newSsoOidcToken.accessToken,
          expiration: newTokenExpiration
        };
      } catch (error2) {
        (0, validateTokenExpiry_1.validateTokenExpiry)(existingToken);
        return existingToken;
      }
    };
    exports.fromSso = fromSso;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+token-providers@3.279.0/node_modules/@aws-sdk/token-providers/dist-cjs/fromStatic.js
var require_fromStatic3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+token-providers@3.279.0/node_modules/@aws-sdk/token-providers/dist-cjs/fromStatic.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromStatic = void 0;
    var property_provider_1 = require_dist_cjs13();
    var fromStatic = ({ token }) => async () => {
      if (!token || !token.token) {
        throw new property_provider_1.TokenProviderError(`Please pass a valid token to fromStatic`, false);
      }
      return token;
    };
    exports.fromStatic = fromStatic;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+token-providers@3.279.0/node_modules/@aws-sdk/token-providers/dist-cjs/nodeProvider.js
var require_nodeProvider = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+token-providers@3.279.0/node_modules/@aws-sdk/token-providers/dist-cjs/nodeProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.nodeProvider = void 0;
    var property_provider_1 = require_dist_cjs13();
    var fromSso_1 = require_fromSso();
    var nodeProvider = (init = {}) => (0, property_provider_1.memoize)((0, property_provider_1.chain)((0, fromSso_1.fromSso)(init), async () => {
      throw new property_provider_1.TokenProviderError("Could not load token from any providers", false);
    }), (token) => token.expiration !== void 0 && token.expiration.getTime() - Date.now() < 3e5, (token) => token.expiration !== void 0);
    exports.nodeProvider = nodeProvider;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+token-providers@3.279.0/node_modules/@aws-sdk/token-providers/dist-cjs/index.js
var require_dist_cjs35 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+token-providers@3.279.0/node_modules/@aws-sdk/token-providers/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromSso(), exports);
    tslib_1.__exportStar(require_fromStatic3(), exports);
    tslib_1.__exportStar(require_nodeProvider(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.279.0/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/resolveSSOCredentials.js
var require_resolveSSOCredentials = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.279.0/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/resolveSSOCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveSSOCredentials = void 0;
    var client_sso_1 = require_dist_cjs33();
    var property_provider_1 = require_dist_cjs13();
    var shared_ini_file_loader_1 = require_dist_cjs15();
    var token_providers_1 = require_dist_cjs35();
    var EXPIRE_WINDOW_MS = 15 * 60 * 1e3;
    var SHOULD_FAIL_CREDENTIAL_CHAIN = false;
    var resolveSSOCredentials = async ({ ssoStartUrl, ssoSession, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, profile }) => {
      let token;
      const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;
      if (ssoSession) {
        try {
          const _token = await (0, token_providers_1.fromSso)({ profile })();
          token = {
            accessToken: _token.token,
            expiresAt: new Date(_token.expiration).toISOString()
          };
        } catch (e) {
          throw new property_provider_1.CredentialsProviderError(e.message, SHOULD_FAIL_CREDENTIAL_CHAIN);
        }
      } else {
        try {
          token = await (0, shared_ini_file_loader_1.getSSOTokenFromFile)(ssoStartUrl);
        } catch (e) {
          throw new property_provider_1.CredentialsProviderError(`The SSO session associated with this profile is invalid. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);
        }
      }
      if (new Date(token.expiresAt).getTime() - Date.now() <= EXPIRE_WINDOW_MS) {
        throw new property_provider_1.CredentialsProviderError(`The SSO session associated with this profile has expired. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      const { accessToken } = token;
      const sso = ssoClient || new client_sso_1.SSOClient({ region: ssoRegion });
      let ssoResp;
      try {
        ssoResp = await sso.send(new client_sso_1.GetRoleCredentialsCommand({
          accountId: ssoAccountId,
          roleName: ssoRoleName,
          accessToken
        }));
      } catch (e) {
        throw property_provider_1.CredentialsProviderError.from(e, SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      const { roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration } = {} } = ssoResp;
      if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {
        throw new property_provider_1.CredentialsProviderError("SSO returns an invalid temporary credential.", SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      return { accessKeyId, secretAccessKey, sessionToken, expiration: new Date(expiration) };
    };
    exports.resolveSSOCredentials = resolveSSOCredentials;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.279.0/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/validateSsoProfile.js
var require_validateSsoProfile = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.279.0/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/validateSsoProfile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateSsoProfile = void 0;
    var property_provider_1 = require_dist_cjs13();
    var validateSsoProfile = (profile) => {
      const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;
      if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {
        throw new property_provider_1.CredentialsProviderError(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(profile).join(", ")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`, false);
      }
      return profile;
    };
    exports.validateSsoProfile = validateSsoProfile;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.279.0/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/fromSSO.js
var require_fromSSO = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.279.0/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/fromSSO.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromSSO = void 0;
    var property_provider_1 = require_dist_cjs13();
    var shared_ini_file_loader_1 = require_dist_cjs15();
    var isSsoProfile_1 = require_isSsoProfile();
    var resolveSSOCredentials_1 = require_resolveSSOCredentials();
    var validateSsoProfile_1 = require_validateSsoProfile();
    var fromSSO = (init = {}) => async () => {
      const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, ssoSession } = init;
      const profileName = (0, shared_ini_file_loader_1.getProfileName)(init);
      if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {
        const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
        const profile = profiles[profileName];
        if (!profile) {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} was not found.`);
        }
        if (!(0, isSsoProfile_1.isSsoProfile)(profile)) {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} is not configured with SSO credentials.`);
        }
        if (profile === null || profile === void 0 ? void 0 : profile.sso_session) {
          const ssoSessions = await (0, shared_ini_file_loader_1.loadSsoSessionData)(init);
          const session = ssoSessions[profile.sso_session];
          const conflictMsg = ` configurations in profile ${profileName} and sso-session ${profile.sso_session}`;
          if (ssoRegion && ssoRegion !== session.sso_region) {
            throw new property_provider_1.CredentialsProviderError(`Conflicting SSO region` + conflictMsg, false);
          }
          if (ssoStartUrl && ssoStartUrl !== session.sso_start_url) {
            throw new property_provider_1.CredentialsProviderError(`Conflicting SSO start_url` + conflictMsg, false);
          }
          profile.sso_region = session.sso_region;
          profile.sso_start_url = session.sso_start_url;
        }
        const { sso_start_url, sso_account_id, sso_region, sso_role_name, sso_session } = (0, validateSsoProfile_1.validateSsoProfile)(profile);
        return (0, resolveSSOCredentials_1.resolveSSOCredentials)({
          ssoStartUrl: sso_start_url,
          ssoSession: sso_session,
          ssoAccountId: sso_account_id,
          ssoRegion: sso_region,
          ssoRoleName: sso_role_name,
          ssoClient,
          profile: profileName
        });
      } else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {
        throw new property_provider_1.CredentialsProviderError('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"');
      } else {
        return (0, resolveSSOCredentials_1.resolveSSOCredentials)({
          ssoStartUrl,
          ssoSession,
          ssoAccountId,
          ssoRegion,
          ssoRoleName,
          ssoClient,
          profile: profileName
        });
      }
    };
    exports.fromSSO = fromSSO;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.279.0/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/types.js
var require_types6 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.279.0/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.279.0/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js
var require_dist_cjs36 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.279.0/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromSSO(), exports);
    tslib_1.__exportStar(require_isSsoProfile(), exports);
    tslib_1.__exportStar(require_types6(), exports);
    tslib_1.__exportStar(require_validateSsoProfile(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.279.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveSsoCredentials.js
var require_resolveSsoCredentials = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.279.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveSsoCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveSsoCredentials = exports.isSsoProfile = void 0;
    var credential_provider_sso_1 = require_dist_cjs36();
    var credential_provider_sso_2 = require_dist_cjs36();
    Object.defineProperty(exports, "isSsoProfile", { enumerable: true, get: function() {
      return credential_provider_sso_2.isSsoProfile;
    } });
    var resolveSsoCredentials = (data2) => {
      const { sso_start_url, sso_account_id, sso_session, sso_region, sso_role_name } = (0, credential_provider_sso_1.validateSsoProfile)(data2);
      return (0, credential_provider_sso_1.fromSSO)({
        ssoStartUrl: sso_start_url,
        ssoAccountId: sso_account_id,
        ssoSession: sso_session,
        ssoRegion: sso_region,
        ssoRoleName: sso_role_name
      })();
    };
    exports.resolveSsoCredentials = resolveSsoCredentials;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.279.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveStaticCredentials.js
var require_resolveStaticCredentials = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.279.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveStaticCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveStaticCredentials = exports.isStaticCredsProfile = void 0;
    var isStaticCredsProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.aws_access_key_id === "string" && typeof arg.aws_secret_access_key === "string" && ["undefined", "string"].indexOf(typeof arg.aws_session_token) > -1;
    exports.isStaticCredsProfile = isStaticCredsProfile;
    var resolveStaticCredentials = (profile) => Promise.resolve({
      accessKeyId: profile.aws_access_key_id,
      secretAccessKey: profile.aws_secret_access_key,
      sessionToken: profile.aws_session_token
    });
    exports.resolveStaticCredentials = resolveStaticCredentials;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-web-identity@3.272.0/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js
var require_fromWebToken = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-web-identity@3.272.0/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromWebToken = void 0;
    var property_provider_1 = require_dist_cjs13();
    var fromWebToken = (init) => () => {
      const { roleArn, roleSessionName, webIdentityToken, providerId, policyArns, policy, durationSeconds, roleAssumerWithWebIdentity } = init;
      if (!roleAssumerWithWebIdentity) {
        throw new property_provider_1.CredentialsProviderError(`Role Arn '${roleArn}' needs to be assumed with web identity, but no role assumption callback was provided.`, false);
      }
      return roleAssumerWithWebIdentity({
        RoleArn: roleArn,
        RoleSessionName: roleSessionName !== null && roleSessionName !== void 0 ? roleSessionName : `aws-sdk-js-session-${Date.now()}`,
        WebIdentityToken: webIdentityToken,
        ProviderId: providerId,
        PolicyArns: policyArns,
        Policy: policy,
        DurationSeconds: durationSeconds
      });
    };
    exports.fromWebToken = fromWebToken;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-web-identity@3.272.0/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js
var require_fromTokenFile = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-web-identity@3.272.0/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromTokenFile = void 0;
    var property_provider_1 = require_dist_cjs13();
    var fs_1 = __require("fs");
    var fromWebToken_1 = require_fromWebToken();
    var ENV_TOKEN_FILE = "AWS_WEB_IDENTITY_TOKEN_FILE";
    var ENV_ROLE_ARN = "AWS_ROLE_ARN";
    var ENV_ROLE_SESSION_NAME = "AWS_ROLE_SESSION_NAME";
    var fromTokenFile = (init = {}) => async () => {
      return resolveTokenFile(init);
    };
    exports.fromTokenFile = fromTokenFile;
    var resolveTokenFile = (init) => {
      var _a, _b, _c;
      const webIdentityTokenFile = (_a = init === null || init === void 0 ? void 0 : init.webIdentityTokenFile) !== null && _a !== void 0 ? _a : process.env[ENV_TOKEN_FILE];
      const roleArn = (_b = init === null || init === void 0 ? void 0 : init.roleArn) !== null && _b !== void 0 ? _b : process.env[ENV_ROLE_ARN];
      const roleSessionName = (_c = init === null || init === void 0 ? void 0 : init.roleSessionName) !== null && _c !== void 0 ? _c : process.env[ENV_ROLE_SESSION_NAME];
      if (!webIdentityTokenFile || !roleArn) {
        throw new property_provider_1.CredentialsProviderError("Web identity configuration not specified");
      }
      return (0, fromWebToken_1.fromWebToken)({
        ...init,
        webIdentityToken: (0, fs_1.readFileSync)(webIdentityTokenFile, { encoding: "ascii" }),
        roleArn,
        roleSessionName
      })();
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-web-identity@3.272.0/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js
var require_dist_cjs37 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-web-identity@3.272.0/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromTokenFile(), exports);
    tslib_1.__exportStar(require_fromWebToken(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.279.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveWebIdentityCredentials.js
var require_resolveWebIdentityCredentials = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.279.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveWebIdentityCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveWebIdentityCredentials = exports.isWebIdentityProfile = void 0;
    var credential_provider_web_identity_1 = require_dist_cjs37();
    var isWebIdentityProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.web_identity_token_file === "string" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1;
    exports.isWebIdentityProfile = isWebIdentityProfile;
    var resolveWebIdentityCredentials = async (profile, options) => (0, credential_provider_web_identity_1.fromTokenFile)({
      webIdentityTokenFile: profile.web_identity_token_file,
      roleArn: profile.role_arn,
      roleSessionName: profile.role_session_name,
      roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity
    })();
    exports.resolveWebIdentityCredentials = resolveWebIdentityCredentials;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.279.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProfileData.js
var require_resolveProfileData = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.279.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProfileData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveProfileData = void 0;
    var property_provider_1 = require_dist_cjs13();
    var resolveAssumeRoleCredentials_1 = require_resolveAssumeRoleCredentials();
    var resolveProcessCredentials_1 = require_resolveProcessCredentials2();
    var resolveSsoCredentials_1 = require_resolveSsoCredentials();
    var resolveStaticCredentials_1 = require_resolveStaticCredentials();
    var resolveWebIdentityCredentials_1 = require_resolveWebIdentityCredentials();
    var resolveProfileData = async (profileName, profiles, options, visitedProfiles = {}) => {
      const data2 = profiles[profileName];
      if (Object.keys(visitedProfiles).length > 0 && (0, resolveStaticCredentials_1.isStaticCredsProfile)(data2)) {
        return (0, resolveStaticCredentials_1.resolveStaticCredentials)(data2);
      }
      if ((0, resolveAssumeRoleCredentials_1.isAssumeRoleProfile)(data2)) {
        return (0, resolveAssumeRoleCredentials_1.resolveAssumeRoleCredentials)(profileName, profiles, options, visitedProfiles);
      }
      if ((0, resolveStaticCredentials_1.isStaticCredsProfile)(data2)) {
        return (0, resolveStaticCredentials_1.resolveStaticCredentials)(data2);
      }
      if ((0, resolveWebIdentityCredentials_1.isWebIdentityProfile)(data2)) {
        return (0, resolveWebIdentityCredentials_1.resolveWebIdentityCredentials)(data2, options);
      }
      if ((0, resolveProcessCredentials_1.isProcessProfile)(data2)) {
        return (0, resolveProcessCredentials_1.resolveProcessCredentials)(options, profileName);
      }
      if ((0, resolveSsoCredentials_1.isSsoProfile)(data2)) {
        return (0, resolveSsoCredentials_1.resolveSsoCredentials)(data2);
      }
      throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} could not be found or parsed in shared credentials file.`);
    };
    exports.resolveProfileData = resolveProfileData;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.279.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/fromIni.js
var require_fromIni = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.279.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/fromIni.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromIni = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs15();
    var resolveProfileData_1 = require_resolveProfileData();
    var fromIni = (init = {}) => async () => {
      const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
      return (0, resolveProfileData_1.resolveProfileData)((0, shared_ini_file_loader_1.getProfileName)(init), profiles, init);
    };
    exports.fromIni = fromIni;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.279.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js
var require_dist_cjs38 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.279.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromIni(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-node@3.279.0/node_modules/@aws-sdk/credential-provider-node/dist-cjs/remoteProvider.js
var require_remoteProvider = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-node@3.279.0/node_modules/@aws-sdk/credential-provider-node/dist-cjs/remoteProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.remoteProvider = exports.ENV_IMDS_DISABLED = void 0;
    var credential_provider_imds_1 = require_dist_cjs17();
    var property_provider_1 = require_dist_cjs13();
    exports.ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
    var remoteProvider = (init) => {
      if (process.env[credential_provider_imds_1.ENV_CMDS_RELATIVE_URI] || process.env[credential_provider_imds_1.ENV_CMDS_FULL_URI]) {
        return (0, credential_provider_imds_1.fromContainerMetadata)(init);
      }
      if (process.env[exports.ENV_IMDS_DISABLED]) {
        return async () => {
          throw new property_provider_1.CredentialsProviderError("EC2 Instance Metadata Service access disabled");
        };
      }
      return (0, credential_provider_imds_1.fromInstanceMetadata)(init);
    };
    exports.remoteProvider = remoteProvider;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-node@3.279.0/node_modules/@aws-sdk/credential-provider-node/dist-cjs/defaultProvider.js
var require_defaultProvider = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-node@3.279.0/node_modules/@aws-sdk/credential-provider-node/dist-cjs/defaultProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultProvider = void 0;
    var credential_provider_env_1 = require_dist_cjs14();
    var credential_provider_ini_1 = require_dist_cjs38();
    var credential_provider_process_1 = require_dist_cjs18();
    var credential_provider_sso_1 = require_dist_cjs36();
    var credential_provider_web_identity_1 = require_dist_cjs37();
    var property_provider_1 = require_dist_cjs13();
    var shared_ini_file_loader_1 = require_dist_cjs15();
    var remoteProvider_1 = require_remoteProvider();
    var defaultProvider = (init = {}) => (0, property_provider_1.memoize)((0, property_provider_1.chain)(...init.profile || process.env[shared_ini_file_loader_1.ENV_PROFILE] ? [] : [(0, credential_provider_env_1.fromEnv)()], (0, credential_provider_sso_1.fromSSO)(init), (0, credential_provider_ini_1.fromIni)(init), (0, credential_provider_process_1.fromProcess)(init), (0, credential_provider_web_identity_1.fromTokenFile)(init), (0, remoteProvider_1.remoteProvider)(init), async () => {
      throw new property_provider_1.CredentialsProviderError("Could not load credentials from any providers", false);
    }), (credentials) => credentials.expiration !== void 0 && credentials.expiration.getTime() - Date.now() < 3e5, (credentials) => credentials.expiration !== void 0);
    exports.defaultProvider = defaultProvider;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-node@3.279.0/node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js
var require_dist_cjs39 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-node@3.279.0/node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_defaultProvider(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/endpoint/ruleset.js
var require_ruleset3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/endpoint/ruleset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ruleSet = void 0;
    var G = "type";
    var H = "rules";
    var I = "conditions";
    var J = "fn";
    var K = "argv";
    var L = "ref";
    var M = "url";
    var N = "properties";
    var O = "headers";
    var P = "authSchemes";
    var Q = "name";
    var R = "signingRegion";
    var S = "signingName";
    var a = true;
    var b = false;
    var c = "String";
    var d = "PartitionResult";
    var e = "tree";
    var f = "error";
    var g = "endpoint";
    var h = "stringEquals";
    var i = { "required": true, "default": false, [G]: "Boolean" };
    var j = { [L]: "Region" };
    var k = { [L]: "Endpoint" };
    var l = {};
    var m = { [J]: "getAttr", [K]: [{ [L]: d }, "name"] };
    var n = { [I]: [{ [J]: "booleanEquals", [K]: [{ [L]: "UseFIPS" }, true] }, { [J]: "booleanEquals", [K]: [{ [L]: "UseDualStack" }, true] }], [G]: e, [H]: [{ [I]: [{ [J]: "booleanEquals", [K]: [true, { [J]: "getAttr", [K]: [{ [L]: d }, "supportsFIPS"] }] }, { [J]: "booleanEquals", [K]: [true, { [J]: "getAttr", [K]: [{ [L]: d }, "supportsDualStack"] }] }], [G]: e, [H]: [{ [g]: { [M]: "https://iam-fips.{Region}.api.aws", [N]: {}, [O]: {} }, [G]: g }] }, { [f]: "FIPS and DualStack are enabled, but this partition does not support one or both", [G]: f }] };
    var o = { [f]: "FIPS and DualStack are enabled, but this partition does not support one or both", [G]: f };
    var p = { [M]: "https://iam-fips.amazonaws.com", [N]: { [P]: [{ [Q]: "sigv4", [R]: "us-east-1", [S]: "iam" }] }, [O]: {} };
    var q = { [f]: "FIPS is enabled but this partition does not support FIPS", [G]: f };
    var r = { [I]: [{ [J]: "booleanEquals", [K]: [{ [L]: "UseDualStack" }, true] }], [G]: e, [H]: [{ [I]: [{ [J]: "booleanEquals", [K]: [true, { [J]: "getAttr", [K]: [{ [L]: d }, "supportsDualStack"] }] }], [G]: e, [H]: [{ [g]: { [M]: "https://iam.{Region}.api.aws", [N]: {}, [O]: {} }, [G]: g }] }, { [f]: "DualStack is enabled but this partition does not support DualStack", [G]: f }] };
    var s = { [f]: "DualStack is enabled but this partition does not support DualStack", [G]: f };
    var t = { [M]: "https://iam.amazonaws.com", [N]: { [P]: [{ [Q]: "sigv4", [R]: "us-east-1", [S]: "iam" }] }, [O]: {} };
    var u = { [M]: "https://iam.cn-north-1.amazonaws.com.cn", [N]: { [P]: [{ [Q]: "sigv4", [R]: "cn-north-1", [S]: "iam" }] }, [O]: {} };
    var v = { [g]: { [M]: "https://iam.us-gov.amazonaws.com", [N]: { [P]: [{ [Q]: "sigv4", [R]: "us-gov-west-1", [S]: "iam" }] }, [O]: {} }, [G]: g };
    var w = { [M]: "https://iam.us-iso-east-1.c2s.ic.gov", [N]: { [P]: [{ [Q]: "sigv4", [R]: "us-iso-east-1", [S]: "iam" }] }, [O]: {} };
    var x = { [M]: "https://iam.us-isob-east-1.sc2s.sgov.gov", [N]: { [P]: [{ [Q]: "sigv4", [R]: "us-isob-east-1", [S]: "iam" }] }, [O]: {} };
    var y = { [I]: [{ [J]: h, [K]: [j, "aws-us-gov-global"] }], [g]: { [M]: "https://iam.us-gov.amazonaws.com", [N]: { [P]: [{ [Q]: "sigv4", [R]: "us-gov-west-1", [S]: "iam" }] }, [O]: {} }, [G]: g };
    var z = [{ [J]: "booleanEquals", [K]: [{ [L]: "UseFIPS" }, true] }];
    var A = [{ [J]: "booleanEquals", [K]: [{ [L]: "UseDualStack" }, true] }];
    var B = [{ [J]: "booleanEquals", [K]: [{ [L]: "UseFIPS" }, true] }, { [J]: "booleanEquals", [K]: [{ [L]: "UseDualStack" }, true] }];
    var C = [{ [J]: "booleanEquals", [K]: [true, { [J]: "getAttr", [K]: [{ [L]: d }, "supportsFIPS"] }] }, { [J]: "booleanEquals", [K]: [true, { [J]: "getAttr", [K]: [{ [L]: d }, "supportsDualStack"] }] }];
    var D = [{ [J]: "booleanEquals", [K]: [true, { [J]: "getAttr", [K]: [{ [L]: d }, "supportsFIPS"] }] }];
    var E = [{ [J]: "booleanEquals", [K]: [true, { [J]: "getAttr", [K]: [{ [L]: d }, "supportsDualStack"] }] }];
    var F = [{ [J]: h, [K]: [j, "aws-global"] }];
    var _data = { version: "1.0", parameters: { Region: { required: a, [G]: c }, UseDualStack: i, UseFIPS: i, Endpoint: { required: b, [G]: c } }, [H]: [{ [I]: [{ [J]: "aws.partition", [K]: [j], assign: d }], [G]: e, [H]: [{ [I]: [{ [J]: "isSet", [K]: [k] }], [G]: e, [H]: [{ [I]: z, error: "Invalid Configuration: FIPS and custom endpoint are not supported", [G]: f }, { [G]: e, [H]: [{ [I]: A, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", [G]: f }, { endpoint: { [M]: k, [N]: l, [O]: l }, [G]: g }] }] }, { [I]: [{ [J]: h, [K]: [m, "aws"] }], [G]: e, [H]: [n, { [I]: z, [G]: e, [H]: [{ [I]: D, [G]: e, [H]: [{ endpoint: p, [G]: g }] }, q] }, r, { endpoint: t, [G]: g }] }, { [I]: [{ [J]: h, [K]: [m, "aws-cn"] }], [G]: e, [H]: [{ [I]: B, [G]: e, [H]: [{ [I]: C, [G]: e, [H]: [{ endpoint: { [M]: "https://iam-fips.{Region}.api.amazonwebservices.com.cn", [N]: l, [O]: l }, [G]: g }] }, o] }, { [I]: z, [G]: e, [H]: [{ [I]: D, [G]: e, [H]: [{ endpoint: { [M]: "https://iam-fips.{Region}.amazonaws.com.cn", [N]: l, [O]: l }, [G]: g }] }, q] }, { [I]: A, [G]: e, [H]: [{ [I]: E, [G]: e, [H]: [{ endpoint: { [M]: "https://iam.{Region}.api.amazonwebservices.com.cn", [N]: l, [O]: l }, [G]: g }] }, s] }, { endpoint: u, [G]: g }] }, { [I]: [{ [J]: h, [K]: [m, "aws-us-gov"] }], [G]: e, [H]: [n, { [I]: z, [G]: e, [H]: [{ [I]: D, [G]: e, [H]: [v] }, q] }, r, v] }, { [I]: [{ [J]: h, [K]: [m, "aws-iso"] }], [G]: e, [H]: [{ [I]: z, [G]: e, [H]: [{ [I]: D, [G]: e, [H]: [{ endpoint: { [M]: "https://iam-fips.{Region}.c2s.ic.gov", [N]: l, [O]: l }, [G]: g }] }, q] }, { endpoint: w, [G]: g }] }, { [I]: [{ [J]: h, [K]: [m, "aws-iso-b"] }], [G]: e, [H]: [{ [I]: z, [G]: e, [H]: [{ [I]: D, [G]: e, [H]: [{ endpoint: { [M]: "https://iam-fips.{Region}.sc2s.sgov.gov", [N]: l, [O]: l }, [G]: g }] }, q] }, { endpoint: x, [G]: g }] }, { [I]: B, [G]: e, [H]: [{ [I]: C, [G]: e, [H]: [{ [G]: e, [H]: [{ endpoint: { [M]: "https://iam-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", [N]: l, [O]: l }, [G]: g }] }] }, o] }, { [I]: z, [G]: e, [H]: [{ [I]: D, [G]: e, [H]: [{ [G]: e, [H]: [{ [I]: F, endpoint: p, [G]: g }, y, { endpoint: { [M]: "https://iam-fips.{Region}.{PartitionResult#dnsSuffix}", [N]: l, [O]: l }, [G]: g }] }] }, q] }, { [I]: A, [G]: e, [H]: [{ [I]: E, [G]: e, [H]: [{ [G]: e, [H]: [{ endpoint: { [M]: "https://iam.{Region}.{PartitionResult#dualStackDnsSuffix}", [N]: l, [O]: l }, [G]: g }] }] }, s] }, { [G]: e, [H]: [{ [I]: F, endpoint: t, [G]: g }, { [I]: [{ [J]: h, [K]: [j, "aws-cn-global"] }], endpoint: u, [G]: g }, y, { [I]: [{ [J]: h, [K]: [j, "aws-iso-global"] }], endpoint: w, [G]: g }, { [I]: [{ [J]: h, [K]: [j, "aws-iso-b-global"] }], endpoint: x, [G]: g }, { endpoint: { [M]: "https://iam.{Region}.{PartitionResult#dnsSuffix}", [N]: l, [O]: l }, [G]: g }] }] }] };
    exports.ruleSet = _data;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/endpoint/endpointResolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs31();
    var ruleset_1 = require_ruleset3();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var url_parser_1 = require_dist_cjs3();
    var util_base64_1 = require_dist_cjs30();
    var util_utf8_1 = require_dist_cjs21();
    var endpointResolver_1 = require_endpointResolver3();
    var getRuntimeConfig = (config) => ({
      apiVersion: "2010-05-08",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
      serviceId: config?.serviceId ?? "IAM",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    });
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/runtimeConfig.js
var require_runtimeConfig3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package());
    var client_sts_1 = __require("@aws-sdk/client-sts");
    var config_resolver_1 = __require("@aws-sdk/config-resolver");
    var credential_provider_node_1 = require_dist_cjs39();
    var hash_node_1 = require_dist_cjs22();
    var middleware_retry_1 = __require("@aws-sdk/middleware-retry");
    var node_config_provider_1 = require_dist_cjs16();
    var node_http_handler_1 = require_dist_cjs25();
    var util_body_length_node_1 = require_dist_cjs26();
    var util_retry_1 = require_dist_cjs28();
    var util_user_agent_node_1 = require_dist_cjs29();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared3();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var util_defaults_mode_node_1 = require_dist_cjs32();
    var smithy_client_2 = __require("@aws-sdk/smithy-client");
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? (0, client_sts_1.decorateDefaultCredentialProvider)(credential_provider_node_1.defaultProvider),
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: config?.requestHandler ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/IAMClient.js
var require_IAMClient = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/IAMClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IAMClient = void 0;
    var config_resolver_1 = __require("@aws-sdk/config-resolver");
    var middleware_content_length_1 = require_dist_cjs8();
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_host_header_1 = require_dist_cjs9();
    var middleware_logger_1 = require_dist_cjs10();
    var middleware_recursion_detection_1 = require_dist_cjs11();
    var middleware_retry_1 = __require("@aws-sdk/middleware-retry");
    var middleware_signing_1 = __require("@aws-sdk/middleware-signing");
    var middleware_user_agent_1 = require_dist_cjs12();
    var smithy_client_1 = __require("@aws-sdk/smithy-client");
    var EndpointParameters_1 = require_EndpointParameters();
    var runtimeConfig_1 = require_runtimeConfig3();
    var IAMClient = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_signing_1.resolveAwsAuthConfig)(_config_5);
        const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_6);
        super(_config_7);
        this.config = _config_7;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports.IAMClient = IAMClient;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/IAM.js
var require_IAM = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/IAM.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IAM = void 0;
    var AddClientIDToOpenIDConnectProviderCommand_1 = require_AddClientIDToOpenIDConnectProviderCommand();
    var AddRoleToInstanceProfileCommand_1 = require_AddRoleToInstanceProfileCommand();
    var AddUserToGroupCommand_1 = require_AddUserToGroupCommand();
    var AttachGroupPolicyCommand_1 = require_AttachGroupPolicyCommand();
    var AttachRolePolicyCommand_1 = require_AttachRolePolicyCommand();
    var AttachUserPolicyCommand_1 = require_AttachUserPolicyCommand();
    var ChangePasswordCommand_1 = require_ChangePasswordCommand();
    var CreateAccessKeyCommand_1 = require_CreateAccessKeyCommand();
    var CreateAccountAliasCommand_1 = require_CreateAccountAliasCommand();
    var CreateGroupCommand_1 = require_CreateGroupCommand();
    var CreateInstanceProfileCommand_1 = require_CreateInstanceProfileCommand();
    var CreateLoginProfileCommand_1 = require_CreateLoginProfileCommand();
    var CreateOpenIDConnectProviderCommand_1 = require_CreateOpenIDConnectProviderCommand();
    var CreatePolicyCommand_1 = require_CreatePolicyCommand();
    var CreatePolicyVersionCommand_1 = require_CreatePolicyVersionCommand();
    var CreateRoleCommand_1 = require_CreateRoleCommand();
    var CreateSAMLProviderCommand_1 = require_CreateSAMLProviderCommand();
    var CreateServiceLinkedRoleCommand_1 = require_CreateServiceLinkedRoleCommand();
    var CreateServiceSpecificCredentialCommand_1 = require_CreateServiceSpecificCredentialCommand();
    var CreateUserCommand_1 = require_CreateUserCommand();
    var CreateVirtualMFADeviceCommand_1 = require_CreateVirtualMFADeviceCommand();
    var DeactivateMFADeviceCommand_1 = require_DeactivateMFADeviceCommand();
    var DeleteAccessKeyCommand_1 = require_DeleteAccessKeyCommand();
    var DeleteAccountAliasCommand_1 = require_DeleteAccountAliasCommand();
    var DeleteAccountPasswordPolicyCommand_1 = require_DeleteAccountPasswordPolicyCommand();
    var DeleteGroupCommand_1 = require_DeleteGroupCommand();
    var DeleteGroupPolicyCommand_1 = require_DeleteGroupPolicyCommand();
    var DeleteInstanceProfileCommand_1 = require_DeleteInstanceProfileCommand();
    var DeleteLoginProfileCommand_1 = require_DeleteLoginProfileCommand();
    var DeleteOpenIDConnectProviderCommand_1 = require_DeleteOpenIDConnectProviderCommand();
    var DeletePolicyCommand_1 = require_DeletePolicyCommand();
    var DeletePolicyVersionCommand_1 = require_DeletePolicyVersionCommand();
    var DeleteRoleCommand_1 = require_DeleteRoleCommand();
    var DeleteRolePermissionsBoundaryCommand_1 = require_DeleteRolePermissionsBoundaryCommand();
    var DeleteRolePolicyCommand_1 = require_DeleteRolePolicyCommand();
    var DeleteSAMLProviderCommand_1 = require_DeleteSAMLProviderCommand();
    var DeleteServerCertificateCommand_1 = require_DeleteServerCertificateCommand();
    var DeleteServiceLinkedRoleCommand_1 = require_DeleteServiceLinkedRoleCommand();
    var DeleteServiceSpecificCredentialCommand_1 = require_DeleteServiceSpecificCredentialCommand();
    var DeleteSigningCertificateCommand_1 = require_DeleteSigningCertificateCommand();
    var DeleteSSHPublicKeyCommand_1 = require_DeleteSSHPublicKeyCommand();
    var DeleteUserCommand_1 = require_DeleteUserCommand();
    var DeleteUserPermissionsBoundaryCommand_1 = require_DeleteUserPermissionsBoundaryCommand();
    var DeleteUserPolicyCommand_1 = require_DeleteUserPolicyCommand();
    var DeleteVirtualMFADeviceCommand_1 = require_DeleteVirtualMFADeviceCommand();
    var DetachGroupPolicyCommand_1 = require_DetachGroupPolicyCommand();
    var DetachRolePolicyCommand_1 = require_DetachRolePolicyCommand();
    var DetachUserPolicyCommand_1 = require_DetachUserPolicyCommand();
    var EnableMFADeviceCommand_1 = require_EnableMFADeviceCommand();
    var GenerateCredentialReportCommand_1 = require_GenerateCredentialReportCommand();
    var GenerateOrganizationsAccessReportCommand_1 = require_GenerateOrganizationsAccessReportCommand();
    var GenerateServiceLastAccessedDetailsCommand_1 = require_GenerateServiceLastAccessedDetailsCommand();
    var GetAccessKeyLastUsedCommand_1 = require_GetAccessKeyLastUsedCommand();
    var GetAccountAuthorizationDetailsCommand_1 = require_GetAccountAuthorizationDetailsCommand();
    var GetAccountPasswordPolicyCommand_1 = require_GetAccountPasswordPolicyCommand();
    var GetAccountSummaryCommand_1 = require_GetAccountSummaryCommand();
    var GetContextKeysForCustomPolicyCommand_1 = require_GetContextKeysForCustomPolicyCommand();
    var GetContextKeysForPrincipalPolicyCommand_1 = require_GetContextKeysForPrincipalPolicyCommand();
    var GetCredentialReportCommand_1 = require_GetCredentialReportCommand();
    var GetGroupCommand_1 = require_GetGroupCommand();
    var GetGroupPolicyCommand_1 = require_GetGroupPolicyCommand();
    var GetInstanceProfileCommand_1 = require_GetInstanceProfileCommand();
    var GetLoginProfileCommand_1 = require_GetLoginProfileCommand();
    var GetOpenIDConnectProviderCommand_1 = require_GetOpenIDConnectProviderCommand();
    var GetOrganizationsAccessReportCommand_1 = require_GetOrganizationsAccessReportCommand();
    var GetPolicyCommand_1 = require_GetPolicyCommand();
    var GetPolicyVersionCommand_1 = require_GetPolicyVersionCommand();
    var GetRoleCommand_1 = require_GetRoleCommand();
    var GetRolePolicyCommand_1 = require_GetRolePolicyCommand();
    var GetSAMLProviderCommand_1 = require_GetSAMLProviderCommand();
    var GetServerCertificateCommand_1 = require_GetServerCertificateCommand();
    var GetServiceLastAccessedDetailsCommand_1 = require_GetServiceLastAccessedDetailsCommand();
    var GetServiceLastAccessedDetailsWithEntitiesCommand_1 = require_GetServiceLastAccessedDetailsWithEntitiesCommand();
    var GetServiceLinkedRoleDeletionStatusCommand_1 = require_GetServiceLinkedRoleDeletionStatusCommand();
    var GetSSHPublicKeyCommand_1 = require_GetSSHPublicKeyCommand();
    var GetUserCommand_1 = require_GetUserCommand();
    var GetUserPolicyCommand_1 = require_GetUserPolicyCommand();
    var ListAccessKeysCommand_1 = require_ListAccessKeysCommand();
    var ListAccountAliasesCommand_1 = require_ListAccountAliasesCommand();
    var ListAttachedGroupPoliciesCommand_1 = require_ListAttachedGroupPoliciesCommand();
    var ListAttachedRolePoliciesCommand_1 = require_ListAttachedRolePoliciesCommand();
    var ListAttachedUserPoliciesCommand_1 = require_ListAttachedUserPoliciesCommand();
    var ListEntitiesForPolicyCommand_1 = require_ListEntitiesForPolicyCommand();
    var ListGroupPoliciesCommand_1 = require_ListGroupPoliciesCommand();
    var ListGroupsCommand_1 = require_ListGroupsCommand();
    var ListGroupsForUserCommand_1 = require_ListGroupsForUserCommand();
    var ListInstanceProfilesCommand_1 = require_ListInstanceProfilesCommand();
    var ListInstanceProfilesForRoleCommand_1 = require_ListInstanceProfilesForRoleCommand();
    var ListInstanceProfileTagsCommand_1 = require_ListInstanceProfileTagsCommand();
    var ListMFADevicesCommand_1 = require_ListMFADevicesCommand();
    var ListMFADeviceTagsCommand_1 = require_ListMFADeviceTagsCommand();
    var ListOpenIDConnectProvidersCommand_1 = require_ListOpenIDConnectProvidersCommand();
    var ListOpenIDConnectProviderTagsCommand_1 = require_ListOpenIDConnectProviderTagsCommand();
    var ListPoliciesCommand_1 = require_ListPoliciesCommand();
    var ListPoliciesGrantingServiceAccessCommand_1 = require_ListPoliciesGrantingServiceAccessCommand();
    var ListPolicyTagsCommand_1 = require_ListPolicyTagsCommand();
    var ListPolicyVersionsCommand_1 = require_ListPolicyVersionsCommand();
    var ListRolePoliciesCommand_1 = require_ListRolePoliciesCommand();
    var ListRolesCommand_1 = require_ListRolesCommand();
    var ListRoleTagsCommand_1 = require_ListRoleTagsCommand();
    var ListSAMLProvidersCommand_1 = require_ListSAMLProvidersCommand();
    var ListSAMLProviderTagsCommand_1 = require_ListSAMLProviderTagsCommand();
    var ListServerCertificatesCommand_1 = require_ListServerCertificatesCommand();
    var ListServerCertificateTagsCommand_1 = require_ListServerCertificateTagsCommand();
    var ListServiceSpecificCredentialsCommand_1 = require_ListServiceSpecificCredentialsCommand();
    var ListSigningCertificatesCommand_1 = require_ListSigningCertificatesCommand();
    var ListSSHPublicKeysCommand_1 = require_ListSSHPublicKeysCommand();
    var ListUserPoliciesCommand_1 = require_ListUserPoliciesCommand();
    var ListUsersCommand_1 = require_ListUsersCommand();
    var ListUserTagsCommand_1 = require_ListUserTagsCommand();
    var ListVirtualMFADevicesCommand_1 = require_ListVirtualMFADevicesCommand();
    var PutGroupPolicyCommand_1 = require_PutGroupPolicyCommand();
    var PutRolePermissionsBoundaryCommand_1 = require_PutRolePermissionsBoundaryCommand();
    var PutRolePolicyCommand_1 = require_PutRolePolicyCommand();
    var PutUserPermissionsBoundaryCommand_1 = require_PutUserPermissionsBoundaryCommand();
    var PutUserPolicyCommand_1 = require_PutUserPolicyCommand();
    var RemoveClientIDFromOpenIDConnectProviderCommand_1 = require_RemoveClientIDFromOpenIDConnectProviderCommand();
    var RemoveRoleFromInstanceProfileCommand_1 = require_RemoveRoleFromInstanceProfileCommand();
    var RemoveUserFromGroupCommand_1 = require_RemoveUserFromGroupCommand();
    var ResetServiceSpecificCredentialCommand_1 = require_ResetServiceSpecificCredentialCommand();
    var ResyncMFADeviceCommand_1 = require_ResyncMFADeviceCommand();
    var SetDefaultPolicyVersionCommand_1 = require_SetDefaultPolicyVersionCommand();
    var SetSecurityTokenServicePreferencesCommand_1 = require_SetSecurityTokenServicePreferencesCommand();
    var SimulateCustomPolicyCommand_1 = require_SimulateCustomPolicyCommand();
    var SimulatePrincipalPolicyCommand_1 = require_SimulatePrincipalPolicyCommand();
    var TagInstanceProfileCommand_1 = require_TagInstanceProfileCommand();
    var TagMFADeviceCommand_1 = require_TagMFADeviceCommand();
    var TagOpenIDConnectProviderCommand_1 = require_TagOpenIDConnectProviderCommand();
    var TagPolicyCommand_1 = require_TagPolicyCommand();
    var TagRoleCommand_1 = require_TagRoleCommand();
    var TagSAMLProviderCommand_1 = require_TagSAMLProviderCommand();
    var TagServerCertificateCommand_1 = require_TagServerCertificateCommand();
    var TagUserCommand_1 = require_TagUserCommand();
    var UntagInstanceProfileCommand_1 = require_UntagInstanceProfileCommand();
    var UntagMFADeviceCommand_1 = require_UntagMFADeviceCommand();
    var UntagOpenIDConnectProviderCommand_1 = require_UntagOpenIDConnectProviderCommand();
    var UntagPolicyCommand_1 = require_UntagPolicyCommand();
    var UntagRoleCommand_1 = require_UntagRoleCommand();
    var UntagSAMLProviderCommand_1 = require_UntagSAMLProviderCommand();
    var UntagServerCertificateCommand_1 = require_UntagServerCertificateCommand();
    var UntagUserCommand_1 = require_UntagUserCommand();
    var UpdateAccessKeyCommand_1 = require_UpdateAccessKeyCommand();
    var UpdateAccountPasswordPolicyCommand_1 = require_UpdateAccountPasswordPolicyCommand();
    var UpdateAssumeRolePolicyCommand_1 = require_UpdateAssumeRolePolicyCommand();
    var UpdateGroupCommand_1 = require_UpdateGroupCommand();
    var UpdateLoginProfileCommand_1 = require_UpdateLoginProfileCommand();
    var UpdateOpenIDConnectProviderThumbprintCommand_1 = require_UpdateOpenIDConnectProviderThumbprintCommand();
    var UpdateRoleCommand_1 = require_UpdateRoleCommand();
    var UpdateRoleDescriptionCommand_1 = require_UpdateRoleDescriptionCommand();
    var UpdateSAMLProviderCommand_1 = require_UpdateSAMLProviderCommand();
    var UpdateServerCertificateCommand_1 = require_UpdateServerCertificateCommand();
    var UpdateServiceSpecificCredentialCommand_1 = require_UpdateServiceSpecificCredentialCommand();
    var UpdateSigningCertificateCommand_1 = require_UpdateSigningCertificateCommand();
    var UpdateSSHPublicKeyCommand_1 = require_UpdateSSHPublicKeyCommand();
    var UpdateUserCommand_1 = require_UpdateUserCommand();
    var UploadServerCertificateCommand_1 = require_UploadServerCertificateCommand();
    var UploadSigningCertificateCommand_1 = require_UploadSigningCertificateCommand();
    var UploadSSHPublicKeyCommand_1 = require_UploadSSHPublicKeyCommand();
    var IAMClient_1 = require_IAMClient();
    var IAM = class extends IAMClient_1.IAMClient {
      addClientIDToOpenIDConnectProvider(args, optionsOrCb, cb) {
        const command = new AddClientIDToOpenIDConnectProviderCommand_1.AddClientIDToOpenIDConnectProviderCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      addRoleToInstanceProfile(args, optionsOrCb, cb) {
        const command = new AddRoleToInstanceProfileCommand_1.AddRoleToInstanceProfileCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      addUserToGroup(args, optionsOrCb, cb) {
        const command = new AddUserToGroupCommand_1.AddUserToGroupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      attachGroupPolicy(args, optionsOrCb, cb) {
        const command = new AttachGroupPolicyCommand_1.AttachGroupPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      attachRolePolicy(args, optionsOrCb, cb) {
        const command = new AttachRolePolicyCommand_1.AttachRolePolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      attachUserPolicy(args, optionsOrCb, cb) {
        const command = new AttachUserPolicyCommand_1.AttachUserPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      changePassword(args, optionsOrCb, cb) {
        const command = new ChangePasswordCommand_1.ChangePasswordCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createAccessKey(args, optionsOrCb, cb) {
        const command = new CreateAccessKeyCommand_1.CreateAccessKeyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createAccountAlias(args, optionsOrCb, cb) {
        const command = new CreateAccountAliasCommand_1.CreateAccountAliasCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createGroup(args, optionsOrCb, cb) {
        const command = new CreateGroupCommand_1.CreateGroupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createInstanceProfile(args, optionsOrCb, cb) {
        const command = new CreateInstanceProfileCommand_1.CreateInstanceProfileCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createLoginProfile(args, optionsOrCb, cb) {
        const command = new CreateLoginProfileCommand_1.CreateLoginProfileCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createOpenIDConnectProvider(args, optionsOrCb, cb) {
        const command = new CreateOpenIDConnectProviderCommand_1.CreateOpenIDConnectProviderCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createPolicy(args, optionsOrCb, cb) {
        const command = new CreatePolicyCommand_1.CreatePolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createPolicyVersion(args, optionsOrCb, cb) {
        const command = new CreatePolicyVersionCommand_1.CreatePolicyVersionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createRole(args, optionsOrCb, cb) {
        const command = new CreateRoleCommand_1.CreateRoleCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createSAMLProvider(args, optionsOrCb, cb) {
        const command = new CreateSAMLProviderCommand_1.CreateSAMLProviderCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createServiceLinkedRole(args, optionsOrCb, cb) {
        const command = new CreateServiceLinkedRoleCommand_1.CreateServiceLinkedRoleCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createServiceSpecificCredential(args, optionsOrCb, cb) {
        const command = new CreateServiceSpecificCredentialCommand_1.CreateServiceSpecificCredentialCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createUser(args, optionsOrCb, cb) {
        const command = new CreateUserCommand_1.CreateUserCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createVirtualMFADevice(args, optionsOrCb, cb) {
        const command = new CreateVirtualMFADeviceCommand_1.CreateVirtualMFADeviceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deactivateMFADevice(args, optionsOrCb, cb) {
        const command = new DeactivateMFADeviceCommand_1.DeactivateMFADeviceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteAccessKey(args, optionsOrCb, cb) {
        const command = new DeleteAccessKeyCommand_1.DeleteAccessKeyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteAccountAlias(args, optionsOrCb, cb) {
        const command = new DeleteAccountAliasCommand_1.DeleteAccountAliasCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteAccountPasswordPolicy(args, optionsOrCb, cb) {
        const command = new DeleteAccountPasswordPolicyCommand_1.DeleteAccountPasswordPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteGroup(args, optionsOrCb, cb) {
        const command = new DeleteGroupCommand_1.DeleteGroupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteGroupPolicy(args, optionsOrCb, cb) {
        const command = new DeleteGroupPolicyCommand_1.DeleteGroupPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteInstanceProfile(args, optionsOrCb, cb) {
        const command = new DeleteInstanceProfileCommand_1.DeleteInstanceProfileCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteLoginProfile(args, optionsOrCb, cb) {
        const command = new DeleteLoginProfileCommand_1.DeleteLoginProfileCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteOpenIDConnectProvider(args, optionsOrCb, cb) {
        const command = new DeleteOpenIDConnectProviderCommand_1.DeleteOpenIDConnectProviderCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deletePolicy(args, optionsOrCb, cb) {
        const command = new DeletePolicyCommand_1.DeletePolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deletePolicyVersion(args, optionsOrCb, cb) {
        const command = new DeletePolicyVersionCommand_1.DeletePolicyVersionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteRole(args, optionsOrCb, cb) {
        const command = new DeleteRoleCommand_1.DeleteRoleCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteRolePermissionsBoundary(args, optionsOrCb, cb) {
        const command = new DeleteRolePermissionsBoundaryCommand_1.DeleteRolePermissionsBoundaryCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteRolePolicy(args, optionsOrCb, cb) {
        const command = new DeleteRolePolicyCommand_1.DeleteRolePolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteSAMLProvider(args, optionsOrCb, cb) {
        const command = new DeleteSAMLProviderCommand_1.DeleteSAMLProviderCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteServerCertificate(args, optionsOrCb, cb) {
        const command = new DeleteServerCertificateCommand_1.DeleteServerCertificateCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteServiceLinkedRole(args, optionsOrCb, cb) {
        const command = new DeleteServiceLinkedRoleCommand_1.DeleteServiceLinkedRoleCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteServiceSpecificCredential(args, optionsOrCb, cb) {
        const command = new DeleteServiceSpecificCredentialCommand_1.DeleteServiceSpecificCredentialCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteSigningCertificate(args, optionsOrCb, cb) {
        const command = new DeleteSigningCertificateCommand_1.DeleteSigningCertificateCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteSSHPublicKey(args, optionsOrCb, cb) {
        const command = new DeleteSSHPublicKeyCommand_1.DeleteSSHPublicKeyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteUser(args, optionsOrCb, cb) {
        const command = new DeleteUserCommand_1.DeleteUserCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteUserPermissionsBoundary(args, optionsOrCb, cb) {
        const command = new DeleteUserPermissionsBoundaryCommand_1.DeleteUserPermissionsBoundaryCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteUserPolicy(args, optionsOrCb, cb) {
        const command = new DeleteUserPolicyCommand_1.DeleteUserPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteVirtualMFADevice(args, optionsOrCb, cb) {
        const command = new DeleteVirtualMFADeviceCommand_1.DeleteVirtualMFADeviceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      detachGroupPolicy(args, optionsOrCb, cb) {
        const command = new DetachGroupPolicyCommand_1.DetachGroupPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      detachRolePolicy(args, optionsOrCb, cb) {
        const command = new DetachRolePolicyCommand_1.DetachRolePolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      detachUserPolicy(args, optionsOrCb, cb) {
        const command = new DetachUserPolicyCommand_1.DetachUserPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      enableMFADevice(args, optionsOrCb, cb) {
        const command = new EnableMFADeviceCommand_1.EnableMFADeviceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      generateCredentialReport(args, optionsOrCb, cb) {
        const command = new GenerateCredentialReportCommand_1.GenerateCredentialReportCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      generateOrganizationsAccessReport(args, optionsOrCb, cb) {
        const command = new GenerateOrganizationsAccessReportCommand_1.GenerateOrganizationsAccessReportCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      generateServiceLastAccessedDetails(args, optionsOrCb, cb) {
        const command = new GenerateServiceLastAccessedDetailsCommand_1.GenerateServiceLastAccessedDetailsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getAccessKeyLastUsed(args, optionsOrCb, cb) {
        const command = new GetAccessKeyLastUsedCommand_1.GetAccessKeyLastUsedCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getAccountAuthorizationDetails(args, optionsOrCb, cb) {
        const command = new GetAccountAuthorizationDetailsCommand_1.GetAccountAuthorizationDetailsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getAccountPasswordPolicy(args, optionsOrCb, cb) {
        const command = new GetAccountPasswordPolicyCommand_1.GetAccountPasswordPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getAccountSummary(args, optionsOrCb, cb) {
        const command = new GetAccountSummaryCommand_1.GetAccountSummaryCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getContextKeysForCustomPolicy(args, optionsOrCb, cb) {
        const command = new GetContextKeysForCustomPolicyCommand_1.GetContextKeysForCustomPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getContextKeysForPrincipalPolicy(args, optionsOrCb, cb) {
        const command = new GetContextKeysForPrincipalPolicyCommand_1.GetContextKeysForPrincipalPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getCredentialReport(args, optionsOrCb, cb) {
        const command = new GetCredentialReportCommand_1.GetCredentialReportCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getGroup(args, optionsOrCb, cb) {
        const command = new GetGroupCommand_1.GetGroupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getGroupPolicy(args, optionsOrCb, cb) {
        const command = new GetGroupPolicyCommand_1.GetGroupPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getInstanceProfile(args, optionsOrCb, cb) {
        const command = new GetInstanceProfileCommand_1.GetInstanceProfileCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getLoginProfile(args, optionsOrCb, cb) {
        const command = new GetLoginProfileCommand_1.GetLoginProfileCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getOpenIDConnectProvider(args, optionsOrCb, cb) {
        const command = new GetOpenIDConnectProviderCommand_1.GetOpenIDConnectProviderCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getOrganizationsAccessReport(args, optionsOrCb, cb) {
        const command = new GetOrganizationsAccessReportCommand_1.GetOrganizationsAccessReportCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getPolicy(args, optionsOrCb, cb) {
        const command = new GetPolicyCommand_1.GetPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getPolicyVersion(args, optionsOrCb, cb) {
        const command = new GetPolicyVersionCommand_1.GetPolicyVersionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getRole(args, optionsOrCb, cb) {
        const command = new GetRoleCommand_1.GetRoleCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getRolePolicy(args, optionsOrCb, cb) {
        const command = new GetRolePolicyCommand_1.GetRolePolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getSAMLProvider(args, optionsOrCb, cb) {
        const command = new GetSAMLProviderCommand_1.GetSAMLProviderCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getServerCertificate(args, optionsOrCb, cb) {
        const command = new GetServerCertificateCommand_1.GetServerCertificateCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getServiceLastAccessedDetails(args, optionsOrCb, cb) {
        const command = new GetServiceLastAccessedDetailsCommand_1.GetServiceLastAccessedDetailsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getServiceLastAccessedDetailsWithEntities(args, optionsOrCb, cb) {
        const command = new GetServiceLastAccessedDetailsWithEntitiesCommand_1.GetServiceLastAccessedDetailsWithEntitiesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getServiceLinkedRoleDeletionStatus(args, optionsOrCb, cb) {
        const command = new GetServiceLinkedRoleDeletionStatusCommand_1.GetServiceLinkedRoleDeletionStatusCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getSSHPublicKey(args, optionsOrCb, cb) {
        const command = new GetSSHPublicKeyCommand_1.GetSSHPublicKeyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getUser(args, optionsOrCb, cb) {
        const command = new GetUserCommand_1.GetUserCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getUserPolicy(args, optionsOrCb, cb) {
        const command = new GetUserPolicyCommand_1.GetUserPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listAccessKeys(args, optionsOrCb, cb) {
        const command = new ListAccessKeysCommand_1.ListAccessKeysCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listAccountAliases(args, optionsOrCb, cb) {
        const command = new ListAccountAliasesCommand_1.ListAccountAliasesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listAttachedGroupPolicies(args, optionsOrCb, cb) {
        const command = new ListAttachedGroupPoliciesCommand_1.ListAttachedGroupPoliciesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listAttachedRolePolicies(args, optionsOrCb, cb) {
        const command = new ListAttachedRolePoliciesCommand_1.ListAttachedRolePoliciesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listAttachedUserPolicies(args, optionsOrCb, cb) {
        const command = new ListAttachedUserPoliciesCommand_1.ListAttachedUserPoliciesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listEntitiesForPolicy(args, optionsOrCb, cb) {
        const command = new ListEntitiesForPolicyCommand_1.ListEntitiesForPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listGroupPolicies(args, optionsOrCb, cb) {
        const command = new ListGroupPoliciesCommand_1.ListGroupPoliciesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listGroups(args, optionsOrCb, cb) {
        const command = new ListGroupsCommand_1.ListGroupsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listGroupsForUser(args, optionsOrCb, cb) {
        const command = new ListGroupsForUserCommand_1.ListGroupsForUserCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listInstanceProfiles(args, optionsOrCb, cb) {
        const command = new ListInstanceProfilesCommand_1.ListInstanceProfilesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listInstanceProfilesForRole(args, optionsOrCb, cb) {
        const command = new ListInstanceProfilesForRoleCommand_1.ListInstanceProfilesForRoleCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listInstanceProfileTags(args, optionsOrCb, cb) {
        const command = new ListInstanceProfileTagsCommand_1.ListInstanceProfileTagsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listMFADevices(args, optionsOrCb, cb) {
        const command = new ListMFADevicesCommand_1.ListMFADevicesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listMFADeviceTags(args, optionsOrCb, cb) {
        const command = new ListMFADeviceTagsCommand_1.ListMFADeviceTagsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listOpenIDConnectProviders(args, optionsOrCb, cb) {
        const command = new ListOpenIDConnectProvidersCommand_1.ListOpenIDConnectProvidersCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listOpenIDConnectProviderTags(args, optionsOrCb, cb) {
        const command = new ListOpenIDConnectProviderTagsCommand_1.ListOpenIDConnectProviderTagsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listPolicies(args, optionsOrCb, cb) {
        const command = new ListPoliciesCommand_1.ListPoliciesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listPoliciesGrantingServiceAccess(args, optionsOrCb, cb) {
        const command = new ListPoliciesGrantingServiceAccessCommand_1.ListPoliciesGrantingServiceAccessCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listPolicyTags(args, optionsOrCb, cb) {
        const command = new ListPolicyTagsCommand_1.ListPolicyTagsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listPolicyVersions(args, optionsOrCb, cb) {
        const command = new ListPolicyVersionsCommand_1.ListPolicyVersionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listRolePolicies(args, optionsOrCb, cb) {
        const command = new ListRolePoliciesCommand_1.ListRolePoliciesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listRoles(args, optionsOrCb, cb) {
        const command = new ListRolesCommand_1.ListRolesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listRoleTags(args, optionsOrCb, cb) {
        const command = new ListRoleTagsCommand_1.ListRoleTagsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listSAMLProviders(args, optionsOrCb, cb) {
        const command = new ListSAMLProvidersCommand_1.ListSAMLProvidersCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listSAMLProviderTags(args, optionsOrCb, cb) {
        const command = new ListSAMLProviderTagsCommand_1.ListSAMLProviderTagsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listServerCertificates(args, optionsOrCb, cb) {
        const command = new ListServerCertificatesCommand_1.ListServerCertificatesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listServerCertificateTags(args, optionsOrCb, cb) {
        const command = new ListServerCertificateTagsCommand_1.ListServerCertificateTagsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listServiceSpecificCredentials(args, optionsOrCb, cb) {
        const command = new ListServiceSpecificCredentialsCommand_1.ListServiceSpecificCredentialsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listSigningCertificates(args, optionsOrCb, cb) {
        const command = new ListSigningCertificatesCommand_1.ListSigningCertificatesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listSSHPublicKeys(args, optionsOrCb, cb) {
        const command = new ListSSHPublicKeysCommand_1.ListSSHPublicKeysCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listUserPolicies(args, optionsOrCb, cb) {
        const command = new ListUserPoliciesCommand_1.ListUserPoliciesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listUsers(args, optionsOrCb, cb) {
        const command = new ListUsersCommand_1.ListUsersCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listUserTags(args, optionsOrCb, cb) {
        const command = new ListUserTagsCommand_1.ListUserTagsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listVirtualMFADevices(args, optionsOrCb, cb) {
        const command = new ListVirtualMFADevicesCommand_1.ListVirtualMFADevicesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putGroupPolicy(args, optionsOrCb, cb) {
        const command = new PutGroupPolicyCommand_1.PutGroupPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putRolePermissionsBoundary(args, optionsOrCb, cb) {
        const command = new PutRolePermissionsBoundaryCommand_1.PutRolePermissionsBoundaryCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putRolePolicy(args, optionsOrCb, cb) {
        const command = new PutRolePolicyCommand_1.PutRolePolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putUserPermissionsBoundary(args, optionsOrCb, cb) {
        const command = new PutUserPermissionsBoundaryCommand_1.PutUserPermissionsBoundaryCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putUserPolicy(args, optionsOrCb, cb) {
        const command = new PutUserPolicyCommand_1.PutUserPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      removeClientIDFromOpenIDConnectProvider(args, optionsOrCb, cb) {
        const command = new RemoveClientIDFromOpenIDConnectProviderCommand_1.RemoveClientIDFromOpenIDConnectProviderCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      removeRoleFromInstanceProfile(args, optionsOrCb, cb) {
        const command = new RemoveRoleFromInstanceProfileCommand_1.RemoveRoleFromInstanceProfileCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      removeUserFromGroup(args, optionsOrCb, cb) {
        const command = new RemoveUserFromGroupCommand_1.RemoveUserFromGroupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      resetServiceSpecificCredential(args, optionsOrCb, cb) {
        const command = new ResetServiceSpecificCredentialCommand_1.ResetServiceSpecificCredentialCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      resyncMFADevice(args, optionsOrCb, cb) {
        const command = new ResyncMFADeviceCommand_1.ResyncMFADeviceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      setDefaultPolicyVersion(args, optionsOrCb, cb) {
        const command = new SetDefaultPolicyVersionCommand_1.SetDefaultPolicyVersionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      setSecurityTokenServicePreferences(args, optionsOrCb, cb) {
        const command = new SetSecurityTokenServicePreferencesCommand_1.SetSecurityTokenServicePreferencesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      simulateCustomPolicy(args, optionsOrCb, cb) {
        const command = new SimulateCustomPolicyCommand_1.SimulateCustomPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      simulatePrincipalPolicy(args, optionsOrCb, cb) {
        const command = new SimulatePrincipalPolicyCommand_1.SimulatePrincipalPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      tagInstanceProfile(args, optionsOrCb, cb) {
        const command = new TagInstanceProfileCommand_1.TagInstanceProfileCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      tagMFADevice(args, optionsOrCb, cb) {
        const command = new TagMFADeviceCommand_1.TagMFADeviceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      tagOpenIDConnectProvider(args, optionsOrCb, cb) {
        const command = new TagOpenIDConnectProviderCommand_1.TagOpenIDConnectProviderCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      tagPolicy(args, optionsOrCb, cb) {
        const command = new TagPolicyCommand_1.TagPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      tagRole(args, optionsOrCb, cb) {
        const command = new TagRoleCommand_1.TagRoleCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      tagSAMLProvider(args, optionsOrCb, cb) {
        const command = new TagSAMLProviderCommand_1.TagSAMLProviderCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      tagServerCertificate(args, optionsOrCb, cb) {
        const command = new TagServerCertificateCommand_1.TagServerCertificateCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      tagUser(args, optionsOrCb, cb) {
        const command = new TagUserCommand_1.TagUserCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      untagInstanceProfile(args, optionsOrCb, cb) {
        const command = new UntagInstanceProfileCommand_1.UntagInstanceProfileCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      untagMFADevice(args, optionsOrCb, cb) {
        const command = new UntagMFADeviceCommand_1.UntagMFADeviceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      untagOpenIDConnectProvider(args, optionsOrCb, cb) {
        const command = new UntagOpenIDConnectProviderCommand_1.UntagOpenIDConnectProviderCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      untagPolicy(args, optionsOrCb, cb) {
        const command = new UntagPolicyCommand_1.UntagPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      untagRole(args, optionsOrCb, cb) {
        const command = new UntagRoleCommand_1.UntagRoleCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      untagSAMLProvider(args, optionsOrCb, cb) {
        const command = new UntagSAMLProviderCommand_1.UntagSAMLProviderCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      untagServerCertificate(args, optionsOrCb, cb) {
        const command = new UntagServerCertificateCommand_1.UntagServerCertificateCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      untagUser(args, optionsOrCb, cb) {
        const command = new UntagUserCommand_1.UntagUserCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateAccessKey(args, optionsOrCb, cb) {
        const command = new UpdateAccessKeyCommand_1.UpdateAccessKeyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateAccountPasswordPolicy(args, optionsOrCb, cb) {
        const command = new UpdateAccountPasswordPolicyCommand_1.UpdateAccountPasswordPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateAssumeRolePolicy(args, optionsOrCb, cb) {
        const command = new UpdateAssumeRolePolicyCommand_1.UpdateAssumeRolePolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateGroup(args, optionsOrCb, cb) {
        const command = new UpdateGroupCommand_1.UpdateGroupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateLoginProfile(args, optionsOrCb, cb) {
        const command = new UpdateLoginProfileCommand_1.UpdateLoginProfileCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateOpenIDConnectProviderThumbprint(args, optionsOrCb, cb) {
        const command = new UpdateOpenIDConnectProviderThumbprintCommand_1.UpdateOpenIDConnectProviderThumbprintCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateRole(args, optionsOrCb, cb) {
        const command = new UpdateRoleCommand_1.UpdateRoleCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateRoleDescription(args, optionsOrCb, cb) {
        const command = new UpdateRoleDescriptionCommand_1.UpdateRoleDescriptionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateSAMLProvider(args, optionsOrCb, cb) {
        const command = new UpdateSAMLProviderCommand_1.UpdateSAMLProviderCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateServerCertificate(args, optionsOrCb, cb) {
        const command = new UpdateServerCertificateCommand_1.UpdateServerCertificateCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateServiceSpecificCredential(args, optionsOrCb, cb) {
        const command = new UpdateServiceSpecificCredentialCommand_1.UpdateServiceSpecificCredentialCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateSigningCertificate(args, optionsOrCb, cb) {
        const command = new UpdateSigningCertificateCommand_1.UpdateSigningCertificateCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateSSHPublicKey(args, optionsOrCb, cb) {
        const command = new UpdateSSHPublicKeyCommand_1.UpdateSSHPublicKeyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateUser(args, optionsOrCb, cb) {
        const command = new UpdateUserCommand_1.UpdateUserCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      uploadServerCertificate(args, optionsOrCb, cb) {
        const command = new UploadServerCertificateCommand_1.UploadServerCertificateCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      uploadSigningCertificate(args, optionsOrCb, cb) {
        const command = new UploadSigningCertificateCommand_1.UploadSigningCertificateCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      uploadSSHPublicKey(args, optionsOrCb, cb) {
        const command = new UploadSSHPublicKeyCommand_1.UploadSSHPublicKeyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports.IAM = IAM;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/index.js
var require_commands3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/commands/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AddClientIDToOpenIDConnectProviderCommand(), exports);
    tslib_1.__exportStar(require_AddRoleToInstanceProfileCommand(), exports);
    tslib_1.__exportStar(require_AddUserToGroupCommand(), exports);
    tslib_1.__exportStar(require_AttachGroupPolicyCommand(), exports);
    tslib_1.__exportStar(require_AttachRolePolicyCommand(), exports);
    tslib_1.__exportStar(require_AttachUserPolicyCommand(), exports);
    tslib_1.__exportStar(require_ChangePasswordCommand(), exports);
    tslib_1.__exportStar(require_CreateAccessKeyCommand(), exports);
    tslib_1.__exportStar(require_CreateAccountAliasCommand(), exports);
    tslib_1.__exportStar(require_CreateGroupCommand(), exports);
    tslib_1.__exportStar(require_CreateInstanceProfileCommand(), exports);
    tslib_1.__exportStar(require_CreateLoginProfileCommand(), exports);
    tslib_1.__exportStar(require_CreateOpenIDConnectProviderCommand(), exports);
    tslib_1.__exportStar(require_CreatePolicyCommand(), exports);
    tslib_1.__exportStar(require_CreatePolicyVersionCommand(), exports);
    tslib_1.__exportStar(require_CreateRoleCommand(), exports);
    tslib_1.__exportStar(require_CreateSAMLProviderCommand(), exports);
    tslib_1.__exportStar(require_CreateServiceLinkedRoleCommand(), exports);
    tslib_1.__exportStar(require_CreateServiceSpecificCredentialCommand(), exports);
    tslib_1.__exportStar(require_CreateUserCommand(), exports);
    tslib_1.__exportStar(require_CreateVirtualMFADeviceCommand(), exports);
    tslib_1.__exportStar(require_DeactivateMFADeviceCommand(), exports);
    tslib_1.__exportStar(require_DeleteAccessKeyCommand(), exports);
    tslib_1.__exportStar(require_DeleteAccountAliasCommand(), exports);
    tslib_1.__exportStar(require_DeleteAccountPasswordPolicyCommand(), exports);
    tslib_1.__exportStar(require_DeleteGroupCommand(), exports);
    tslib_1.__exportStar(require_DeleteGroupPolicyCommand(), exports);
    tslib_1.__exportStar(require_DeleteInstanceProfileCommand(), exports);
    tslib_1.__exportStar(require_DeleteLoginProfileCommand(), exports);
    tslib_1.__exportStar(require_DeleteOpenIDConnectProviderCommand(), exports);
    tslib_1.__exportStar(require_DeletePolicyCommand(), exports);
    tslib_1.__exportStar(require_DeletePolicyVersionCommand(), exports);
    tslib_1.__exportStar(require_DeleteRoleCommand(), exports);
    tslib_1.__exportStar(require_DeleteRolePermissionsBoundaryCommand(), exports);
    tslib_1.__exportStar(require_DeleteRolePolicyCommand(), exports);
    tslib_1.__exportStar(require_DeleteSAMLProviderCommand(), exports);
    tslib_1.__exportStar(require_DeleteSSHPublicKeyCommand(), exports);
    tslib_1.__exportStar(require_DeleteServerCertificateCommand(), exports);
    tslib_1.__exportStar(require_DeleteServiceLinkedRoleCommand(), exports);
    tslib_1.__exportStar(require_DeleteServiceSpecificCredentialCommand(), exports);
    tslib_1.__exportStar(require_DeleteSigningCertificateCommand(), exports);
    tslib_1.__exportStar(require_DeleteUserCommand(), exports);
    tslib_1.__exportStar(require_DeleteUserPermissionsBoundaryCommand(), exports);
    tslib_1.__exportStar(require_DeleteUserPolicyCommand(), exports);
    tslib_1.__exportStar(require_DeleteVirtualMFADeviceCommand(), exports);
    tslib_1.__exportStar(require_DetachGroupPolicyCommand(), exports);
    tslib_1.__exportStar(require_DetachRolePolicyCommand(), exports);
    tslib_1.__exportStar(require_DetachUserPolicyCommand(), exports);
    tslib_1.__exportStar(require_EnableMFADeviceCommand(), exports);
    tslib_1.__exportStar(require_GenerateCredentialReportCommand(), exports);
    tslib_1.__exportStar(require_GenerateOrganizationsAccessReportCommand(), exports);
    tslib_1.__exportStar(require_GenerateServiceLastAccessedDetailsCommand(), exports);
    tslib_1.__exportStar(require_GetAccessKeyLastUsedCommand(), exports);
    tslib_1.__exportStar(require_GetAccountAuthorizationDetailsCommand(), exports);
    tslib_1.__exportStar(require_GetAccountPasswordPolicyCommand(), exports);
    tslib_1.__exportStar(require_GetAccountSummaryCommand(), exports);
    tslib_1.__exportStar(require_GetContextKeysForCustomPolicyCommand(), exports);
    tslib_1.__exportStar(require_GetContextKeysForPrincipalPolicyCommand(), exports);
    tslib_1.__exportStar(require_GetCredentialReportCommand(), exports);
    tslib_1.__exportStar(require_GetGroupCommand(), exports);
    tslib_1.__exportStar(require_GetGroupPolicyCommand(), exports);
    tslib_1.__exportStar(require_GetInstanceProfileCommand(), exports);
    tslib_1.__exportStar(require_GetLoginProfileCommand(), exports);
    tslib_1.__exportStar(require_GetOpenIDConnectProviderCommand(), exports);
    tslib_1.__exportStar(require_GetOrganizationsAccessReportCommand(), exports);
    tslib_1.__exportStar(require_GetPolicyCommand(), exports);
    tslib_1.__exportStar(require_GetPolicyVersionCommand(), exports);
    tslib_1.__exportStar(require_GetRoleCommand(), exports);
    tslib_1.__exportStar(require_GetRolePolicyCommand(), exports);
    tslib_1.__exportStar(require_GetSAMLProviderCommand(), exports);
    tslib_1.__exportStar(require_GetSSHPublicKeyCommand(), exports);
    tslib_1.__exportStar(require_GetServerCertificateCommand(), exports);
    tslib_1.__exportStar(require_GetServiceLastAccessedDetailsCommand(), exports);
    tslib_1.__exportStar(require_GetServiceLastAccessedDetailsWithEntitiesCommand(), exports);
    tslib_1.__exportStar(require_GetServiceLinkedRoleDeletionStatusCommand(), exports);
    tslib_1.__exportStar(require_GetUserCommand(), exports);
    tslib_1.__exportStar(require_GetUserPolicyCommand(), exports);
    tslib_1.__exportStar(require_ListAccessKeysCommand(), exports);
    tslib_1.__exportStar(require_ListAccountAliasesCommand(), exports);
    tslib_1.__exportStar(require_ListAttachedGroupPoliciesCommand(), exports);
    tslib_1.__exportStar(require_ListAttachedRolePoliciesCommand(), exports);
    tslib_1.__exportStar(require_ListAttachedUserPoliciesCommand(), exports);
    tslib_1.__exportStar(require_ListEntitiesForPolicyCommand(), exports);
    tslib_1.__exportStar(require_ListGroupPoliciesCommand(), exports);
    tslib_1.__exportStar(require_ListGroupsCommand(), exports);
    tslib_1.__exportStar(require_ListGroupsForUserCommand(), exports);
    tslib_1.__exportStar(require_ListInstanceProfileTagsCommand(), exports);
    tslib_1.__exportStar(require_ListInstanceProfilesCommand(), exports);
    tslib_1.__exportStar(require_ListInstanceProfilesForRoleCommand(), exports);
    tslib_1.__exportStar(require_ListMFADeviceTagsCommand(), exports);
    tslib_1.__exportStar(require_ListMFADevicesCommand(), exports);
    tslib_1.__exportStar(require_ListOpenIDConnectProviderTagsCommand(), exports);
    tslib_1.__exportStar(require_ListOpenIDConnectProvidersCommand(), exports);
    tslib_1.__exportStar(require_ListPoliciesCommand(), exports);
    tslib_1.__exportStar(require_ListPoliciesGrantingServiceAccessCommand(), exports);
    tslib_1.__exportStar(require_ListPolicyTagsCommand(), exports);
    tslib_1.__exportStar(require_ListPolicyVersionsCommand(), exports);
    tslib_1.__exportStar(require_ListRolePoliciesCommand(), exports);
    tslib_1.__exportStar(require_ListRoleTagsCommand(), exports);
    tslib_1.__exportStar(require_ListRolesCommand(), exports);
    tslib_1.__exportStar(require_ListSAMLProviderTagsCommand(), exports);
    tslib_1.__exportStar(require_ListSAMLProvidersCommand(), exports);
    tslib_1.__exportStar(require_ListSSHPublicKeysCommand(), exports);
    tslib_1.__exportStar(require_ListServerCertificateTagsCommand(), exports);
    tslib_1.__exportStar(require_ListServerCertificatesCommand(), exports);
    tslib_1.__exportStar(require_ListServiceSpecificCredentialsCommand(), exports);
    tslib_1.__exportStar(require_ListSigningCertificatesCommand(), exports);
    tslib_1.__exportStar(require_ListUserPoliciesCommand(), exports);
    tslib_1.__exportStar(require_ListUserTagsCommand(), exports);
    tslib_1.__exportStar(require_ListUsersCommand(), exports);
    tslib_1.__exportStar(require_ListVirtualMFADevicesCommand(), exports);
    tslib_1.__exportStar(require_PutGroupPolicyCommand(), exports);
    tslib_1.__exportStar(require_PutRolePermissionsBoundaryCommand(), exports);
    tslib_1.__exportStar(require_PutRolePolicyCommand(), exports);
    tslib_1.__exportStar(require_PutUserPermissionsBoundaryCommand(), exports);
    tslib_1.__exportStar(require_PutUserPolicyCommand(), exports);
    tslib_1.__exportStar(require_RemoveClientIDFromOpenIDConnectProviderCommand(), exports);
    tslib_1.__exportStar(require_RemoveRoleFromInstanceProfileCommand(), exports);
    tslib_1.__exportStar(require_RemoveUserFromGroupCommand(), exports);
    tslib_1.__exportStar(require_ResetServiceSpecificCredentialCommand(), exports);
    tslib_1.__exportStar(require_ResyncMFADeviceCommand(), exports);
    tslib_1.__exportStar(require_SetDefaultPolicyVersionCommand(), exports);
    tslib_1.__exportStar(require_SetSecurityTokenServicePreferencesCommand(), exports);
    tslib_1.__exportStar(require_SimulateCustomPolicyCommand(), exports);
    tslib_1.__exportStar(require_SimulatePrincipalPolicyCommand(), exports);
    tslib_1.__exportStar(require_TagInstanceProfileCommand(), exports);
    tslib_1.__exportStar(require_TagMFADeviceCommand(), exports);
    tslib_1.__exportStar(require_TagOpenIDConnectProviderCommand(), exports);
    tslib_1.__exportStar(require_TagPolicyCommand(), exports);
    tslib_1.__exportStar(require_TagRoleCommand(), exports);
    tslib_1.__exportStar(require_TagSAMLProviderCommand(), exports);
    tslib_1.__exportStar(require_TagServerCertificateCommand(), exports);
    tslib_1.__exportStar(require_TagUserCommand(), exports);
    tslib_1.__exportStar(require_UntagInstanceProfileCommand(), exports);
    tslib_1.__exportStar(require_UntagMFADeviceCommand(), exports);
    tslib_1.__exportStar(require_UntagOpenIDConnectProviderCommand(), exports);
    tslib_1.__exportStar(require_UntagPolicyCommand(), exports);
    tslib_1.__exportStar(require_UntagRoleCommand(), exports);
    tslib_1.__exportStar(require_UntagSAMLProviderCommand(), exports);
    tslib_1.__exportStar(require_UntagServerCertificateCommand(), exports);
    tslib_1.__exportStar(require_UntagUserCommand(), exports);
    tslib_1.__exportStar(require_UpdateAccessKeyCommand(), exports);
    tslib_1.__exportStar(require_UpdateAccountPasswordPolicyCommand(), exports);
    tslib_1.__exportStar(require_UpdateAssumeRolePolicyCommand(), exports);
    tslib_1.__exportStar(require_UpdateGroupCommand(), exports);
    tslib_1.__exportStar(require_UpdateLoginProfileCommand(), exports);
    tslib_1.__exportStar(require_UpdateOpenIDConnectProviderThumbprintCommand(), exports);
    tslib_1.__exportStar(require_UpdateRoleCommand(), exports);
    tslib_1.__exportStar(require_UpdateRoleDescriptionCommand(), exports);
    tslib_1.__exportStar(require_UpdateSAMLProviderCommand(), exports);
    tslib_1.__exportStar(require_UpdateSSHPublicKeyCommand(), exports);
    tslib_1.__exportStar(require_UpdateServerCertificateCommand(), exports);
    tslib_1.__exportStar(require_UpdateServiceSpecificCredentialCommand(), exports);
    tslib_1.__exportStar(require_UpdateSigningCertificateCommand(), exports);
    tslib_1.__exportStar(require_UpdateUserCommand(), exports);
    tslib_1.__exportStar(require_UploadSSHPublicKeyCommand(), exports);
    tslib_1.__exportStar(require_UploadServerCertificateCommand(), exports);
    tslib_1.__exportStar(require_UploadSigningCertificateCommand(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/models/index.js
var require_models3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/models/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_0(), exports);
    tslib_1.__exportStar(require_models_1(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/GetAccountAuthorizationDetailsPaginator.js
var require_GetAccountAuthorizationDetailsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/GetAccountAuthorizationDetailsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateGetAccountAuthorizationDetails = void 0;
    var GetAccountAuthorizationDetailsCommand_1 = require_GetAccountAuthorizationDetailsCommand();
    var IAM_1 = require_IAM();
    var IAMClient_1 = require_IAMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new GetAccountAuthorizationDetailsCommand_1.GetAccountAuthorizationDetailsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.getAccountAuthorizationDetails(input, ...args);
    };
    async function* paginateGetAccountAuthorizationDetails(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof IAM_1.IAM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof IAMClient_1.IAMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected IAM | IAMClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateGetAccountAuthorizationDetails = paginateGetAccountAuthorizationDetails;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/GetGroupPaginator.js
var require_GetGroupPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/GetGroupPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateGetGroup = void 0;
    var GetGroupCommand_1 = require_GetGroupCommand();
    var IAM_1 = require_IAM();
    var IAMClient_1 = require_IAMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new GetGroupCommand_1.GetGroupCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.getGroup(input, ...args);
    };
    async function* paginateGetGroup(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof IAM_1.IAM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof IAMClient_1.IAMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected IAM | IAMClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateGetGroup = paginateGetGroup;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/Interfaces.js
var require_Interfaces2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/Interfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListAccessKeysPaginator.js
var require_ListAccessKeysPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListAccessKeysPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAccessKeys = void 0;
    var ListAccessKeysCommand_1 = require_ListAccessKeysCommand();
    var IAM_1 = require_IAM();
    var IAMClient_1 = require_IAMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAccessKeysCommand_1.ListAccessKeysCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listAccessKeys(input, ...args);
    };
    async function* paginateListAccessKeys(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof IAM_1.IAM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof IAMClient_1.IAMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected IAM | IAMClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAccessKeys = paginateListAccessKeys;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListAccountAliasesPaginator.js
var require_ListAccountAliasesPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListAccountAliasesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAccountAliases = void 0;
    var ListAccountAliasesCommand_1 = require_ListAccountAliasesCommand();
    var IAM_1 = require_IAM();
    var IAMClient_1 = require_IAMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAccountAliasesCommand_1.ListAccountAliasesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listAccountAliases(input, ...args);
    };
    async function* paginateListAccountAliases(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof IAM_1.IAM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof IAMClient_1.IAMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected IAM | IAMClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAccountAliases = paginateListAccountAliases;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListAttachedGroupPoliciesPaginator.js
var require_ListAttachedGroupPoliciesPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListAttachedGroupPoliciesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAttachedGroupPolicies = void 0;
    var ListAttachedGroupPoliciesCommand_1 = require_ListAttachedGroupPoliciesCommand();
    var IAM_1 = require_IAM();
    var IAMClient_1 = require_IAMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAttachedGroupPoliciesCommand_1.ListAttachedGroupPoliciesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listAttachedGroupPolicies(input, ...args);
    };
    async function* paginateListAttachedGroupPolicies(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof IAM_1.IAM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof IAMClient_1.IAMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected IAM | IAMClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAttachedGroupPolicies = paginateListAttachedGroupPolicies;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListAttachedRolePoliciesPaginator.js
var require_ListAttachedRolePoliciesPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListAttachedRolePoliciesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAttachedRolePolicies = void 0;
    var ListAttachedRolePoliciesCommand_1 = require_ListAttachedRolePoliciesCommand();
    var IAM_1 = require_IAM();
    var IAMClient_1 = require_IAMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAttachedRolePoliciesCommand_1.ListAttachedRolePoliciesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listAttachedRolePolicies(input, ...args);
    };
    async function* paginateListAttachedRolePolicies(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof IAM_1.IAM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof IAMClient_1.IAMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected IAM | IAMClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAttachedRolePolicies = paginateListAttachedRolePolicies;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListAttachedUserPoliciesPaginator.js
var require_ListAttachedUserPoliciesPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListAttachedUserPoliciesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAttachedUserPolicies = void 0;
    var ListAttachedUserPoliciesCommand_1 = require_ListAttachedUserPoliciesCommand();
    var IAM_1 = require_IAM();
    var IAMClient_1 = require_IAMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAttachedUserPoliciesCommand_1.ListAttachedUserPoliciesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listAttachedUserPolicies(input, ...args);
    };
    async function* paginateListAttachedUserPolicies(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof IAM_1.IAM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof IAMClient_1.IAMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected IAM | IAMClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAttachedUserPolicies = paginateListAttachedUserPolicies;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListEntitiesForPolicyPaginator.js
var require_ListEntitiesForPolicyPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListEntitiesForPolicyPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListEntitiesForPolicy = void 0;
    var ListEntitiesForPolicyCommand_1 = require_ListEntitiesForPolicyCommand();
    var IAM_1 = require_IAM();
    var IAMClient_1 = require_IAMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListEntitiesForPolicyCommand_1.ListEntitiesForPolicyCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listEntitiesForPolicy(input, ...args);
    };
    async function* paginateListEntitiesForPolicy(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof IAM_1.IAM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof IAMClient_1.IAMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected IAM | IAMClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListEntitiesForPolicy = paginateListEntitiesForPolicy;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListGroupPoliciesPaginator.js
var require_ListGroupPoliciesPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListGroupPoliciesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListGroupPolicies = void 0;
    var ListGroupPoliciesCommand_1 = require_ListGroupPoliciesCommand();
    var IAM_1 = require_IAM();
    var IAMClient_1 = require_IAMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListGroupPoliciesCommand_1.ListGroupPoliciesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listGroupPolicies(input, ...args);
    };
    async function* paginateListGroupPolicies(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof IAM_1.IAM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof IAMClient_1.IAMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected IAM | IAMClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListGroupPolicies = paginateListGroupPolicies;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListGroupsForUserPaginator.js
var require_ListGroupsForUserPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListGroupsForUserPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListGroupsForUser = void 0;
    var ListGroupsForUserCommand_1 = require_ListGroupsForUserCommand();
    var IAM_1 = require_IAM();
    var IAMClient_1 = require_IAMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListGroupsForUserCommand_1.ListGroupsForUserCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listGroupsForUser(input, ...args);
    };
    async function* paginateListGroupsForUser(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof IAM_1.IAM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof IAMClient_1.IAMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected IAM | IAMClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListGroupsForUser = paginateListGroupsForUser;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListGroupsPaginator.js
var require_ListGroupsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListGroupsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListGroups = void 0;
    var ListGroupsCommand_1 = require_ListGroupsCommand();
    var IAM_1 = require_IAM();
    var IAMClient_1 = require_IAMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListGroupsCommand_1.ListGroupsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listGroups(input, ...args);
    };
    async function* paginateListGroups(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof IAM_1.IAM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof IAMClient_1.IAMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected IAM | IAMClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListGroups = paginateListGroups;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListInstanceProfilesForRolePaginator.js
var require_ListInstanceProfilesForRolePaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListInstanceProfilesForRolePaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListInstanceProfilesForRole = void 0;
    var ListInstanceProfilesForRoleCommand_1 = require_ListInstanceProfilesForRoleCommand();
    var IAM_1 = require_IAM();
    var IAMClient_1 = require_IAMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListInstanceProfilesForRoleCommand_1.ListInstanceProfilesForRoleCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listInstanceProfilesForRole(input, ...args);
    };
    async function* paginateListInstanceProfilesForRole(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof IAM_1.IAM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof IAMClient_1.IAMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected IAM | IAMClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListInstanceProfilesForRole = paginateListInstanceProfilesForRole;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListInstanceProfilesPaginator.js
var require_ListInstanceProfilesPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListInstanceProfilesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListInstanceProfiles = void 0;
    var ListInstanceProfilesCommand_1 = require_ListInstanceProfilesCommand();
    var IAM_1 = require_IAM();
    var IAMClient_1 = require_IAMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListInstanceProfilesCommand_1.ListInstanceProfilesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listInstanceProfiles(input, ...args);
    };
    async function* paginateListInstanceProfiles(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof IAM_1.IAM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof IAMClient_1.IAMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected IAM | IAMClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListInstanceProfiles = paginateListInstanceProfiles;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListMFADevicesPaginator.js
var require_ListMFADevicesPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListMFADevicesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListMFADevices = void 0;
    var ListMFADevicesCommand_1 = require_ListMFADevicesCommand();
    var IAM_1 = require_IAM();
    var IAMClient_1 = require_IAMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListMFADevicesCommand_1.ListMFADevicesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listMFADevices(input, ...args);
    };
    async function* paginateListMFADevices(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof IAM_1.IAM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof IAMClient_1.IAMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected IAM | IAMClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListMFADevices = paginateListMFADevices;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListPoliciesPaginator.js
var require_ListPoliciesPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListPoliciesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListPolicies = void 0;
    var ListPoliciesCommand_1 = require_ListPoliciesCommand();
    var IAM_1 = require_IAM();
    var IAMClient_1 = require_IAMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListPoliciesCommand_1.ListPoliciesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listPolicies(input, ...args);
    };
    async function* paginateListPolicies(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof IAM_1.IAM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof IAMClient_1.IAMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected IAM | IAMClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListPolicies = paginateListPolicies;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListPolicyVersionsPaginator.js
var require_ListPolicyVersionsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListPolicyVersionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListPolicyVersions = void 0;
    var ListPolicyVersionsCommand_1 = require_ListPolicyVersionsCommand();
    var IAM_1 = require_IAM();
    var IAMClient_1 = require_IAMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListPolicyVersionsCommand_1.ListPolicyVersionsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listPolicyVersions(input, ...args);
    };
    async function* paginateListPolicyVersions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof IAM_1.IAM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof IAMClient_1.IAMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected IAM | IAMClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListPolicyVersions = paginateListPolicyVersions;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListRolePoliciesPaginator.js
var require_ListRolePoliciesPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListRolePoliciesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListRolePolicies = void 0;
    var ListRolePoliciesCommand_1 = require_ListRolePoliciesCommand();
    var IAM_1 = require_IAM();
    var IAMClient_1 = require_IAMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListRolePoliciesCommand_1.ListRolePoliciesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listRolePolicies(input, ...args);
    };
    async function* paginateListRolePolicies(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof IAM_1.IAM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof IAMClient_1.IAMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected IAM | IAMClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListRolePolicies = paginateListRolePolicies;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListRolesPaginator.js
var require_ListRolesPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListRolesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListRoles = void 0;
    var ListRolesCommand_1 = require_ListRolesCommand();
    var IAM_1 = require_IAM();
    var IAMClient_1 = require_IAMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListRolesCommand_1.ListRolesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listRoles(input, ...args);
    };
    async function* paginateListRoles(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof IAM_1.IAM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof IAMClient_1.IAMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected IAM | IAMClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListRoles = paginateListRoles;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListSSHPublicKeysPaginator.js
var require_ListSSHPublicKeysPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListSSHPublicKeysPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListSSHPublicKeys = void 0;
    var ListSSHPublicKeysCommand_1 = require_ListSSHPublicKeysCommand();
    var IAM_1 = require_IAM();
    var IAMClient_1 = require_IAMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListSSHPublicKeysCommand_1.ListSSHPublicKeysCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listSSHPublicKeys(input, ...args);
    };
    async function* paginateListSSHPublicKeys(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof IAM_1.IAM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof IAMClient_1.IAMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected IAM | IAMClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListSSHPublicKeys = paginateListSSHPublicKeys;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListServerCertificatesPaginator.js
var require_ListServerCertificatesPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListServerCertificatesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListServerCertificates = void 0;
    var ListServerCertificatesCommand_1 = require_ListServerCertificatesCommand();
    var IAM_1 = require_IAM();
    var IAMClient_1 = require_IAMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListServerCertificatesCommand_1.ListServerCertificatesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listServerCertificates(input, ...args);
    };
    async function* paginateListServerCertificates(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof IAM_1.IAM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof IAMClient_1.IAMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected IAM | IAMClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListServerCertificates = paginateListServerCertificates;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListSigningCertificatesPaginator.js
var require_ListSigningCertificatesPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListSigningCertificatesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListSigningCertificates = void 0;
    var ListSigningCertificatesCommand_1 = require_ListSigningCertificatesCommand();
    var IAM_1 = require_IAM();
    var IAMClient_1 = require_IAMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListSigningCertificatesCommand_1.ListSigningCertificatesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listSigningCertificates(input, ...args);
    };
    async function* paginateListSigningCertificates(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof IAM_1.IAM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof IAMClient_1.IAMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected IAM | IAMClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListSigningCertificates = paginateListSigningCertificates;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListUserPoliciesPaginator.js
var require_ListUserPoliciesPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListUserPoliciesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListUserPolicies = void 0;
    var ListUserPoliciesCommand_1 = require_ListUserPoliciesCommand();
    var IAM_1 = require_IAM();
    var IAMClient_1 = require_IAMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListUserPoliciesCommand_1.ListUserPoliciesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listUserPolicies(input, ...args);
    };
    async function* paginateListUserPolicies(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof IAM_1.IAM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof IAMClient_1.IAMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected IAM | IAMClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListUserPolicies = paginateListUserPolicies;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListUserTagsPaginator.js
var require_ListUserTagsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListUserTagsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListUserTags = void 0;
    var ListUserTagsCommand_1 = require_ListUserTagsCommand();
    var IAM_1 = require_IAM();
    var IAMClient_1 = require_IAMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListUserTagsCommand_1.ListUserTagsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listUserTags(input, ...args);
    };
    async function* paginateListUserTags(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof IAM_1.IAM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof IAMClient_1.IAMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected IAM | IAMClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListUserTags = paginateListUserTags;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListUsersPaginator.js
var require_ListUsersPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListUsersPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListUsers = void 0;
    var ListUsersCommand_1 = require_ListUsersCommand();
    var IAM_1 = require_IAM();
    var IAMClient_1 = require_IAMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListUsersCommand_1.ListUsersCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listUsers(input, ...args);
    };
    async function* paginateListUsers(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof IAM_1.IAM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof IAMClient_1.IAMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected IAM | IAMClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListUsers = paginateListUsers;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListVirtualMFADevicesPaginator.js
var require_ListVirtualMFADevicesPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/ListVirtualMFADevicesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListVirtualMFADevices = void 0;
    var ListVirtualMFADevicesCommand_1 = require_ListVirtualMFADevicesCommand();
    var IAM_1 = require_IAM();
    var IAMClient_1 = require_IAMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListVirtualMFADevicesCommand_1.ListVirtualMFADevicesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listVirtualMFADevices(input, ...args);
    };
    async function* paginateListVirtualMFADevices(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof IAM_1.IAM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof IAMClient_1.IAMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected IAM | IAMClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListVirtualMFADevices = paginateListVirtualMFADevices;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/SimulateCustomPolicyPaginator.js
var require_SimulateCustomPolicyPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/SimulateCustomPolicyPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateSimulateCustomPolicy = void 0;
    var SimulateCustomPolicyCommand_1 = require_SimulateCustomPolicyCommand();
    var IAM_1 = require_IAM();
    var IAMClient_1 = require_IAMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new SimulateCustomPolicyCommand_1.SimulateCustomPolicyCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.simulateCustomPolicy(input, ...args);
    };
    async function* paginateSimulateCustomPolicy(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof IAM_1.IAM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof IAMClient_1.IAMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected IAM | IAMClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateSimulateCustomPolicy = paginateSimulateCustomPolicy;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/SimulatePrincipalPolicyPaginator.js
var require_SimulatePrincipalPolicyPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/SimulatePrincipalPolicyPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateSimulatePrincipalPolicy = void 0;
    var SimulatePrincipalPolicyCommand_1 = require_SimulatePrincipalPolicyCommand();
    var IAM_1 = require_IAM();
    var IAMClient_1 = require_IAMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new SimulatePrincipalPolicyCommand_1.SimulatePrincipalPolicyCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.simulatePrincipalPolicy(input, ...args);
    };
    async function* paginateSimulatePrincipalPolicy(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof IAM_1.IAM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof IAMClient_1.IAMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected IAM | IAMClient");
        }
        yield page;
        const prevToken = token;
        token = page.Marker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateSimulatePrincipalPolicy = paginateSimulatePrincipalPolicy;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/index.js
var require_pagination3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/pagination/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_GetAccountAuthorizationDetailsPaginator(), exports);
    tslib_1.__exportStar(require_GetGroupPaginator(), exports);
    tslib_1.__exportStar(require_Interfaces2(), exports);
    tslib_1.__exportStar(require_ListAccessKeysPaginator(), exports);
    tslib_1.__exportStar(require_ListAccountAliasesPaginator(), exports);
    tslib_1.__exportStar(require_ListAttachedGroupPoliciesPaginator(), exports);
    tslib_1.__exportStar(require_ListAttachedRolePoliciesPaginator(), exports);
    tslib_1.__exportStar(require_ListAttachedUserPoliciesPaginator(), exports);
    tslib_1.__exportStar(require_ListEntitiesForPolicyPaginator(), exports);
    tslib_1.__exportStar(require_ListGroupPoliciesPaginator(), exports);
    tslib_1.__exportStar(require_ListGroupsForUserPaginator(), exports);
    tslib_1.__exportStar(require_ListGroupsPaginator(), exports);
    tslib_1.__exportStar(require_ListInstanceProfilesForRolePaginator(), exports);
    tslib_1.__exportStar(require_ListInstanceProfilesPaginator(), exports);
    tslib_1.__exportStar(require_ListMFADevicesPaginator(), exports);
    tslib_1.__exportStar(require_ListPoliciesPaginator(), exports);
    tslib_1.__exportStar(require_ListPolicyVersionsPaginator(), exports);
    tslib_1.__exportStar(require_ListRolePoliciesPaginator(), exports);
    tslib_1.__exportStar(require_ListRolesPaginator(), exports);
    tslib_1.__exportStar(require_ListSSHPublicKeysPaginator(), exports);
    tslib_1.__exportStar(require_ListServerCertificatesPaginator(), exports);
    tslib_1.__exportStar(require_ListSigningCertificatesPaginator(), exports);
    tslib_1.__exportStar(require_ListUserPoliciesPaginator(), exports);
    tslib_1.__exportStar(require_ListUserTagsPaginator(), exports);
    tslib_1.__exportStar(require_ListUsersPaginator(), exports);
    tslib_1.__exportStar(require_ListVirtualMFADevicesPaginator(), exports);
    tslib_1.__exportStar(require_SimulateCustomPolicyPaginator(), exports);
    tslib_1.__exportStar(require_SimulatePrincipalPolicyPaginator(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-waiter@3.272.0/node_modules/@aws-sdk/util-waiter/dist-cjs/utils/sleep.js
var require_sleep = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-waiter@3.272.0/node_modules/@aws-sdk/util-waiter/dist-cjs/utils/sleep.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sleep = void 0;
    var sleep = (seconds) => {
      return new Promise((resolve) => setTimeout(resolve, seconds * 1e3));
    };
    exports.sleep = sleep;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-waiter@3.272.0/node_modules/@aws-sdk/util-waiter/dist-cjs/waiter.js
var require_waiter2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-waiter@3.272.0/node_modules/@aws-sdk/util-waiter/dist-cjs/waiter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.checkExceptions = exports.WaiterState = exports.waiterServiceDefaults = void 0;
    exports.waiterServiceDefaults = {
      minDelay: 2,
      maxDelay: 120
    };
    var WaiterState;
    (function(WaiterState2) {
      WaiterState2["ABORTED"] = "ABORTED";
      WaiterState2["FAILURE"] = "FAILURE";
      WaiterState2["SUCCESS"] = "SUCCESS";
      WaiterState2["RETRY"] = "RETRY";
      WaiterState2["TIMEOUT"] = "TIMEOUT";
    })(WaiterState = exports.WaiterState || (exports.WaiterState = {}));
    var checkExceptions = (result) => {
      if (result.state === WaiterState.ABORTED) {
        const abortError = new Error(`${JSON.stringify({
          ...result,
          reason: "Request was aborted"
        })}`);
        abortError.name = "AbortError";
        throw abortError;
      } else if (result.state === WaiterState.TIMEOUT) {
        const timeoutError = new Error(`${JSON.stringify({
          ...result,
          reason: "Waiter has timed out"
        })}`);
        timeoutError.name = "TimeoutError";
        throw timeoutError;
      } else if (result.state !== WaiterState.SUCCESS) {
        throw new Error(`${JSON.stringify({ result })}`);
      }
      return result;
    };
    exports.checkExceptions = checkExceptions;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-waiter@3.272.0/node_modules/@aws-sdk/util-waiter/dist-cjs/poller.js
var require_poller = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-waiter@3.272.0/node_modules/@aws-sdk/util-waiter/dist-cjs/poller.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.runPolling = void 0;
    var sleep_1 = require_sleep();
    var waiter_1 = require_waiter2();
    var exponentialBackoffWithJitter = (minDelay, maxDelay, attemptCeiling, attempt) => {
      if (attempt > attemptCeiling)
        return maxDelay;
      const delay = minDelay * 2 ** (attempt - 1);
      return randomInRange(minDelay, delay);
    };
    var randomInRange = (min, max) => min + Math.random() * (max - min);
    var runPolling = async ({ minDelay, maxDelay, maxWaitTime, abortController, client, abortSignal }, input, acceptorChecks) => {
      var _a;
      const { state: state2, reason } = await acceptorChecks(client, input);
      if (state2 !== waiter_1.WaiterState.RETRY) {
        return { state: state2, reason };
      }
      let currentAttempt = 1;
      const waitUntil = Date.now() + maxWaitTime * 1e3;
      const attemptCeiling = Math.log(maxDelay / minDelay) / Math.log(2) + 1;
      while (true) {
        if (((_a = abortController === null || abortController === void 0 ? void 0 : abortController.signal) === null || _a === void 0 ? void 0 : _a.aborted) || (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted)) {
          return { state: waiter_1.WaiterState.ABORTED };
        }
        const delay = exponentialBackoffWithJitter(minDelay, maxDelay, attemptCeiling, currentAttempt);
        if (Date.now() + delay * 1e3 > waitUntil) {
          return { state: waiter_1.WaiterState.TIMEOUT };
        }
        await (0, sleep_1.sleep)(delay);
        const { state: state3, reason: reason2 } = await acceptorChecks(client, input);
        if (state3 !== waiter_1.WaiterState.RETRY) {
          return { state: state3, reason: reason2 };
        }
        currentAttempt += 1;
      }
    };
    exports.runPolling = runPolling;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-waiter@3.272.0/node_modules/@aws-sdk/util-waiter/dist-cjs/utils/validate.js
var require_validate = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-waiter@3.272.0/node_modules/@aws-sdk/util-waiter/dist-cjs/utils/validate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateWaiterOptions = void 0;
    var validateWaiterOptions = (options) => {
      if (options.maxWaitTime < 1) {
        throw new Error(`WaiterConfiguration.maxWaitTime must be greater than 0`);
      } else if (options.minDelay < 1) {
        throw new Error(`WaiterConfiguration.minDelay must be greater than 0`);
      } else if (options.maxDelay < 1) {
        throw new Error(`WaiterConfiguration.maxDelay must be greater than 0`);
      } else if (options.maxWaitTime <= options.minDelay) {
        throw new Error(`WaiterConfiguration.maxWaitTime [${options.maxWaitTime}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);
      } else if (options.maxDelay < options.minDelay) {
        throw new Error(`WaiterConfiguration.maxDelay [${options.maxDelay}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);
      }
    };
    exports.validateWaiterOptions = validateWaiterOptions;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-waiter@3.272.0/node_modules/@aws-sdk/util-waiter/dist-cjs/utils/index.js
var require_utils2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-waiter@3.272.0/node_modules/@aws-sdk/util-waiter/dist-cjs/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_sleep(), exports);
    tslib_1.__exportStar(require_validate(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-waiter@3.272.0/node_modules/@aws-sdk/util-waiter/dist-cjs/createWaiter.js
var require_createWaiter = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-waiter@3.272.0/node_modules/@aws-sdk/util-waiter/dist-cjs/createWaiter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createWaiter = void 0;
    var poller_1 = require_poller();
    var utils_1 = require_utils2();
    var waiter_1 = require_waiter2();
    var abortTimeout = async (abortSignal) => {
      return new Promise((resolve) => {
        abortSignal.onabort = () => resolve({ state: waiter_1.WaiterState.ABORTED });
      });
    };
    var createWaiter = async (options, input, acceptorChecks) => {
      const params = {
        ...waiter_1.waiterServiceDefaults,
        ...options
      };
      (0, utils_1.validateWaiterOptions)(params);
      const exitConditions = [(0, poller_1.runPolling)(params, input, acceptorChecks)];
      if (options.abortController) {
        exitConditions.push(abortTimeout(options.abortController.signal));
      }
      if (options.abortSignal) {
        exitConditions.push(abortTimeout(options.abortSignal));
      }
      return Promise.race(exitConditions);
    };
    exports.createWaiter = createWaiter;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-waiter@3.272.0/node_modules/@aws-sdk/util-waiter/dist-cjs/index.js
var require_dist_cjs40 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-waiter@3.272.0/node_modules/@aws-sdk/util-waiter/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_createWaiter(), exports);
    tslib_1.__exportStar(require_waiter2(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/waiters/waitForInstanceProfileExists.js
var require_waitForInstanceProfileExists = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/waiters/waitForInstanceProfileExists.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.waitUntilInstanceProfileExists = exports.waitForInstanceProfileExists = void 0;
    var util_waiter_1 = require_dist_cjs40();
    var GetInstanceProfileCommand_1 = require_GetInstanceProfileCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new GetInstanceProfileCommand_1.GetInstanceProfileCommand(input));
        reason = result;
        return { state: util_waiter_1.WaiterState.SUCCESS, reason };
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "NoSuchEntityException") {
          return { state: util_waiter_1.WaiterState.RETRY, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForInstanceProfileExists = async (params, input) => {
      const serviceDefaults = { minDelay: 1, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports.waitForInstanceProfileExists = waitForInstanceProfileExists;
    var waitUntilInstanceProfileExists = async (params, input) => {
      const serviceDefaults = { minDelay: 1, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports.waitUntilInstanceProfileExists = waitUntilInstanceProfileExists;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/waiters/waitForPolicyExists.js
var require_waitForPolicyExists = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/waiters/waitForPolicyExists.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.waitUntilPolicyExists = exports.waitForPolicyExists = void 0;
    var util_waiter_1 = require_dist_cjs40();
    var GetPolicyCommand_1 = require_GetPolicyCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new GetPolicyCommand_1.GetPolicyCommand(input));
        reason = result;
        return { state: util_waiter_1.WaiterState.SUCCESS, reason };
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "NoSuchEntity") {
          return { state: util_waiter_1.WaiterState.RETRY, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForPolicyExists = async (params, input) => {
      const serviceDefaults = { minDelay: 1, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports.waitForPolicyExists = waitForPolicyExists;
    var waitUntilPolicyExists = async (params, input) => {
      const serviceDefaults = { minDelay: 1, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports.waitUntilPolicyExists = waitUntilPolicyExists;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/waiters/waitForRoleExists.js
var require_waitForRoleExists = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/waiters/waitForRoleExists.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.waitUntilRoleExists = exports.waitForRoleExists = void 0;
    var util_waiter_1 = require_dist_cjs40();
    var GetRoleCommand_1 = require_GetRoleCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new GetRoleCommand_1.GetRoleCommand(input));
        reason = result;
        return { state: util_waiter_1.WaiterState.SUCCESS, reason };
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "NoSuchEntity") {
          return { state: util_waiter_1.WaiterState.RETRY, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForRoleExists = async (params, input) => {
      const serviceDefaults = { minDelay: 1, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports.waitForRoleExists = waitForRoleExists;
    var waitUntilRoleExists = async (params, input) => {
      const serviceDefaults = { minDelay: 1, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports.waitUntilRoleExists = waitUntilRoleExists;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/waiters/waitForUserExists.js
var require_waitForUserExists = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/waiters/waitForUserExists.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.waitUntilUserExists = exports.waitForUserExists = void 0;
    var util_waiter_1 = require_dist_cjs40();
    var GetUserCommand_1 = require_GetUserCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new GetUserCommand_1.GetUserCommand(input));
        reason = result;
        return { state: util_waiter_1.WaiterState.SUCCESS, reason };
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "NoSuchEntity") {
          return { state: util_waiter_1.WaiterState.RETRY, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForUserExists = async (params, input) => {
      const serviceDefaults = { minDelay: 1, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports.waitForUserExists = waitForUserExists;
    var waitUntilUserExists = async (params, input) => {
      const serviceDefaults = { minDelay: 1, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports.waitUntilUserExists = waitUntilUserExists;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/waiters/index.js
var require_waiters = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/waiters/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_waitForInstanceProfileExists(), exports);
    tslib_1.__exportStar(require_waitForPolicyExists(), exports);
    tslib_1.__exportStar(require_waitForRoleExists(), exports);
    tslib_1.__exportStar(require_waitForUserExists(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/index.js
var require_dist_cjs41 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iam@3.279.0/node_modules/@aws-sdk/client-iam/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IAMServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_IAM(), exports);
    tslib_1.__exportStar(require_IAMClient(), exports);
    tslib_1.__exportStar(require_commands3(), exports);
    tslib_1.__exportStar(require_models3(), exports);
    tslib_1.__exportStar(require_pagination3(), exports);
    tslib_1.__exportStar(require_waiters(), exports);
    var IAMServiceException_1 = require_IAMServiceException();
    Object.defineProperty(exports, "IAMServiceException", { enumerable: true, get: function() {
      return IAMServiceException_1.IAMServiceException;
    } });
  }
});

// src/cli/sst.ts
import { blue as blue3, red } from "colorette";

// src/cli/program.ts
import yargs from "yargs";
import { hideBin } from "yargs/helpers";
var program = yargs(hideBin(process.argv)).scriptName("sst").option("stage", {
  type: "string",
  describe: "The stage to use, defaults to personal stage"
}).option("profile", {
  type: "string",
  describe: "The AWS profile to use"
}).option("region", {
  type: "string",
  describe: "The AWS region to use"
}).option("verbose", {
  type: "boolean",
  describe: "Print verbose logs"
}).option("role", {
  type: "string",
  describe: "ARN of the IAM role to use when invoking AWS"
}).option("future", {
  type: "boolean",
  describe: "DO NOT USE. For enabling untested, experimental features"
}).group(["stage", "profile", "region", "role", "verbose", "help"], "Global:").middleware(async (argv) => {
  if (argv.verbose) {
    process.env.SST_VERBOSE = "1";
  }
  if (argv._.length > 0) {
    const { initProject: initProject2 } = await Promise.resolve().then(() => (init_project(), project_exports));
    await initProject2(argv);
    const { trackCli: trackCli2 } = await Promise.resolve().then(() => (init_telemetry(), telemetry_exports));
    trackCli2(argv._[0]);
  }
}).version(false).epilogue(`Join the SST community on Discord https://sst.dev/discord`).recommendCommands().demandCommand().strict().fail((_, error2, yargs2) => {
  if (!error2) {
    yargs2.showHelp();
    process.exit(1);
  }
  throw error2;
});

// src/cli/sst.ts
init_error();
init_spinner();
init_logger();
import dotenv2 from "dotenv";

// src/cli/commands/bootstrap.ts
var bootstrap = (program2) => program2.command(
  "bootstrap",
  "Create the SST bootstrap stack",
  (yargs2) => yargs2,
  async () => {
    const { useBootstrap: useBootstrap2 } = await Promise.resolve().then(() => (init_bootstrap(), bootstrap_exports));
    await useBootstrap2();
    process.exit(0);
  }
);

// src/cli/commands/dev.tsx
var dev = (program2) => program2.command(
  ["dev", "start"],
  "Work on your app locally",
  (yargs2) => yargs2.option("increase-timeout", {
    type: "boolean",
    description: "Increase function timeout"
  }),
  async (args) => {
    const { Colors: Colors2 } = await Promise.resolve().then(() => (init_colors(), colors_exports));
    const { printHeader: printHeader2 } = await Promise.resolve().then(() => (init_header(), header_exports));
    const { mapValues } = await import("remeda");
    const path20 = await import("path");
    const { useRuntimeWorkers: useRuntimeWorkers2 } = await Promise.resolve().then(() => (init_workers(), workers_exports));
    const { useIOTBridge: useIOTBridge2 } = await Promise.resolve().then(() => (init_iot2(), iot_exports2));
    const { useRuntimeServer: useRuntimeServer2 } = await Promise.resolve().then(() => (init_server(), server_exports));
    const { useBus: useBus2 } = await Promise.resolve().then(() => (init_bus(), bus_exports));
    const { useWatcher: useWatcher2 } = await Promise.resolve().then(() => (init_watcher(), watcher_exports));
    const { useAppMetadata: useAppMetadata2, saveAppMetadata: saveAppMetadata2, Stacks } = await Promise.resolve().then(() => (init_stacks(), stacks_exports));
    const { Logger: Logger2 } = await Promise.resolve().then(() => (init_logger(), logger_exports));
    const { createSpinner: createSpinner2 } = await Promise.resolve().then(() => (init_spinner(), spinner_exports));
    const { bold: bold2, dim: dim2, yellow } = await import("colorette");
    const { render } = await import("ink");
    const React2 = await import("react");
    const { Context: Context2 } = await Promise.resolve().then(() => (init_context(), context_exports));
    const { printDeploymentResults: printDeploymentResults2, DeploymentUI: DeploymentUI2 } = await Promise.resolve().then(() => (init_deploy2(), deploy_exports));
    const { useLocalServer: useLocalServer2 } = await Promise.resolve().then(() => (init_server2(), server_exports2));
    const fs18 = await import("fs/promises");
    const crypto2 = await import("crypto");
    const { useFunctions: useFunctions3 } = await import("../src/constructs/Function.js");
    const { useSites } = await import("../src/constructs/SsrSite.js");
    const { usePothosBuilder: usePothosBuilder2 } = await Promise.resolve().then(() => (init_pothos2(), pothos_exports2));
    const { useKyselyTypeGenerator: useKyselyTypeGenerator2 } = await Promise.resolve().then(() => (init_kysely(), kysely_exports));
    const { useRDSWarmer: useRDSWarmer2 } = await Promise.resolve().then(() => (init_warmer(), warmer_exports));
    const { useProject: useProject2 } = await Promise.resolve().then(() => (init_project(), project_exports));
    const { useMetadata: useMetadata2 } = await Promise.resolve().then(() => (init_metadata(), metadata_exports));
    const { useIOT: useIOT2 } = await Promise.resolve().then(() => (init_iot(), iot_exports));
    const { clear: clear2 } = await Promise.resolve().then(() => (init_terminal(), terminal_exports));
    const { getCiInfo: getCiInfo2 } = await Promise.resolve().then(() => (init_ci_info(), ci_info_exports));
    if (args._[0] === "start") {
      console.log(
        yellow(
          `Warning: ${bold2(`sst start`)} has been renamed to ${bold2(
            `sst dev`
          )}`
        )
      );
    }
    const useFunctionLogger = Context2.memo(async () => {
      const bus = useBus2();
      const colors = ["#01cdfe", "#ff71ce", "#05ffa1", "#b967ff"];
      let index = 0;
      const pending = /* @__PURE__ */ new Map();
      function prefix(requestID) {
        const exists = pending.get(requestID);
        if (exists) {
          return Colors2.hex(exists.color)(Colors2.prefix);
        }
        pending.set(requestID, {
          requestID,
          started: Date.now(),
          color: colors[index % colors.length]
        });
        index++;
        return prefix(requestID);
      }
      function end(requestID) {
        pending.delete(requestID);
      }
      bus.subscribe("function.invoked", async (evt) => {
        Colors2.line(
          prefix(evt.properties.requestID),
          Colors2.dim.bold("Invoked"),
          Colors2.dim(
            useFunctions3().fromID(evt.properties.functionID)?.handler
          )
        );
      });
      bus.subscribe("worker.stdout", async (evt) => {
        prefix(evt.properties.requestID);
        const { started } = pending.get(evt.properties.requestID);
        for (let line of evt.properties.message.split("\n")) {
          Colors2.line(
            prefix(evt.properties.requestID),
            Colors2.dim(("+" + (Date.now() - started) + "ms").padEnd(7)),
            Colors2.dim(line)
          );
        }
      });
      bus.subscribe("function.build.success", async (evt) => {
        const info = useFunctions3().fromID(evt.properties.functionID);
        if (!info)
          return;
        if (info.enableLiveDev === false)
          return;
        Colors2.line(Colors2.dim(Colors2.prefix, "Built", info.handler));
      });
      bus.subscribe("function.build.failed", async (evt) => {
        const info = useFunctions3().fromID(evt.properties.functionID);
        if (!info)
          return;
        if (info.enableLiveDev === false)
          return;
        Colors2.gap();
        Colors2.line(Colors2.danger("\u2716 "), "Build failed", info.handler);
        for (const line of evt.properties.errors) {
          Colors2.line("  ", line);
        }
        Colors2.gap();
      });
      bus.subscribe("function.success", async (evt) => {
        const p = prefix(evt.properties.requestID);
        const req = pending.get(evt.properties.requestID);
        setTimeout(() => {
          Colors2.line(
            p,
            Colors2.dim(`Done in ${Date.now() - req.started - 100}ms`)
          );
          end(evt.properties.requestID);
        }, 100);
      });
      bus.subscribe("function.error", async (evt) => {
        setTimeout(() => {
          Colors2.line(
            prefix(evt.properties.requestID),
            Colors2.danger.bold("Error:"),
            Colors2.danger.bold(evt.properties.errorMessage)
          );
          for (const line of evt.properties.trace || []) {
            if (line.includes(evt.properties.errorMessage))
              continue;
            Colors2.line("  ", `${dim2(line)}`);
          }
          end(evt.properties.requestID);
        }, 100);
      });
    });
    const useStackBuilder = Context2.memo(async () => {
      const watcher = useWatcher2();
      const project = useProject2();
      let lastDeployed;
      let isWorking = false;
      let isDirty = false;
      async function build2() {
        if (isWorking) {
          isDirty = true;
          return;
        }
        isDirty = false;
        isWorking = true;
        Colors2.gap();
        const spinner = createSpinner2({
          color: "gray",
          text: lastDeployed ? ` Building...` : dim2(` Checking for changes`)
        }).start();
        try {
          const [metafile, sstConfig] = await Stacks.load(
            project.paths.config
          );
          project.metafile = metafile;
          project.stacks = sstConfig.stacks;
          const assembly = await Stacks.synth({
            increaseTimeout: args["increase-timeout"],
            fn: project.stacks,
            outDir: `.sst/cdk.out`,
            mode: "dev"
          });
          Logger2.debug("Directory", assembly.directory);
          const next = await checksum(assembly.directory);
          Logger2.debug("Checksum", "next", next, "old", lastDeployed);
          if (next === lastDeployed) {
            spinner.succeed(Colors2.dim(" Built with no changes"));
            isWorking = false;
            if (isDirty)
              build2();
            return;
          }
          if (!lastDeployed) {
            spinner.stop();
            spinner.clear();
            Colors2.mode("gap");
          } else {
            spinner.succeed(Colors2.dim(` Built`));
            Colors2.gap();
          }
          deploy3(assembly);
        } catch (ex) {
          isWorking = false;
          spinner.fail();
          Colors2.line(
            ex.stack.split("\n").map((line) => "   " + line).join("\n")
          );
          Colors2.gap();
        }
      }
      async function deploy3(assembly) {
        const nextChecksum = await checksum(assembly.directory);
        const component = render(/* @__PURE__ */ React2.createElement(DeploymentUI2, { assembly }));
        const results = await Stacks.deployMany(assembly.stacks);
        component.clear();
        component.unmount();
        printDeploymentResults2(assembly, results);
        if (!lastDeployed) {
          await saveAppMetadata2({ mode: "dev" });
          useSites().all.filter(({ props }) => props.dev?.deploy !== true).forEach(({ type, props }) => {
            const framework = type === "AstroSite" ? "Astro" : type === "NextjsSite" ? "Next.js" : type === "RemixSite" ? "Remix" : type === "SolidStartSite" ? "SolidStart" : type === "SvelteKitSite" ? "SvelteKit" : void 0;
            if (framework) {
              const cdCmd = path20.resolve(props.path) === process.cwd() ? "" : `cd ${props.path} && `;
              Colors2.line(
                Colors2.primary(`\u279C `),
                Colors2.bold(`Start ${framework}:`),
                `${cdCmd}npm run dev`
              );
              Colors2.gap();
            }
          });
        }
        lastDeployed = nextChecksum;
        fs18.writeFile(
          path20.join(project.paths.out, "outputs.json"),
          JSON.stringify(
            mapValues(results, (val) => val.outputs),
            null,
            2
          )
        );
        isWorking = false;
        if (isDirty)
          build2();
      }
      async function checksum(cdkOutPath) {
        const manifestPath = path20.join(cdkOutPath, "manifest.json");
        const cdkManifest = JSON.parse(
          await fs18.readFile(manifestPath).then((x) => x.toString())
        );
        const checksumData = await Promise.all(
          Object.keys(cdkManifest.artifacts).filter(
            (key) => cdkManifest.artifacts[key].type === "aws:cloudformation:stack"
          ).map(async (key) => {
            const { templateFile } = cdkManifest.artifacts[key].properties;
            const templatePath = path20.join(cdkOutPath, templateFile);
            const templateContent = await fs18.readFile(templatePath);
            return templateContent;
          })
        ).then((x) => x.join("\n"));
        const hash2 = crypto2.createHash("sha256").update(checksumData).digest("hex");
        return hash2;
      }
      watcher.subscribe("file.changed", async (evt) => {
        if (!project.metafile)
          return;
        if (!project.metafile.inputs[evt.properties.relative.split(path20.sep).join(path20.posix.sep)])
          return;
        build2();
      });
      await build2();
    });
    const useDisconnector = Context2.memo(async () => {
      const bus = useBus2();
      const project = useProject2();
      const iot2 = await useIOT2();
      bus.subscribe("cli.dev", async (evt) => {
        const topic = `${iot2.prefix}/events`;
        iot2.publish(topic, "cli.dev", evt.properties);
      });
      bus.publish("cli.dev", {
        stage: project.config.stage,
        app: project.config.name
      });
      bus.subscribe("cli.dev", async (evt) => {
        if (evt.properties.stage !== project.config.stage)
          return;
        if (evt.properties.app !== project.config.name)
          return;
        Colors2.gap();
        Colors2.line(
          Colors2.danger(`\u279C `),
          "Another `sst dev` session has been started for this stage. Exiting..."
        );
        process.exit(0);
      });
    });
    const [appMetadata] = await Promise.all([
      useAppMetadata2(),
      useLocalServer2({
        key: "",
        cert: "",
        live: true
      })
    ]);
    async function promptChangeMode() {
      const readline = await import("readline");
      const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
      });
      return new Promise((resolve) => {
        console.log("");
        rl.question(
          `You have previously deployed the stage "${useProject2().config.stage}" in production. It is recommended that you use a different stage for development. Read more here \u2014 https://docs.sst.dev/live-lambda-development

Are you sure you want to run this stage in dev mode? [y/N] `,
          async (input) => {
            rl.close();
            resolve(input.trim() === "y");
          }
        );
      });
    }
    if (!getCiInfo2().isCI && appMetadata && appMetadata.mode !== "dev") {
      if (!await promptChangeMode()) {
        process.exit(0);
      }
    }
    clear2();
    await printHeader2({ console: true, hint: "ready!" });
    await Promise.all([
      useDisconnector(),
      useRuntimeWorkers2(),
      useIOTBridge2(),
      useRuntimeServer2(),
      usePothosBuilder2(),
      useMetadata2(),
      useKyselyTypeGenerator2(),
      useRDSWarmer2(),
      useFunctionLogger(),
      useStackBuilder()
    ]);
  }
);

// src/cli/commands/bind.ts
init_error();
import path18 from "path";
var OutdatedMetadataError = class extends Error {
};
var bind = (program2) => program2.command(
  ["bind <command..>", "env <command..>"],
  "Bind your app's resources to a command",
  (yargs2) => yargs2.array("command").example(`sst bind "vitest run"`, "Bind your resources to your tests").example(
    `sst bind "tsx scripts/myscript.ts"`,
    "Bind your resources to a script"
  ),
  async (args) => {
    const { spawn: spawn7 } = await import("child_process");
    const kill = await import("tree-kill");
    const { useProject: useProject2 } = await Promise.resolve().then(() => (init_project(), project_exports));
    const { useBus: useBus2 } = await Promise.resolve().then(() => (init_bus(), bus_exports));
    const { useIOT: useIOT2 } = await Promise.resolve().then(() => (init_iot(), iot_exports));
    const { Colors: Colors2 } = await Promise.resolve().then(() => (init_colors(), colors_exports));
    const { Logger: Logger2 } = await Promise.resolve().then(() => (init_logger(), logger_exports));
    if (args._[0] === "env") {
      Colors2.line(
        Colors2.warning(
          `Warning: ${Colors2.bold(
            `sst env`
          )} has been renamed to ${Colors2.bold(`sst bind`)}`
        )
      );
    }
    await useIOT2();
    const bus = useBus2();
    const project = useProject2();
    const command = args.command?.join(" ");
    const isSite = await isRunningInSite();
    let p;
    let timer;
    let siteConfigCache;
    if (!command) {
      throw new VisibleError(
        `Command is required, e.g. sst bind ${isSite ? "next dev" : "vitest run"}`
      );
    }
    if (!isSite) {
      Logger2.debug("Running in script mode.");
      return await bindScript();
    }
    try {
      await bindSite("init");
    } catch (e) {
      if (e instanceof OutdatedMetadataError) {
        Colors2.line(
          Colors2.warning(
            "Warning: This was deployed with an old version of SST. Run `sst dev` or `sst deploy` to update."
          )
        );
        return await bindScript();
      }
      throw e;
    }
    bus.subscribe(
      "stacks.metadata.updated",
      () => bindSite("metadata_updated")
    );
    bus.subscribe(
      "stacks.metadata.deleted",
      () => bindSite("metadata_updated")
    );
    bus.subscribe("config.secret.updated", (payload) => {
      const secretName = payload.properties.name;
      if (!(siteConfigCache?.secrets || []).includes(secretName))
        return;
      Colors2.line(
        `
`,
        `SST secrets have been updated. Restarting \`${command}\`...`
      );
      bindSite("secrets_updated");
    });
    async function isRunningInSite() {
      const { existsAsync: existsAsync3 } = await Promise.resolve().then(() => (init_fs(), fs_exports));
      const { readFile } = await import("fs/promises");
      const SITE_CONFIGS = [
        { file: "next.config", multiExtension: true },
        { file: "astro.config", multiExtension: true },
        { file: "remix.config", multiExtension: true },
        { file: "svelte.config", multiExtension: true },
        { file: "gatsby-config", multiExtension: true },
        { file: "angular.json" },
        { file: "ember-cli-build.js" },
        {
          file: "vite.config",
          multiExtension: true,
          match: /solid-start|plugin-vue|plugin-react|@preact\/preset-vite/
        },
        { file: "package.json", match: /react-scripts/ },
        { file: "index.html" }
      ];
      const results = await Promise.all(
        SITE_CONFIGS.map((site) => {
          const files = site.multiExtension ? [".js", ".cjs", ".mjs", ".ts"].map(
            (ext) => `${site.file}${ext}`
          ) : [site.file];
          return files.map(async (file) => {
            const exists = await existsAsync3(file);
            if (!exists)
              return false;
            if (site.match) {
              const content = await readFile(file);
              return content.toString().match(site.match);
            }
            return true;
          });
        }).flat()
      );
      return results.some(Boolean);
    }
    async function bindSite(reason) {
      const siteMetadata = await getSiteMetadataUntilAvailable();
      const siteConfig = await parseSiteMetadata(siteMetadata);
      if (reason === "metadata_updated") {
        if (areEnvsSame(siteConfig.envs, siteConfigCache?.envs || {}))
          return;
        Colors2.line(
          `
`,
          `SST resources have been updated. Restarting \`${command}\`...`
        );
      }
      siteConfigCache = siteConfig;
      if (siteConfig.role) {
        const credentials = await assumeSsrRole(siteConfig.role);
        if (credentials) {
          const expireAt = credentials.Expiration.getTime() - 6e4;
          clearTimeout(timer);
          timer = setTimeout(() => {
            Colors2.line(
              `
`,
              `Your AWS session is about to expire. Creating a new session and restarting \`${command}\`...`
            );
            bindSite("iam_expired");
          }, expireAt - Date.now());
          await runCommand({
            ...siteConfig.envs,
            AWS_ACCESS_KEY_ID: credentials.AccessKeyId,
            AWS_SECRET_ACCESS_KEY: credentials.SecretAccessKey,
            AWS_SESSION_TOKEN: credentials.SessionToken
          });
          return;
        }
      }
      await runCommand({
        ...siteConfig.envs,
        ...await localIamCredentials()
      });
    }
    async function bindScript() {
      const { Config: Config2 } = await Promise.resolve().then(() => (init_config(), config_exports));
      await runCommand({
        ...await Config2.env(),
        ...await localIamCredentials()
      });
    }
    async function getSiteMetadataUntilAvailable() {
      const { createSpinner: createSpinner2 } = await Promise.resolve().then(() => (init_spinner(), spinner_exports));
      const spinner = createSpinner2({});
      while (true) {
        const data2 = await getSiteMetadata();
        if (!data2) {
          spinner.start("Make sure `sst dev` is running...");
          await new Promise((resolve) => setTimeout(resolve, 1e3));
          continue;
        }
        spinner.isSpinning && spinner.stop().clear();
        return data2;
      }
    }
    async function getSiteMetadata() {
      const { metadata: metadata3 } = await Promise.resolve().then(() => (init_metadata(), metadata_exports));
      const metadataData = await metadata3();
      return Object.values(metadataData).flat().filter(
        (c) => [
          "StaticSite",
          "NextjsSite",
          "AstroSite",
          "RemixSite",
          "SolidStartSite",
          "SvelteKitSite",
          "SlsNextjsSite"
        ].includes(c.type)
      ).find((c) => {
        const isSsr = c.type !== "StaticSite" && c.type !== "SlsNextjsSite";
        if (!c.data.path || isSsr && !c.data.server || !isSsr && !c.data.environment) {
          throw new OutdatedMetadataError();
        }
        return path18.resolve(project.paths.root, c.data.path) === process.cwd();
      });
    }
    async function parseSiteMetadata(metadata3) {
      const { LambdaClient: LambdaClient2, GetFunctionCommand } = await import("@aws-sdk/client-lambda");
      const { useAWSClient: useAWSClient2 } = await Promise.resolve().then(() => (init_credentials(), credentials_exports));
      const isBindSupported = metadata3.type !== "StaticSite" && metadata3.type !== "SlsNextjsSite";
      if (!isBindSupported) {
        return { envs: metadata3.data.environment };
      }
      const lambda = useAWSClient2(LambdaClient2);
      const { Configuration: functionConfig } = await lambda.send(
        new GetFunctionCommand({
          FunctionName: metadata3.data.server
        })
      );
      return {
        role: functionConfig?.Role,
        envs: functionConfig?.Environment?.Variables || {},
        secrets: metadata3.data.secrets
      };
    }
    async function assumeSsrRole(roleArn) {
      const { STSClient: STSClient2, AssumeRoleCommand } = await import("@aws-sdk/client-sts");
      const { useAWSClient: useAWSClient2 } = await Promise.resolve().then(() => (init_credentials(), credentials_exports));
      const sts = useAWSClient2(STSClient2);
      const assumeRole = async (duration) => {
        const { Credentials: credentials } = await sts.send(
          new AssumeRoleCommand({
            RoleArn: roleArn,
            RoleSessionName: "dev-session",
            DurationSeconds: duration
          })
        );
        return credentials;
      };
      let err;
      try {
        return await assumeRole(43200);
      } catch (e) {
        err = e;
      }
      if (err.name === "ValidationError" && err.message.startsWith("The requested DurationSeconds exceeds")) {
        try {
          return await assumeRole(3600);
        } catch (e) {
          err = e;
        }
      }
      Colors2.line(
        "Using local IAM credentials since `sst dev` is not running."
      );
      Logger2.debug(`Failed to assume ${roleArn}.`, err);
    }
    async function localIamCredentials() {
      const { useAWSCredentials: useAWSCredentials2 } = await Promise.resolve().then(() => (init_credentials(), credentials_exports));
      const credentials = await useAWSCredentials2();
      return {
        AWS_ACCESS_KEY_ID: credentials.accessKeyId,
        AWS_SECRET_ACCESS_KEY: credentials.secretAccessKey,
        AWS_SESSION_TOKEN: credentials.sessionToken
      };
    }
    async function runCommand(envs) {
      Colors2.gap();
      if (p) {
        p.removeAllListeners("exit");
        await new Promise((resolve, reject) => {
          kill.default(p?.pid, (error2) => {
            if (error2) {
              return reject(error2);
            }
            resolve(true);
          });
        });
      }
      p = spawn7(command, {
        env: {
          ...process.env,
          ...envs,
          AWS_REGION: project.config.region
        },
        stdio: "inherit",
        shell: true
      });
      p.on("exit", (code) => {
        process.exit(code || 0);
      });
    }
    function areEnvsSame(envs1, envs2) {
      return Object.keys(envs1).length === Object.keys(envs2).length && Object.keys(envs1).every((key) => envs1[key] === envs2[key]);
    }
  }
).strict(false);

// src/cli/commands/build.ts
var build = (program2) => program2.command(
  "build",
  "Build your app",
  (yargs2) => yargs2.option("to", {
    type: "string",
    describe: "Output directory, defaults to .sst/dist"
  }),
  async (args) => {
    const { useProject: useProject2 } = await Promise.resolve().then(() => (init_project(), project_exports));
    const { Stacks } = await Promise.resolve().then(() => (init_stacks(), stacks_exports));
    const { Colors: Colors2 } = await Promise.resolve().then(() => (init_colors(), colors_exports));
    const path20 = await import("path");
    const result = await Stacks.synth({
      fn: useProject2().stacks,
      buildDir: args.to,
      mode: "deploy"
    });
    Colors2.line("");
    Colors2.line(
      Colors2.success(`\u2714`),
      Colors2.bold(" Built:"),
      `${result.stacks.length} stack${result.stacks.length > 1 ? "s" : ""} to ${path20.relative(process.cwd(), result.directory)}`
    );
    process.exit(0);
  }
);

// src/cli/commands/deploy.tsx
init_credentials();
init_colors();
import fs17 from "fs/promises";
import path19 from "path";
var deploy2 = (program2) => program2.command(
  "deploy [filter]",
  "Deploy your app to AWS",
  (yargs2) => yargs2.option("from", {
    type: "string",
    describe: "Deploy using previously built output"
  }).positional("filter", {
    type: "string",
    describe: "Optionally filter stacks to deploy"
  }),
  async (args) => {
    const React2 = await import("react");
    const { printDeploymentResults: printDeploymentResults2 } = await Promise.resolve().then(() => (init_deploy2(), deploy_exports));
    const { createSpinner: createSpinner2 } = await Promise.resolve().then(() => (init_spinner(), spinner_exports));
    const { dim: dim2, blue: blue4, bold: bold2 } = await import("colorette");
    const { useProject: useProject2 } = await Promise.resolve().then(() => (init_project(), project_exports));
    const { loadAssembly: loadAssembly2, useAppMetadata: useAppMetadata2, saveAppMetadata: saveAppMetadata2, Stacks } = await Promise.resolve().then(() => (init_stacks(), stacks_exports));
    const { getCiInfo: getCiInfo2 } = await Promise.resolve().then(() => (init_ci_info(), ci_info_exports));
    const { render } = await import("ink");
    const { DeploymentUI: DeploymentUI2 } = await Promise.resolve().then(() => (init_deploy2(), deploy_exports));
    const { mapValues } = await import("remeda");
    const project = useProject2();
    const [identity, appMetadata] = await Promise.all([
      useSTSIdentity(),
      useAppMetadata2()
    ]);
    async function promptChangeMode() {
      const readline = await import("readline");
      const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
      });
      return new Promise((resolve) => {
        console.log("");
        rl.question(
          `You were previously running the stage "${project.config.stage}" in dev mode. It is recommended that you use a different stage for production. Read more here \u2014 https://docs.sst.dev/live-lambda-development

Are you sure you want to deploy to this stage? (y/N) `,
          async (input) => {
            rl.close();
            resolve(input.trim() === "y");
          }
        );
      });
    }
    if (!getCiInfo2().isCI && appMetadata && appMetadata.mode !== "deploy") {
      if (!await promptChangeMode()) {
        process.exit(0);
      }
    }
    Colors.line(`${Colors.primary.bold(`SST v${project.version}`)}`);
    Colors.gap();
    Colors.line(
      `${Colors.primary(`\u279C`)}  ${Colors.bold("App:")}     ${project.config.name}`
    );
    Colors.line(`   ${Colors.bold("Stage:")}   ${project.config.stage}`);
    Colors.line(`   ${Colors.bold("Region:")}  ${project.config.region}`);
    Colors.line(`   ${Colors.bold("Account:")} ${identity.Account}`);
    Colors.gap();
    const isActiveStack = (stackId) => !args.filter || stackId.toLowerCase().replace(project.config.name.toLowerCase(), "").replace(project.config.stage.toLowerCase(), "").includes(args.filter.toLowerCase());
    const assembly = await async function() {
      if (args.from) {
        const result2 = await loadAssembly2(args.from);
        return result2;
      }
      const spinner = createSpinner2({
        text: " Building..."
      });
      const result = await Stacks.synth({
        fn: project.stacks,
        mode: "deploy",
        isActiveStack
      });
      spinner.succeed();
      return result;
    }();
    const target = assembly.stacks.filter((s) => isActiveStack(s.id));
    if (!target.length) {
      Colors.line(`No stacks found matching ${blue4(args.filter)}`);
      process.exit(1);
    }
    const component = render(/* @__PURE__ */ React2.createElement(DeploymentUI2, { assembly }));
    const results = await Stacks.deployMany(target);
    component.clear();
    component.unmount();
    printDeploymentResults2(assembly, results);
    if (Object.values(results).some((stack) => Stacks.isFailed(stack.status)))
      process.exit(1);
    fs17.writeFile(
      path19.join(project.paths.out, "outputs.json"),
      JSON.stringify(
        mapValues(results, (val) => val.outputs),
        null,
        2
      )
    );
    await saveAppMetadata2({ mode: "deploy" });
    process.exit(0);
  }
);

// src/cli/commands/remove.tsx
var remove2 = (program2) => program2.command(
  "remove [filter]",
  "Remove your app from AWS",
  (yargs2) => yargs2.option("from", { type: "string" }).positional("filter", {
    type: "string",
    describe: "Optionally filter stacks to remove"
  }),
  async (args) => {
    const React2 = await import("react");
    const { dim: dim2, blue: blue4, bold: bold2 } = await import("colorette");
    const { useProject: useProject2 } = await Promise.resolve().then(() => (init_project(), project_exports));
    const { loadAssembly: loadAssembly2, clearAppMetadata: clearAppMetadata2, Stacks } = await Promise.resolve().then(() => (init_stacks(), stacks_exports));
    const { render } = await import("ink");
    const { DeploymentUI: DeploymentUI2 } = await Promise.resolve().then(() => (init_deploy2(), deploy_exports));
    const { printDeploymentResults: printDeploymentResults2 } = await Promise.resolve().then(() => (init_deploy2(), deploy_exports));
    const { Colors: Colors2 } = await Promise.resolve().then(() => (init_colors(), colors_exports));
    const { useSTSIdentity: useSTSIdentity2 } = await Promise.resolve().then(() => (init_credentials(), credentials_exports));
    const project = useProject2();
    const identity = await useSTSIdentity2();
    Colors2.line(`${Colors2.primary.bold(`SST v${project.version}`)}`);
    Colors2.gap();
    Colors2.line(
      `${Colors2.primary(`\u279C`)}  ${Colors2.bold("App:")}     ${project.config.name}`
    );
    Colors2.line(`   ${Colors2.bold("Stage:")}   ${project.config.stage}`);
    Colors2.line(`   ${Colors2.bold("Region:")}  ${project.config.region}`);
    Colors2.line(`   ${Colors2.bold("Account:")} ${identity.Account}`);
    const assembly = await async function() {
      if (args.from) {
        const result = await loadAssembly2(args.from);
        return result;
      }
      return await Stacks.synth({
        fn: project.stacks,
        mode: "remove"
      });
    }();
    const target = assembly.stacks.filter(
      (s) => !args.filter || s.id.toLowerCase().replace(project.config.name.toLowerCase(), "").replace(project.config.stage.toLowerCase(), "").includes(args.filter.toLowerCase())
    );
    if (!target.length) {
      console.log(`No stacks found matching ${blue4(args.filter)}`);
      process.exit(1);
    }
    const component = render(
      /* @__PURE__ */ React2.createElement(DeploymentUI2, { assembly, remove: true })
    );
    const results = await Stacks.removeMany(target);
    component.clear();
    component.unmount();
    printDeploymentResults2(assembly, results, true);
    if (Object.values(results).some((stack) => Stacks.isFailed(stack.status)))
      process.exit(1);
    await clearAppMetadata2();
    process.exit(0);
  }
);

// src/cli/commands/console.ts
var consoleCommand = async (program2) => program2.command(
  "console",
  "Start the SST Console",
  (yargs2) => yargs2,
  async () => {
    const { blue: blue4 } = await import("colorette");
    const { useRuntimeServer: useRuntimeServer2 } = await Promise.resolve().then(() => (init_server(), server_exports));
    const { useLocalServer: useLocalServer2 } = await Promise.resolve().then(() => (init_server2(), server_exports2));
    const { printHeader: printHeader2 } = await Promise.resolve().then(() => (init_header(), header_exports));
    const { clear: clear2 } = await Promise.resolve().then(() => (init_terminal(), terminal_exports));
    await Promise.all([
      useRuntimeServer2(),
      useLocalServer2({
        key: "",
        cert: "",
        live: false
      })
    ]);
    clear2();
    printHeader2({ console: true, hint: "ready!" });
  }
);

// src/cli/commands/secrets/get.ts
var get = (program2) => program2.command(
  "get <name>",
  "Get the value of a secret",
  (yargs2) => yargs2.positional("name", {
    type: "string",
    describe: "Name of the secret",
    demandOption: true
  }).option("fallback", {
    type: "boolean",
    describe: "Get the fallback value"
  }),
  async (args) => {
    const { red: red2 } = await import("colorette");
    const { Config: Config2 } = await Promise.resolve().then(() => (init_config(), config_exports));
    const { Colors: Colors2 } = await Promise.resolve().then(() => (init_colors(), colors_exports));
    try {
      const result = await Config2.getSecret({
        key: args.name,
        fallback: args.fallback === true
      });
      console.log(result);
    } catch {
      Colors2.line(Colors2.danger(`\u2716 `), `"${args.name}" is not set`);
    }
  }
);

// src/cli/commands/secrets/list.ts
var list = (program2) => program2.command(
  "list [format]",
  "Fetch all the secrets",
  (yargs2) => yargs2.positional("format", {
    type: "string",
    choices: ["table", "env"]
  }),
  async (args) => {
    const { Config: Config2 } = await Promise.resolve().then(() => (init_config(), config_exports));
    const { gray } = await import("colorette");
    const { Colors: Colors2 } = await Promise.resolve().then(() => (init_colors(), colors_exports));
    const secrets2 = await Config2.secrets();
    if (Object.entries(secrets2).length === 0) {
      Colors2.line("No secrets set");
      return;
    }
    switch (args.format || "table") {
      case "env":
        for (const [key, value] of Object.entries(secrets2)) {
          console.log(`${key}=${value.value || value.fallback}`);
        }
        break;
      case "table":
        const keys = Object.keys(secrets2);
        const keyLen = Math.max(
          "Secrets".length,
          ...keys.map((key) => key.length)
        );
        const valueLen = Math.max(
          "Values".length,
          ...keys.map(
            (key) => secrets2[key].value ? secrets2[key].value.length : `${secrets2[key].fallback} (fallback)`.length
          )
        );
        console.log(
          "\u250C".padEnd(keyLen + 3, "\u2500") + "\u252C" + "".padEnd(valueLen + 2, "\u2500") + "\u2510"
        );
        console.log(
          `\u2502 ${"Secrets".padEnd(keyLen)} \u2502 ${"Values".padEnd(valueLen)} \u2502`
        );
        console.log(
          "\u251C".padEnd(keyLen + 3, "\u2500") + "\u253C" + "".padEnd(valueLen + 2, "\u2500") + "\u2524"
        );
        keys.sort().forEach((key) => {
          const value = secrets2[key].value ? secrets2[key].value : `${secrets2[key].fallback} ${gray("(fallback)")}`;
          console.log(
            `\u2502 ${key.padEnd(keyLen)} \u2502 ${value.padEnd(valueLen)} \u2502`
          );
        });
        console.log(
          "\u2514".padEnd(keyLen + 3, "\u2500") + "\u2534" + "".padEnd(valueLen + 2, "\u2500") + "\u2518"
        );
        break;
    }
  }
);

// src/cli/commands/secrets/load.ts
var load2 = (program2) => program2.command(
  "load <filename>",
  "Loads secrets from an .env file",
  (yargs2) => yargs2.positional("filename", {
    type: "string",
    demandOption: true
  }),
  async (args) => {
    const { Config: Config2 } = await Promise.resolve().then(() => (init_config(), config_exports));
    const { Colors: Colors2 } = await Promise.resolve().then(() => (init_colors(), colors_exports));
    const { blue: blue4 } = await import("colorette");
    const { createSpinner: createSpinner2 } = await Promise.resolve().then(() => (init_spinner(), spinner_exports));
    const { parse: parse2 } = await import("dotenv");
    const fs18 = await import("fs/promises");
    const fileContent = await fs18.readFile(args.filename, "utf-8");
    const envVars = parse2(fileContent);
    const setting = createSpinner2(
      ` Setting secrets from "${args.filename}"`
    ).start();
    for (const [key, value] of Object.entries(envVars)) {
      await Config2.setSecret({ key, value });
    }
    setting.succeed();
    const envNames = Object.keys(envVars);
    const restarting = createSpinner2(
      ` Restarting all resources using ${blue4(envNames.join(", "))}...`
    ).start();
    const { edgeSites, sites, placeholderSites, functions } = await Config2.restart(envNames);
    restarting.stop().clear();
    const siteCount = sites.length + placeholderSites.length;
    if (siteCount > 0) {
      Colors2.line(
        Colors2.success(`\u2714 `),
        siteCount === 1 ? `Reloaded ${siteCount} site` : `Reloaded ${siteCount} sites`
      );
    }
    const functionCount = functions.length;
    if (functionCount > 0) {
      Colors2.line(
        Colors2.success(`\u2714 `),
        functionCount === 1 ? `Reloaded ${functionCount} function` : `Reloaded ${functionCount} functions`
      );
    }
    edgeSites.forEach(({ id, type }) => {
      Colors2.line(
        Colors2.primary(`\u279C `),
        `Redeploy the "${id}" ${type} to use the new secret`
      );
    });
    process.exit(0);
  }
);

// src/cli/commands/secrets/remove.ts
var remove3 = (program2) => program2.command(
  "remove <name>",
  "Remove a secret",
  (yargs2) => yargs2.positional("name", {
    describe: "Name of the secret",
    type: "string",
    demandOption: true
  }).option("fallback", {
    type: "boolean",
    describe: "Remove the fallback value"
  }),
  async (args) => {
    const { Config: Config2 } = await Promise.resolve().then(() => (init_config(), config_exports));
    const { Colors: Colors2 } = await Promise.resolve().then(() => (init_colors(), colors_exports));
    try {
      await Config2.removeSecret({
        key: args.name,
        fallback: args.fallback === true
      });
      Colors2.line(Colors2.success(`\u2714 `), `Removed "${args.name}"`);
    } catch {
      Colors2.line(Colors2.danger(`\u2716 `), `"${args.name}" is not set`);
    }
  }
);

// src/cli/commands/secrets/set.ts
var set = (program2) => program2.command(
  "set <name> <value>",
  "Set the value of a secret",
  (yargs2) => yargs2.positional("name", {
    type: "string",
    describe: "Name of the secret",
    demandOption: true
  }).positional("value", {
    type: "string",
    describe: "Value of the secret",
    demandOption: true
  }).option("fallback", {
    type: "boolean",
    describe: "Set the fallback value"
  }),
  async (args) => {
    const { Config: Config2 } = await Promise.resolve().then(() => (init_config(), config_exports));
    const { Colors: Colors2 } = await Promise.resolve().then(() => (init_colors(), colors_exports));
    const { blue: blue4 } = await import("colorette");
    const { createSpinner: createSpinner2 } = await Promise.resolve().then(() => (init_spinner(), spinner_exports));
    const setting = createSpinner2(` Setting "${args.name}"`).start();
    await Config2.setSecret({
      key: args.name,
      value: args.value,
      fallback: args.fallback === true
    });
    setting.succeed();
    const restarting = createSpinner2(
      ` Reloading all resources using ${blue4(args.name)}...`
    ).start();
    const { edgeSites, sites, placeholderSites, functions } = await Config2.restart([args.name]);
    restarting.stop().clear();
    const siteCount = sites.length + placeholderSites.length;
    if (siteCount > 0) {
      Colors2.line(
        Colors2.success(`\u2714 `),
        siteCount === 1 ? `Reloaded ${siteCount} site` : `Reloaded ${siteCount} sites`
      );
    }
    const functionCount = functions.length;
    if (functionCount > 0) {
      Colors2.line(
        Colors2.success(`\u2714 `),
        functionCount === 1 ? `Reloaded ${functionCount} function` : `Reloaded ${functionCount} functions`
      );
    }
    edgeSites.forEach(({ id, type }) => {
      Colors2.line(
        Colors2.primary(`\u279C `),
        `Redeploy the "${id}" ${type} to use the new secret`
      );
    });
    process.exit(0);
  }
);

// src/cli/commands/secrets/secrets.ts
function secrets(program2) {
  program2.command("secrets", "Manage the secrets in your app", (yargs2) => {
    yargs2.demandCommand(1);
    set(yargs2);
    get(yargs2);
    load2(yargs2);
    list(yargs2);
    remove3(yargs2);
    return yargs2;
  });
}

// src/cli/commands/update.ts
var PACKAGE_MATCH = [
  "sst",
  "astro-sst",
  "aws-cdk",
  "@aws-cdk",
  "constructs",
  "svelte-kit-sst",
  "solid-start-sst"
];
var FIELDS = ["dependencies", "devDependencies"];
var update = (program2) => program2.command(
  "update [version]",
  "Update your SST and CDK packages",
  (yargs2) => yargs2.positional("version", {
    type: "string",
    describe: "Optionally specify a version to update to"
  }),
  async (args) => {
    const { green, yellow } = await import("colorette");
    const fs18 = await import("fs/promises");
    const path20 = await import("path");
    const { fetch } = await import("undici");
    const { useProject: useProject2 } = await Promise.resolve().then(() => (init_project(), project_exports));
    const { Colors: Colors2 } = await Promise.resolve().then(() => (init_colors(), colors_exports));
    async function find2(dir) {
      const children = await fs18.readdir(dir);
      const tasks2 = children.map(async (item) => {
        if (item === "node_modules")
          return [];
        if (/(^|\/)\.[^\/\.]/g.test(item))
          return [];
        const full = path20.join(dir, item);
        if (item === "package.json")
          return [full];
        const stat = await fs18.stat(full);
        if (stat.isDirectory())
          return find2(full);
        return [];
      });
      return (await Promise.all(tasks2)).flat();
    }
    const project = useProject2();
    const files = await find2(project.paths.root);
    const metadata3 = await fetch(
      `https://registry.npmjs.org/sst/${args.version || "latest"}`
    ).then((resp) => resp.json());
    const results = /* @__PURE__ */ new Map();
    const tasks = files.map(async (file) => {
      const data2 = await fs18.readFile(file).then((x) => x.toString()).then(JSON.parse);
      for (const field of FIELDS) {
        const deps = data2[field];
        if (!deps)
          continue;
        for (const [pkg, existing] of Object.entries(deps)) {
          if (!PACKAGE_MATCH.some((x) => pkg.startsWith(x)))
            continue;
          const desired = (() => {
            if (["sst", "astro-sst"].includes(pkg))
              return metadata3.version;
            if (pkg === "constructs")
              return metadata3.dependencies.constructs;
            if (pkg.endsWith("alpha"))
              return metadata3.dependencies["@aws-cdk/aws-apigatewayv2-alpha"];
            return metadata3.dependencies["aws-cdk-lib"];
          })();
          if (existing === desired)
            continue;
          let arr = results.get(file);
          if (!arr) {
            arr = /* @__PURE__ */ new Set();
            results.set(file, arr);
          }
          arr.add([pkg, desired]);
          deps[pkg] = desired;
        }
      }
      if (results.has(file)) {
        await fs18.writeFile(file, JSON.stringify(data2, null, 2));
      }
    });
    await Promise.all(tasks);
    if (results.size === 0) {
      Colors2.line(Colors2.success(`\u2714 `), `Already using v${metadata3.version}`);
      return;
    }
    for (const [file, pkgs] of results.entries()) {
      Colors2.line(
        Colors2.success(`\u2714 `),
        Colors2.bold.dim(path20.relative(project.paths.root, file))
      );
      for (const [pkg, version2] of pkgs) {
        Colors2.line(Colors2.dim(`   ${pkg}@${version2}`));
      }
    }
    Colors2.gap();
    Colors2.line(
      `${Colors2.primary(`\u279C`)}  ${Colors2.warning(
        "Make sure to run: npm install (or pnpm install, or yarn)"
      )}`
    );
    process.exit(0);
  }
);

// src/cli/commands/transform.ts
var transform = (program2) => program2.command(
  "transform <mod>",
  "Apply a transform to your SST app",
  (yargs2) => yargs2.positional("mod", {
    type: "string",
    describe: "Name of the transform",
    demandOption: true
  }),
  async (args) => {
    const { Colors: Colors2 } = await Promise.resolve().then(() => (init_colors(), colors_exports));
    if (args.mod === "resource-binding-secrets") {
      await handleSecretsMigration();
      Colors2.line(
        Colors2.success(`\u2714 `),
        `Transform "${args.mod}" applied successfully!`
      );
      return;
    }
    Colors2.line(Colors2.danger(`\u2716 `), `Transform "${args.mod}" not found`);
  }
);
async function handleSecretsMigration() {
  const { useProject: useProject2 } = await Promise.resolve().then(() => (init_project(), project_exports));
  const { useAWSClient: useAWSClient2 } = await Promise.resolve().then(() => (init_credentials(), credentials_exports));
  const { SSMClient: SSMClient2, GetParametersByPathCommand: GetParametersByPathCommand2, PutParameterCommand: PutParameterCommand2 } = await import("@aws-sdk/client-ssm");
  const project = useProject2();
  const { name: app, stage } = project.config;
  const ssm = useAWSClient2(SSMClient2);
  async function* getAllPrametersByPath(prefix) {
    let token;
    while (true) {
      const results = await ssm.send(
        new GetParametersByPathCommand2({
          Path: prefix,
          WithDecryption: true,
          Recursive: true,
          NextToken: token
        })
      );
      yield* results.Parameters || [];
      if (!results.NextToken)
        break;
      token = results.NextToken;
    }
  }
  async function migrateSecretsSSMPath(stage2) {
    const oldPrefix = `/sst/${app}/${stage2}/secrets/`;
    const newPrefix = `/sst/${app}/${stage2}/Secret/`;
    for await (const secret of getAllPrametersByPath(oldPrefix)) {
      const name = secret.Name.split("/")[5];
      if (name === "SST_AUTH_PRIVATE" || name === "SST_AUTH_PUBLIC") {
        continue;
      }
      await ssm.send(
        new PutParameterCommand2({
          Name: `${newPrefix}${name}/value`,
          Value: secret.Value,
          Type: secret.Type,
          Overwrite: true
        })
      );
    }
  }
  await migrateSecretsSSMPath(stage);
  await migrateSecretsSSMPath(".fallback");
}

// src/cli/ui/stack.ts
init_project();
function stackNameToId2(stack) {
  const project = useProject();
  const prefix = `${project.config.stage}-${project.config.name}-`;
  return stack.startsWith(prefix) ? stack.substring(prefix.length) : stack;
}

// src/cli/commands/diff.ts
var diff2 = (program2) => program2.command(
  "diff",
  "Compare your app with what is deployed on AWS",
  (yargs2) => yargs2.option("dev", {
    type: "boolean",
    describe: "Compare in dev mode"
  }),
  async (args) => {
    const { useProject: useProject2 } = await Promise.resolve().then(() => (init_project(), project_exports));
    const { Stacks } = await Promise.resolve().then(() => (init_stacks(), stacks_exports));
    const { useAWSClient: useAWSClient2 } = await Promise.resolve().then(() => (init_credentials(), credentials_exports));
    const { CloudFormationClient: CloudFormationClient4, GetTemplateCommand } = await import("@aws-sdk/client-cloudformation");
    const { createSpinner: createSpinner2 } = await Promise.resolve().then(() => (init_spinner(), spinner_exports));
    const { Colors: Colors2 } = await Promise.resolve().then(() => (init_colors(), colors_exports));
    const project = useProject2();
    const assembly = await Stacks.synth({
      fn: project.stacks,
      mode: args.dev ? "dev" : "deploy"
    });
    let changesAcc = 0;
    let changedStacks = 0;
    const cfn = useAWSClient2(CloudFormationClient4);
    for (const stack of assembly.stacks) {
      const spinner = createSpinner2(
        `${stack.stackName}: Checking for changes...`
      );
      const oldTemplate = await getTemplate(stack.stackName);
      if (!oldTemplate) {
        spinner.clear();
        Colors2.line(
          `\u279C  ${Colors2.dim.bold(
            stackNameToId2(stack.stackName) + ":"
          )} New stack`
        );
        Colors2.gap();
        continue;
      }
      const { count, diff: diff3 } = await Stacks.diff(stack, oldTemplate);
      spinner.clear();
      if (count === 0) {
        Colors2.line(
          `\u279C  ${Colors2.dim.bold(
            stackNameToId2(stack.stackName) + ":"
          )} No changes`
        );
        Colors2.gap();
      } else if (count === 1) {
        Colors2.line(
          `\u279C  ${Colors2.dim.bold(
            stackNameToId2(stack.stackName) + ":"
          )} ${count} change`
        );
        Colors2.gap();
        console.log(diff3);
        changesAcc += count;
        changedStacks++;
      } else {
        Colors2.line(
          `\u279C  ${Colors2.dim.bold(
            stackNameToId2(stack.stackName) + ":"
          )} ${count} changes`
        );
        Colors2.gap();
        console.log(diff3);
        changesAcc += count;
        changedStacks++;
      }
    }
    if (changedStacks === 0) {
      Colors2.line(Colors2.success(`\u2714`), Colors2.bold(" Diff:"), "No changes");
    } else {
      Colors2.line(
        Colors2.success(`\u2714`),
        Colors2.bold(" Diff:"),
        changesAcc === 1 ? "1 change found in" : `${changesAcc} changes in`,
        changedStacks === 1 ? "1 stack" : `${changedStacks} stacks`
      );
    }
    process.exit(0);
    async function getTemplate(stackName) {
      try {
        const response = await cfn.send(
          new GetTemplateCommand({ StackName: stackName })
        );
        return JSON.parse(response.TemplateBody);
      } catch (e) {
        if (e.name === "ValidationError" && e.message.includes("does not exist")) {
          return;
        }
        throw e;
      }
    }
  }
);

// src/cli/commands/version.ts
var version = (program2) => program2.command(
  "version",
  "Print SST and CDK version",
  (yargs2) => yargs2,
  async (args) => {
    const { Colors: Colors2 } = await Promise.resolve().then(() => (init_colors(), colors_exports));
    const { useProject: useProject2 } = await Promise.resolve().then(() => (init_project(), project_exports));
    const project = useProject2();
    Colors2.line(Colors2.bold(`SST:`), `v${project.version}`);
    Colors2.line(Colors2.bold(`CDK:`), `v${project.cdkVersion}`);
    Colors2.line(Colors2.bold(`Constructs:`), `v${project.constructsVersion}`);
  }
);

// src/cli/commands/telemetry.ts
init_colors();
var telemetry = (program2) => program2.command(
  "telemetry <action>",
  "Load environment variables and start your frontend",
  (yargs2) => yargs2.positional("action", {
    type: "string",
    describe: "Whether to enable or disable",
    choices: ["enable", "disable"],
    demandOption: true
  }),
  async (args) => {
    const { enable: enable2, disable: disable2 } = await Promise.resolve().then(() => (init_telemetry(), telemetry_exports));
    if (args.action === "enable") {
      enable2();
      Colors.line(Colors.success(`\u2714 `), `Telemetry enabled`);
    }
    if (args.action === "disable") {
      disable2();
      Colors.line(Colors.success(`\u2714 `), `Telemetry disabled`);
    }
  }
);

// src/cli/commands/connect.ts
var connect = (program2) => program2.command(
  "connect",
  "",
  (yargs2) => yargs2,
  async (args) => {
    if (!args.future)
      throw new Error("This command is not yet available.");
    const { useAWSClient: useAWSClient2 } = await Promise.resolve().then(() => (init_credentials(), credentials_exports));
    const { useProject: useProject2 } = await Promise.resolve().then(() => (init_project(), project_exports));
    const { useSTSIdentity: useSTSIdentity2 } = await Promise.resolve().then(() => (init_credentials(), credentials_exports));
    const { IAMClient, CreateRoleCommand, AttachRolePolicyCommand } = await Promise.resolve().then(() => __toESM(require_dist_cjs41(), 1));
    const client = useAWSClient2(IAMClient);
    await client.send(
      new CreateRoleCommand({
        RoleName: "sst",
        AssumeRolePolicyDocument: JSON.stringify({
          Version: "2012-10-17",
          Statement: [
            {
              Effect: "Allow",
              Principal: {
                AWS: "arn:aws:iam::917397401067:root"
              },
              Action: "sts:AssumeRole"
            }
          ]
        })
      })
    ).catch((e) => {
      if (e.Error.Code === "EntityAlreadyExists")
        return;
      throw e;
    });
    await client.send(
      new AttachRolePolicyCommand({
        RoleName: "sst",
        PolicyArn: "arn:aws:iam::aws:policy/AdministratorAccess"
      })
    );
    const project = useProject2();
    const identity = await useSTSIdentity2();
    console.log(
      `http://localhost:3000/connect?app=${project.config.name}&stage=${project.config.stage}&aws_account_id=${identity.Account}`
    );
  }
);

// src/cli/sst.ts
dotenv2.config({
  override: true
});
dotenv2.config({
  path: ".env.local",
  override: true
});
bootstrap(program);
dev(program);
deploy2(program);
build(program);
bind(program);
secrets(program);
remove2(program);
update(program);
transform(program);
consoleCommand(program);
diff2(program);
version(program);
telemetry(program);
connect(program);
if ("setSourceMapsEnabled" in process) {
  process.setSourceMapsEnabled(true);
}
process.removeAllListeners("uncaughtException");
process.on("uncaughtException", (err) => {
  Logger.debug(err);
  const spinners = useSpinners();
  for (const spinner of spinners) {
    if (spinner.isSpinning)
      spinner.fail(spinner.text);
  }
  console.log(red("Error:"), err.message);
  if (!(err instanceof VisibleError)) {
    console.log();
    console.trace(err.stack);
  }
  console.log();
  console.log(
    `Need help with this error? Join the SST community on Discord ${blue3(
      `https://sst.dev/discord`
    )}`
  );
  process.exit(1);
});
process.on("beforeExit", () => {
});
var nodeVersion = process.versions.node;
if (Number(nodeVersion.split(".")[0]) < 16) {
  throw new VisibleError(
    `Node.js version ${nodeVersion} is not supported by SST. Please upgrade to Node.js 16 or later.`
  );
}
program.parse();
