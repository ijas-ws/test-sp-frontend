"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransferConflictException = exports.InvalidResponseException = exports.TaskAlreadyExistsException = exports.ResourceRegistrationFailureException = exports.CertificateConflictException = exports.RegistrationCodeValidationException = exports.ViolationEventType = exports.ReportType = void 0;
const IoTServiceException_1 = require("./IoTServiceException");
exports.ReportType = {
    ERRORS: "ERRORS",
    RESULTS: "RESULTS",
};
exports.ViolationEventType = {
    ALARM_CLEARED: "alarm-cleared",
    ALARM_INVALIDATED: "alarm-invalidated",
    IN_ALARM: "in-alarm",
};
class RegistrationCodeValidationException extends IoTServiceException_1.IoTServiceException {
    constructor(opts) {
        super({
            name: "RegistrationCodeValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "RegistrationCodeValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RegistrationCodeValidationException.prototype);
    }
}
exports.RegistrationCodeValidationException = RegistrationCodeValidationException;
class CertificateConflictException extends IoTServiceException_1.IoTServiceException {
    constructor(opts) {
        super({
            name: "CertificateConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "CertificateConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CertificateConflictException.prototype);
    }
}
exports.CertificateConflictException = CertificateConflictException;
class ResourceRegistrationFailureException extends IoTServiceException_1.IoTServiceException {
    constructor(opts) {
        super({
            name: "ResourceRegistrationFailureException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceRegistrationFailureException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceRegistrationFailureException.prototype);
    }
}
exports.ResourceRegistrationFailureException = ResourceRegistrationFailureException;
class TaskAlreadyExistsException extends IoTServiceException_1.IoTServiceException {
    constructor(opts) {
        super({
            name: "TaskAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TaskAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TaskAlreadyExistsException.prototype);
    }
}
exports.TaskAlreadyExistsException = TaskAlreadyExistsException;
class InvalidResponseException extends IoTServiceException_1.IoTServiceException {
    constructor(opts) {
        super({
            name: "InvalidResponseException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidResponseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidResponseException.prototype);
    }
}
exports.InvalidResponseException = InvalidResponseException;
class TransferConflictException extends IoTServiceException_1.IoTServiceException {
    constructor(opts) {
        super({
            name: "TransferConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "TransferConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TransferConflictException.prototype);
    }
}
exports.TransferConflictException = TransferConflictException;
