"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetPublishing = void 0;
const docker_1 = require("./private/docker");
const handlers_1 = require("./private/handlers");
const progress_1 = require("./progress");
class AssetPublishing {
    constructor(manifest, options) {
        this.manifest = manifest;
        this.options = options;
        /**
         * The message for the IPublishProgress interface
         */
        this.message = 'Starting';
        this.failures = new Array();
        this.completedOperations = 0;
        this.aborted = false;
        this.assets = manifest.entries;
        this.totalOperations = this.assets.length;
        this.publishInParallel = options.publishInParallel ?? false;
        this.buildAssets = options.buildAssets ?? true;
        this.publishAssets = options.publishAssets ?? true;
        const getMessages = () => {
            if (this.buildAssets && this.publishAssets) {
                return {
                    startMessagePrefix: 'Building and publishing',
                    successMessagePrefix: 'Built and published',
                    errorMessagePrefix: 'Error building and publishing',
                };
            }
            else if (this.buildAssets) {
                return {
                    startMessagePrefix: 'Building',
                    successMessagePrefix: 'Built',
                    errorMessagePrefix: 'Error building',
                };
            }
            else {
                return {
                    startMessagePrefix: 'Publishing',
                    successMessagePrefix: 'Published',
                    errorMessagePrefix: 'Error publishing',
                };
            }
        };
        const messages = getMessages();
        this.startMessagePrefix = messages.startMessagePrefix;
        this.successMessagePrefix = messages.successMessagePrefix;
        this.errorMessagePrefix = messages.errorMessagePrefix;
        const self = this;
        this.handlerHost = {
            aws: this.options.aws,
            get aborted() { return self.aborted; },
            emitMessage(t, m) { self.progressEvent(t, m); },
            dockerFactory: new docker_1.DockerFactory(),
        };
    }
    /**
     * Publish all assets from the manifest
     */
    async publish() {
        if (this.publishInParallel) {
            await Promise.all(this.assets.map(async (asset) => this.publishAsset(asset)));
        }
        else {
            for (const asset of this.assets) {
                if (!await this.publishAsset(asset)) {
                    break;
                }
            }
        }
        if ((this.options.throwOnError ?? true) && this.failures.length > 0) {
            throw new Error(`${this.errorMessagePrefix}: ${this.failures.map(e => e.error.message)}`);
        }
    }
    /**
     * Publish an asset.
     * @param asset The asset to publish
     * @returns false when publishing should stop
     */
    async publishAsset(asset) {
        try {
            if (this.progressEvent(progress_1.EventType.START, `${this.startMessagePrefix} ${asset.id}`)) {
                return false;
            }
            const handler = (0, handlers_1.makeAssetHandler)(this.manifest, asset, this.handlerHost);
            if (this.buildAssets) {
                await handler.build();
            }
            if (this.publishAssets) {
                await handler.publish();
            }
            if (this.aborted) {
                throw new Error('Aborted');
            }
            this.completedOperations++;
            if (this.progressEvent(progress_1.EventType.SUCCESS, `${this.successMessagePrefix} ${asset.id}`)) {
                return false;
            }
        }
        catch (e) {
            this.failures.push({ asset, error: e });
            this.completedOperations++;
            if (this.progressEvent(progress_1.EventType.FAIL, e.message)) {
                return false;
            }
        }
        return true;
    }
    get percentComplete() {
        if (this.totalOperations === 0) {
            return 100;
        }
        return Math.floor((this.completedOperations / this.totalOperations) * 100);
    }
    abort() {
        this.aborted = true;
    }
    get hasFailures() {
        return this.failures.length > 0;
    }
    /**
     * Publish a progress event to the listener, if present.
     *
     * Returns whether an abort is requested. Helper to get rid of repetitive code in publish().
     */
    progressEvent(event, message) {
        this.message = message;
        if (this.options.progressListener) {
            this.options.progressListener.onPublishEvent(event, this);
        }
        return this.aborted;
    }
}
exports.AssetPublishing = AssetPublishing;
//# sourceMappingURL=data:application/json;base64,