"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiMapping = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_apigatewayv2_1 = require("aws-cdk-lib/aws-apigatewayv2");
/**
 * Create a new API mapping for API Gateway API endpoint.
 * @resource AWS::ApiGatewayV2::ApiMapping
 */
class ApiMapping extends aws_cdk_lib_1.Resource {
    /**
     * import from API ID
     */
    static fromApiMappingAttributes(scope, id, attrs) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_apigatewayv2_alpha_ApiMappingAttributes(attrs);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.fromApiMappingAttributes);
            }
            throw error;
        }
        class Import extends aws_cdk_lib_1.Resource {
            constructor() {
                super(...arguments);
                this.apiMappingId = attrs.apiMappingId;
            }
        }
        return new Import(scope, id);
    }
    constructor(scope, id, props) {
        super(scope, id);
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_apigatewayv2_alpha_ApiMappingProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, ApiMapping);
            }
            throw error;
        }
        // defaultStage is present in IHttpStage.
        // However, importing "http" or "websocket" must import "common", but creating dependencies
        // the other way will cause potential cycles.
        // So casting to 'any'
        let stage = props.stage ?? props.api.defaultStage;
        if (!stage) {
            throw new Error('stage property must be specified');
        }
        if (props.apiMappingKey === '') {
            throw new Error('empty string for api mapping key not allowed');
        }
        const apiMappingProps = {
            apiId: props.api.apiId,
            domainName: props.domainName.name,
            stage: stage.stageName,
            apiMappingKey: props.apiMappingKey,
        };
        const resource = new aws_apigatewayv2_1.CfnApiMapping(this, 'Resource', apiMappingProps);
        // ensure the dependency on the provided stage
        this.node.addDependency(stage);
        this.apiMappingId = resource.ref;
        this.mappingKey = props.apiMappingKey;
        this.domainName = props.domainName;
    }
}
_a = JSII_RTTI_SYMBOL_1;
ApiMapping[_a] = { fqn: "@aws-cdk/aws-apigatewayv2-alpha.ApiMapping", version: "2.72.1-alpha.0" };
exports.ApiMapping = ApiMapping;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLW1hcHBpbmcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhcGktbWFwcGluZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSw2Q0FBa0Q7QUFLbEQsbUVBQWlGO0FBc0RqRjs7O0dBR0c7QUFDSCxNQUFhLFVBQVcsU0FBUSxzQkFBUTtJQUN0Qzs7T0FFRztJQUNJLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUEyQjs7Ozs7Ozs7OztRQUM5RixNQUFNLE1BQU8sU0FBUSxzQkFBUTtZQUE3Qjs7Z0JBQ2tCLGlCQUFZLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQztZQUNwRCxDQUFDO1NBQUE7UUFDRCxPQUFPLElBQUksTUFBTSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztLQUM5QjtJQWdCRCxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQXNCO1FBQzlELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7Ozs7OzsrQ0ExQlIsVUFBVTs7OztRQTRCbkIseUNBQXlDO1FBQ3pDLDJGQUEyRjtRQUMzRiw2Q0FBNkM7UUFDN0Msc0JBQXNCO1FBQ3RCLElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLElBQUssS0FBSyxDQUFDLEdBQVcsQ0FBQyxZQUFZLENBQUM7UUFDM0QsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNWLE1BQU0sSUFBSSxLQUFLLENBQUMsa0NBQWtDLENBQUMsQ0FBQztTQUNyRDtRQUVELElBQUksS0FBSyxDQUFDLGFBQWEsS0FBSyxFQUFFLEVBQUU7WUFDOUIsTUFBTSxJQUFJLEtBQUssQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO1NBQ2pFO1FBRUQsTUFBTSxlQUFlLEdBQXVCO1lBQzFDLEtBQUssRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUs7WUFDdEIsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBSTtZQUNqQyxLQUFLLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDdEIsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhO1NBQ25DLENBQUM7UUFFRixNQUFNLFFBQVEsR0FBRyxJQUFJLGdDQUFhLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxlQUFlLENBQUMsQ0FBQztRQUV0RSw4Q0FBOEM7UUFDOUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFL0IsSUFBSSxDQUFDLFlBQVksR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQztRQUN0QyxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUM7S0FDcEM7Ozs7QUF4RFUsZ0NBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJUmVzb3VyY2UsIFJlc291cmNlIH0gZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgeyBJQXBpIH0gZnJvbSAnLi9hcGknO1xuaW1wb3J0IHsgSURvbWFpbk5hbWUgfSBmcm9tICcuL2RvbWFpbi1uYW1lJztcbmltcG9ydCB7IElTdGFnZSB9IGZyb20gJy4vc3RhZ2UnO1xuaW1wb3J0IHsgQ2ZuQXBpTWFwcGluZywgQ2ZuQXBpTWFwcGluZ1Byb3BzIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWFwaWdhdGV3YXl2Mic7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhbiBBcGlHYXRld2F5VjIgQXBpTWFwcGluZyByZXNvdXJjZVxuICogQHNlZSBodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vQVdTQ2xvdWRGb3JtYXRpb24vbGF0ZXN0L1VzZXJHdWlkZS9hd3MtcmVzb3VyY2UtYXBpZ2F0ZXdheXYyLWFwaW1hcHBpbmcuaHRtbFxuICovXG5leHBvcnQgaW50ZXJmYWNlIElBcGlNYXBwaW5nIGV4dGVuZHMgSVJlc291cmNlIHtcbiAgLyoqXG4gICAqIElEIG9mIHRoZSBhcGkgbWFwcGluZ1xuICAgKiBAYXR0cmlidXRlXG4gICAqL1xuICByZWFkb25seSBhcGlNYXBwaW5nSWQ6IHN0cmluZztcbn1cblxuLyoqXG4gKiBQcm9wZXJ0aWVzIHVzZWQgdG8gY3JlYXRlIHRoZSBBcGlNYXBwaW5nIHJlc291cmNlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQXBpTWFwcGluZ1Byb3BzIHtcbiAgLyoqXG4gICAqIEFwaSBtYXBwaW5nIGtleS4gVGhlIHBhdGggd2hlcmUgdGhpcyBzdGFnZSBzaG91bGQgYmUgbWFwcGVkIHRvIG9uIHRoZSBkb21haW5cbiAgICogQGRlZmF1bHQgLSB1bmRlZmluZWQgZm9yIHRoZSByb290IHBhdGggbWFwcGluZy5cbiAgICovXG4gIHJlYWRvbmx5IGFwaU1hcHBpbmdLZXk/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBBcGkgdG8gd2hpY2ggdGhpcyBtYXBwaW5nIGlzIGFwcGxpZWRcbiAgICovXG4gIHJlYWRvbmx5IGFwaTogSUFwaTtcblxuICAvKipcbiAgICogY3VzdG9tIGRvbWFpbiBuYW1lIG9mIHRoZSBtYXBwaW5nIHRhcmdldFxuICAgKi9cbiAgcmVhZG9ubHkgZG9tYWluTmFtZTogSURvbWFpbk5hbWU7XG5cbiAgLyoqXG4gICAqIHN0YWdlIGZvciB0aGUgQXBpTWFwcGluZyByZXNvdXJjZVxuICAgKiByZXF1aXJlZCBmb3IgV2ViU29ja2V0IEFQSVxuICAgKiBkZWZhdWx0cyB0byBkZWZhdWx0IHN0YWdlIG9mIGFuIEhUVFAgQVBJXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gRGVmYXVsdCBzdGFnZSBvZiB0aGUgcGFzc2VkIEFQSSBmb3IgSFRUUCBBUEksIHJlcXVpcmVkIGZvciBXZWJTb2NrZXQgQVBJXG4gICAqL1xuICByZWFkb25seSBzdGFnZT86IElTdGFnZTtcbn1cblxuLyoqXG4gKiBUaGUgYXR0cmlidXRlcyB1c2VkIHRvIGltcG9ydCBleGlzdGluZyBBcGlNYXBwaW5nXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQXBpTWFwcGluZ0F0dHJpYnV0ZXMge1xuICAvKipcbiAgICogVGhlIEFQSSBtYXBwaW5nIElEXG4gICAqL1xuICByZWFkb25seSBhcGlNYXBwaW5nSWQ6IHN0cmluZztcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgQVBJIG1hcHBpbmcgZm9yIEFQSSBHYXRld2F5IEFQSSBlbmRwb2ludC5cbiAqIEByZXNvdXJjZSBBV1M6OkFwaUdhdGV3YXlWMjo6QXBpTWFwcGluZ1xuICovXG5leHBvcnQgY2xhc3MgQXBpTWFwcGluZyBleHRlbmRzIFJlc291cmNlIGltcGxlbWVudHMgSUFwaU1hcHBpbmcge1xuICAvKipcbiAgICogaW1wb3J0IGZyb20gQVBJIElEXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGZyb21BcGlNYXBwaW5nQXR0cmlidXRlcyhzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBhdHRyczogQXBpTWFwcGluZ0F0dHJpYnV0ZXMpOiBJQXBpTWFwcGluZyB7XG4gICAgY2xhc3MgSW1wb3J0IGV4dGVuZHMgUmVzb3VyY2UgaW1wbGVtZW50cyBJQXBpTWFwcGluZyB7XG4gICAgICBwdWJsaWMgcmVhZG9ubHkgYXBpTWFwcGluZ0lkID0gYXR0cnMuYXBpTWFwcGluZ0lkO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEltcG9ydChzY29wZSwgaWQpO1xuICB9XG4gIC8qKlxuICAgKiBJRCBvZiB0aGUgQVBJIE1hcHBpbmdcbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBhcGlNYXBwaW5nSWQ6IHN0cmluZztcblxuICAvKipcbiAgICogQVBJIE1hcHBpbmcga2V5XG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgbWFwcGluZ0tleT86IHN0cmluZztcblxuICAvKipcbiAgICogQVBJIGRvbWFpbiBuYW1lXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgZG9tYWluTmFtZTogSURvbWFpbk5hbWU7XG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IEFwaU1hcHBpbmdQcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAvLyBkZWZhdWx0U3RhZ2UgaXMgcHJlc2VudCBpbiBJSHR0cFN0YWdlLlxuICAgIC8vIEhvd2V2ZXIsIGltcG9ydGluZyBcImh0dHBcIiBvciBcIndlYnNvY2tldFwiIG11c3QgaW1wb3J0IFwiY29tbW9uXCIsIGJ1dCBjcmVhdGluZyBkZXBlbmRlbmNpZXNcbiAgICAvLyB0aGUgb3RoZXIgd2F5IHdpbGwgY2F1c2UgcG90ZW50aWFsIGN5Y2xlcy5cbiAgICAvLyBTbyBjYXN0aW5nIHRvICdhbnknXG4gICAgbGV0IHN0YWdlID0gcHJvcHMuc3RhZ2UgPz8gKHByb3BzLmFwaSBhcyBhbnkpLmRlZmF1bHRTdGFnZTtcbiAgICBpZiAoIXN0YWdlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3N0YWdlIHByb3BlcnR5IG11c3QgYmUgc3BlY2lmaWVkJyk7XG4gICAgfVxuXG4gICAgaWYgKHByb3BzLmFwaU1hcHBpbmdLZXkgPT09ICcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2VtcHR5IHN0cmluZyBmb3IgYXBpIG1hcHBpbmcga2V5IG5vdCBhbGxvd2VkJyk7XG4gICAgfVxuXG4gICAgY29uc3QgYXBpTWFwcGluZ1Byb3BzOiBDZm5BcGlNYXBwaW5nUHJvcHMgPSB7XG4gICAgICBhcGlJZDogcHJvcHMuYXBpLmFwaUlkLFxuICAgICAgZG9tYWluTmFtZTogcHJvcHMuZG9tYWluTmFtZS5uYW1lLFxuICAgICAgc3RhZ2U6IHN0YWdlLnN0YWdlTmFtZSxcbiAgICAgIGFwaU1hcHBpbmdLZXk6IHByb3BzLmFwaU1hcHBpbmdLZXksXG4gICAgfTtcblxuICAgIGNvbnN0IHJlc291cmNlID0gbmV3IENmbkFwaU1hcHBpbmcodGhpcywgJ1Jlc291cmNlJywgYXBpTWFwcGluZ1Byb3BzKTtcblxuICAgIC8vIGVuc3VyZSB0aGUgZGVwZW5kZW5jeSBvbiB0aGUgcHJvdmlkZWQgc3RhZ2VcbiAgICB0aGlzLm5vZGUuYWRkRGVwZW5kZW5jeShzdGFnZSk7XG5cbiAgICB0aGlzLmFwaU1hcHBpbmdJZCA9IHJlc291cmNlLnJlZjtcbiAgICB0aGlzLm1hcHBpbmdLZXkgPSBwcm9wcy5hcGlNYXBwaW5nS2V5O1xuICAgIHRoaXMuZG9tYWluTmFtZSA9IHByb3BzLmRvbWFpbk5hbWU7XG4gIH1cbn1cbiJdfQ==